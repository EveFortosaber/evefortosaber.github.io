{
    "version": "https://jsonfeed.org/version/1",
    "title": "流云阁 • All posts by \"notes\" tag",
    "description": "",
    "home_page_url": "https://evefortosaber.github.io",
    "items": [
        {
            "id": "https://evefortosaber.github.io/2023/03/21/ComputerScience/ProgramDesignNotes/BFS/01%E8%BF%B7%E5%AE%AB/",
            "url": "https://evefortosaber.github.io/2023/03/21/ComputerScience/ProgramDesignNotes/BFS/01%E8%BF%B7%E5%AE%AB/",
            "title": "01迷宫",
            "date_published": "2023-03-20T16:00:00.000Z",
            "content_html": "<p><img data-src=\"https://article.biliimg.com/bfs/article/a8e1e3ad43bbbcef5c47a792997b4c5495abd275.png\" alt=\"01\" /></p>\n<h3 id=\"01迷宫\"><a class=\"anchor\" href=\"#01迷宫\">#</a> 01 迷宫</h3>\n<h4 id=\"题目描述\"><a class=\"anchor\" href=\"#题目描述\">#</a> 题目描述</h4>\n<blockquote>\n<p>有一个仅由数字 0 与 1 组成的 n×n 格迷宫。若你位于一格 0 上，那么你可以移动到相邻 4 格中的某一格 1 上，同样若你位于一格 1 上，那么你可以移动到相邻 4 格中的某一格 0 上。 你的任务是：对于给定的迷宫，询问从某一格开始能移动到多少个格子（包含自身）。</p>\n<h4 id=\"输入\"><a class=\"anchor\" href=\"#输入\">#</a> 输入</h4>\n<p>第 1 行为两个正整数 n,m。 下面 n 行，每行 n 个字符，字符只可能是 0 或者 1，字符之间没有空格。<br />\n接下来 m 行，每行 2 个用空格分隔的正整数 i,j，对应了迷宫中第 i 行第 j 列的一个格子，询问从这一格开始能移动到多少格。</p>\n<h4 id=\"输出\"><a class=\"anchor\" href=\"#输出\">#</a> 输出</h4>\n<p>m 行，对于每个询问输出相应答案。</p>\n<h4 id=\"样例输入-复制\"><a class=\"anchor\" href=\"#样例输入-复制\">#</a> 样例输入 复制</h4>\n<figure class=\"highlight plain\"><figcaption data-lang=\"plain\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>2 2</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>01</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>10</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>1 1</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>2 2</pre></td></tr></table></figure><h4 id=\"样例输出-复制\"><a class=\"anchor\" href=\"#样例输出-复制\">#</a> 样例输出 复制</h4>\n<figure class=\"highlight plain\"><figcaption data-lang=\"plain\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>4</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>4</pre></td></tr></table></figure><h4 id=\"提示\"><a class=\"anchor\" href=\"#提示\">#</a> 提示</h4>\n<p>n &lt;= 400</p>\n</blockquote>\n<h4 id=\"解题思路\"><a class=\"anchor\" href=\"#解题思路\">#</a> 解题思路</h4>\n<p>可以使用 DFS 或 BFS 进行求解。遍历迷宫中的每一个格子，如果为 0 或 1，则进行深度（或广度）优先搜索，将与该格子相邻的数字标记为已访问，并将它们视为同一连通块（包含自身）。搜索结束后，该连通块中的格子数即为所求。最终，遍历完整个迷宫，统计每个连通块中的格子数，得到所有格子数的总和即可。</p>\n<h5 id=\"代码\"><a class=\"anchor\" href=\"#代码\">#</a> 代码</h5>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string.h></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>using namespace std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> MaxN <span class=\"token operator\">=</span> <span class=\"token number\">400</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">,</span> m<span class=\"token punctuation\">,</span> num<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">int</span> direction<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span>swig￼<span class=\"token number\">0</span><span class=\"token operator\">--</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">int</span> visit<span class=\"token punctuation\">[</span>MaxN<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>MaxN<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">int</span> map<span class=\"token punctuation\">[</span>MaxN<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>MaxN<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">Node</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token comment\">/* data */</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">,</span> p<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token function\">Node</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token function\">x</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">y</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">p</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token function\">Node</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> _x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> _y<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> _p<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token function\">x</span><span class=\"token punctuation\">(</span>_x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">y</span><span class=\"token punctuation\">(</span>_y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">p</span><span class=\"token punctuation\">(</span>_p<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 事实上并不需要用到</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">getnum</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> y<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> flag<span class=\"token punctuation\">)</span><span class=\"token comment\">//flag 则是此时所处位置，是 0 或 1</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>flag<span class=\"token punctuation\">)</span><span class=\"token comment\">// 分情况</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token keyword\">case</span> <span class=\"token number\">0</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            <span class=\"token keyword\">int</span> curx <span class=\"token operator\">=</span> x <span class=\"token operator\">+</span> direction<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            <span class=\"token keyword\">int</span> cury <span class=\"token operator\">=</span> y <span class=\"token operator\">+</span> direction<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>visit<span class=\"token punctuation\">[</span>curx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>cury<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> map<span class=\"token punctuation\">[</span>curx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>cury<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span> <span class=\"token operator\">&amp;&amp;</span> curx <span class=\"token operator\">></span> <span class=\"token operator\">-</span><span class=\"token number\">1</span> <span class=\"token operator\">&amp;&amp;</span> curx <span class=\"token operator\">&lt;</span> n <span class=\"token operator\">&amp;&amp;</span> cury <span class=\"token operator\">></span> <span class=\"token operator\">-</span><span class=\"token number\">1</span> <span class=\"token operator\">&amp;&amp;</span> cury <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>                visit<span class=\"token punctuation\">[</span>curx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>cury<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 标记</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>                num<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 可达点加一</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>                <span class=\"token function\">getnum</span><span class=\"token punctuation\">(</span>curx<span class=\"token punctuation\">,</span> cury<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 继续</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token keyword\">case</span> <span class=\"token number\">1</span><span class=\"token operator\">:</span><span class=\"token comment\">// 同上</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>            <span class=\"token keyword\">int</span> curx <span class=\"token operator\">=</span> x <span class=\"token operator\">+</span> direction<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>            <span class=\"token keyword\">int</span> cury <span class=\"token operator\">=</span> y <span class=\"token operator\">+</span> direction<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>visit<span class=\"token punctuation\">[</span>curx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>cury<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> map<span class=\"token punctuation\">[</span>curx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>cury<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> curx <span class=\"token operator\">></span> <span class=\"token operator\">-</span><span class=\"token number\">1</span> <span class=\"token operator\">&amp;&amp;</span> curx <span class=\"token operator\">&lt;</span> n <span class=\"token operator\">&amp;&amp;</span> cury <span class=\"token operator\">></span> <span class=\"token operator\">-</span><span class=\"token number\">1</span> <span class=\"token operator\">&amp;&amp;</span> cury <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>                visit<span class=\"token punctuation\">[</span>curx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>cury<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>                num<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>                <span class=\"token function\">getnum</span><span class=\"token punctuation\">(</span>curx<span class=\"token punctuation\">,</span> cury<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>    cin <span class=\"token operator\">>></span> n <span class=\"token operator\">>></span> m<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>            <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%1d\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>map<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 输入单个数字</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>m<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>        <span class=\"token function\">memset</span><span class=\"token punctuation\">(</span>visit<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>visit<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 重置</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>        num <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 包括它本身</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>        <span class=\"token keyword\">int</span> xx<span class=\"token punctuation\">,</span> yy<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>        cin <span class=\"token operator\">>></span> xx <span class=\"token operator\">>></span> yy<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>        xx<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 以（0，0）为坐标原点</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>        yy<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>        visit<span class=\"token punctuation\">[</span>xx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>yy<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 包括它本身</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>        <span class=\"token function\">getnum</span><span class=\"token punctuation\">(</span>xx<span class=\"token punctuation\">,</span> yy<span class=\"token punctuation\">,</span> map<span class=\"token punctuation\">[</span>xx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>yy<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>        cout <span class=\"token operator\">&lt;&lt;</span> num <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"结语\"><a class=\"anchor\" href=\"#结语\">#</a> 结语</h4>\n<p>在遍历时设置好条件，注意到 i,j 是行列是大于 0 的</p>\n<p>BFS 算法，分类讨论</p>\n",
            "tags": [
                "Notes",
                "C++"
            ]
        },
        {
            "id": "https://evefortosaber.github.io/2023/03/21/ComputerScience/ProgramDesignNotes/BFS/cellnum/",
            "url": "https://evefortosaber.github.io/2023/03/21/ComputerScience/ProgramDesignNotes/BFS/cellnum/",
            "title": "Cellnum",
            "date_published": "2023-03-20T16:00:00.000Z",
            "content_html": "<p><img data-src=\"https://article.biliimg.com/bfs/article/7dfd9f0dfad832dd45c0aebe11248e00a43a5bfa.png\" alt=\"cellnum\" /></p>\n<h3 id=\"cellnum\"><a class=\"anchor\" href=\"#cellnum\">#</a> Cellnum</h3>\n<h4 id=\"题目描述\"><a class=\"anchor\" href=\"#题目描述\">#</a> 题目描述</h4>\n<blockquote>\n<p>一矩形阵列由数字 0 到 9 组成，数字 1 到 9 代表细胞，细胞的定义为沿细胞数字上下左右若还是细胞数字则为同一细胞，求给定矩形阵列的细胞个数。</p>\n<h4 id=\"输入\"><a class=\"anchor\" href=\"#输入\">#</a> 输入</h4>\n<p>第一行两个整数代表矩阵大小 n 和 m。 接下来 n 行，每行一个长度为 m 的只含字符 0 到 9 的字符串，代表这个 n×m 的矩阵。</p>\n<h4 id=\"输出\"><a class=\"anchor\" href=\"#输出\">#</a> 输出</h4>\n<p>一行一个整数代表细胞个数。</p>\n<h4 id=\"样例输入-复制\"><a class=\"anchor\" href=\"#样例输入-复制\">#</a> 样例输入 复制</h4>\n<figure class=\"highlight plain\"><figcaption data-lang=\"plain\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>4 10</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>0234500067</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>1034560500</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>2045600671</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>0000000089</pre></td></tr></table></figure><h4 id=\"样例输出-复制\"><a class=\"anchor\" href=\"#样例输出-复制\">#</a> 样例输出 复制</h4>\n<figure class=\"highlight plain\"><figcaption data-lang=\"plain\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>4</pre></td></tr></table></figure><h4 id=\"提示\"><a class=\"anchor\" href=\"#提示\">#</a> 提示</h4>\n<p>0 &lt; m, n &lt;= 400</p>\n</blockquote>\n<h4 id=\"解题思路\"><a class=\"anchor\" href=\"#解题思路\">#</a> 解题思路</h4>\n<p>可以使用 DFS 或 BFS 进行求解。遍历矩阵中的每一个数字，如果为 1~9 中的数字，则进行深度（或广度）优先搜索，将与该数字相邻的数字标记为已访问，并将它们视为同一细胞。搜索结束后，细胞个数加 1，并继续遍历矩阵中的下一个未访问的数字。最终，得到的细胞个数即为所求。</p>\n<h5 id=\"代码\"><a class=\"anchor\" href=\"#代码\">#</a> 代码</h5>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;queue></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string.h></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>using namespace std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> MaxN <span class=\"token operator\">=</span> <span class=\"token number\">400</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">,</span> m<span class=\"token punctuation\">,</span> num<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">int</span> visit<span class=\"token punctuation\">[</span>MaxN<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>MaxN<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 标记细胞</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">int</span> map<span class=\"token punctuation\">[</span>MaxN<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>MaxN<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">int</span> direction<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span>swig￼<span class=\"token number\">0</span><span class=\"token operator\">--</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">Node</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token comment\">/* data */</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token function\">Node</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token function\">x</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">y</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token function\">Node</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> _x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> _y<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token function\">x</span><span class=\"token punctuation\">(</span>_x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">y</span><span class=\"token punctuation\">(</span>_y<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>queue<span class=\"token operator\">&lt;</span>Node<span class=\"token operator\">></span> road<span class=\"token punctuation\">;</span><span class=\"token comment\">// 使用 bfs</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">getnum</span><span class=\"token punctuation\">(</span>Node head<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    visit<span class=\"token punctuation\">[</span>head<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>head<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    road<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>head<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>road<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        Node temp <span class=\"token operator\">=</span> road<span class=\"token punctuation\">.</span><span class=\"token function\">front</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            <span class=\"token keyword\">int</span> curx <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">.</span>x <span class=\"token operator\">+</span> direction<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>            <span class=\"token keyword\">int</span> cury <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">.</span>y <span class=\"token operator\">+</span> direction<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>visit<span class=\"token punctuation\">[</span>curx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>cury<span class=\"token punctuation\">]</span> <span class=\"token operator\">||</span> curx <span class=\"token operator\">>=</span> n <span class=\"token operator\">||</span> cury <span class=\"token operator\">>=</span> m <span class=\"token operator\">||</span> curx <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> cury <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> map<span class=\"token punctuation\">[</span>curx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>cury<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>                <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>            Node <span class=\"token function\">n</span><span class=\"token punctuation\">(</span>curx<span class=\"token punctuation\">,</span> cury<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>            visit<span class=\"token punctuation\">[</span>curx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>cury<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>            road<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        road<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    cin <span class=\"token operator\">>></span> n <span class=\"token operator\">>></span> m<span class=\"token punctuation\">;</span> <span class=\"token comment\">// n=4,m=10</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    num <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    <span class=\"token function\">memset</span><span class=\"token punctuation\">(</span>visit<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>visit<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    <span class=\"token function\">memset</span><span class=\"token punctuation\">(</span>map<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>map<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> k <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> k <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> k<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> m<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>            <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%1d\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>map<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 输入单个数字</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> m<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>map<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> visit<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>                Node <span class=\"token function\">start</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>                <span class=\"token function\">getnum</span><span class=\"token punctuation\">(</span>start<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 每一次标记一群</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>                num<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>                        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> num<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"结语\"><a class=\"anchor\" href=\"#结语\">#</a> 结语</h4>\n<p>注意 curx 指向的是行数应该小于 n，cury 指向的是列数应该小于 m</p>\n",
            "tags": [
                "Notes",
                "C++"
            ]
        },
        {
            "id": "https://evefortosaber.github.io/2023/03/21/ComputerScience/ProgramDesignNotes/BFS/%E9%A9%AC%E7%9A%84%E9%81%8D%E5%8E%86/",
            "url": "https://evefortosaber.github.io/2023/03/21/ComputerScience/ProgramDesignNotes/BFS/%E9%A9%AC%E7%9A%84%E9%81%8D%E5%8E%86/",
            "title": "马的遍历",
            "date_published": "2023-03-20T16:00:00.000Z",
            "content_html": "<p><img data-src=\"https://article.biliimg.com/bfs/article/e4b6256a1096b024071062edc5e109d47012b12b.jpg\" alt=\"绫华\" /></p>\n<h4 id=\"题目描述\"><a class=\"anchor\" href=\"#题目描述\">#</a> 题目描述</h4>\n<blockquote>\n<p>有一个 n*m 的棋盘 (1&lt;n,m&lt;=400)，在某个点上有一个马，要求你计算出马到达棋盘上任意一个点最少要走几步</p>\n<h4 id=\"输入\"><a class=\"anchor\" href=\"#输入\">#</a> 输入</h4>\n<p>一行四个数据，棋盘的大小和马的坐标</p>\n<h4 id=\"输出\"><a class=\"anchor\" href=\"#输出\">#</a> 输出</h4>\n<p>一个 n*m 的矩阵，同一行元素之间用空格分离。代表马到达某个点最少要走几步。不能到达则输出 - 1。</p>\n<h4 id=\"样例输入\"><a class=\"anchor\" href=\"#样例输入\">#</a> 样例输入</h4>\n<figure class=\"highlight plain\"><figcaption data-lang=\"plain\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>3 3 1 1</pre></td></tr></table></figure><h4 id=\"样例输出\"><a class=\"anchor\" href=\"#样例输出\">#</a> 样例输出</h4>\n<figure class=\"highlight plain\"><figcaption data-lang=\"plain\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>0 3 2</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>3 -1 1</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>2 1 4</pre></td></tr></table></figure></blockquote>\n<h4 id=\"解决方案\"><a class=\"anchor\" href=\"#解决方案\">#</a> 解决方案</h4>\n<h5 id=\"代码\"><a class=\"anchor\" href=\"#代码\">#</a> 代码</h5>\n<h5 id=\"一dfs搜索超时\"><a class=\"anchor\" href=\"#一dfs搜索超时\">#</a> 一：DFS 搜索<s>超时</s></h5>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string.h></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>using namespace std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">int</span> direction<span class=\"token punctuation\">[</span><span class=\"token number\">8</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span>swig￼<span class=\"token number\">0</span><span class=\"token operator\">--</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> MaxN <span class=\"token operator\">=</span> <span class=\"token number\">400</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">int</span> step<span class=\"token punctuation\">[</span>MaxN<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>MaxN<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">int</span> visit<span class=\"token punctuation\">[</span>MaxN<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>MaxN<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">int</span> m<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">horse</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token comment\">/* data */</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">int</span> step<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">getstep</span><span class=\"token punctuation\">(</span>horse hor<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>step<span class=\"token punctuation\">[</span>hor<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>hor<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        step<span class=\"token punctuation\">[</span>hor<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>hor<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> hor<span class=\"token punctuation\">.</span>step<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>hor<span class=\"token punctuation\">.</span>step <span class=\"token operator\">!=</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> hor<span class=\"token punctuation\">.</span>step <span class=\"token operator\">&lt;</span> step<span class=\"token punctuation\">[</span>hor<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>hor<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        step<span class=\"token punctuation\">[</span>hor<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>hor<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> hor<span class=\"token punctuation\">.</span>step<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">8</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token keyword\">int</span> curx <span class=\"token operator\">=</span> hor<span class=\"token punctuation\">.</span>x <span class=\"token operator\">+</span> direction<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token keyword\">int</span> cury <span class=\"token operator\">=</span> hor<span class=\"token punctuation\">.</span>y <span class=\"token operator\">+</span> direction<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>curx <span class=\"token operator\">>=</span> m <span class=\"token operator\">||</span> curx <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> cury <span class=\"token operator\">>=</span> n <span class=\"token operator\">||</span> cury <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> visit<span class=\"token punctuation\">[</span>curx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>cury<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        visit<span class=\"token punctuation\">[</span>curx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>cury<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        horse nhor<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        nhor<span class=\"token punctuation\">.</span>step <span class=\"token operator\">=</span> hor<span class=\"token punctuation\">.</span>step <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        nhor<span class=\"token punctuation\">.</span>x <span class=\"token operator\">=</span> curx<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        nhor<span class=\"token punctuation\">.</span>y <span class=\"token operator\">=</span> cury<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token function\">getstep</span><span class=\"token punctuation\">(</span>nhor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        visit<span class=\"token punctuation\">[</span>curx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>cury<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    cin <span class=\"token operator\">>></span> n <span class=\"token operator\">>></span> m<span class=\"token punctuation\">;</span> <span class=\"token comment\">// n rows,m columns</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    horse ma<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token function\">memset</span><span class=\"token punctuation\">(</span>step<span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>step<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token function\">memset</span><span class=\"token punctuation\">(</span>visit<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>visit<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    cin <span class=\"token operator\">>></span> ma<span class=\"token punctuation\">.</span>x <span class=\"token operator\">>></span> ma<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    ma<span class=\"token punctuation\">.</span>step <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    ma<span class=\"token punctuation\">.</span>x<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    ma<span class=\"token punctuation\">.</span>y<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    <span class=\"token function\">getstep</span><span class=\"token punctuation\">(</span>ma<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> m<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>            cout <span class=\"token operator\">&lt;&lt;</span> step<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token char\">' '</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>        cout <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h5 id=\"二bfs搜索\"><a class=\"anchor\" href=\"#二bfs搜索\">#</a> 二：BFS 搜索</h5>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string.h></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;queue></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>using namespace std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">int</span> direction<span class=\"token punctuation\">[</span><span class=\"token number\">8</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span>swig￼<span class=\"token number\">1</span><span class=\"token operator\">--</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 马的走法有 8 种</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> MaxN <span class=\"token operator\">=</span> <span class=\"token number\">400</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">int</span> step<span class=\"token punctuation\">[</span>MaxN<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>MaxN<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 记录马到相应位置的步数</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">int</span> visit<span class=\"token punctuation\">[</span>MaxN<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>MaxN<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 记录是否到过</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">int</span> m<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">horse</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token comment\">/* data */</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">int</span> step<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token function\">horse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token function\">x</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">y</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">step</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token function\">horse</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> _x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> _y<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> _step<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token function\">x</span><span class=\"token punctuation\">(</span>_x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">y</span><span class=\"token punctuation\">(</span>_y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">step</span><span class=\"token punctuation\">(</span>_step<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span> <span class=\"token comment\">// 初始化</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>queue<span class=\"token operator\">&lt;</span>horse<span class=\"token operator\">></span> road<span class=\"token punctuation\">;</span><span class=\"token comment\">// 存储节点</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">getstep</span><span class=\"token punctuation\">(</span>horse hor<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    road<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>hor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 将头节点入队</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>road<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">8</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            horse mhor <span class=\"token operator\">=</span> road<span class=\"token punctuation\">.</span><span class=\"token function\">front</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            <span class=\"token keyword\">int</span> curx <span class=\"token operator\">=</span> mhor<span class=\"token punctuation\">.</span>x <span class=\"token operator\">+</span> direction<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>            <span class=\"token keyword\">int</span> cury <span class=\"token operator\">=</span> mhor<span class=\"token punctuation\">.</span>y <span class=\"token operator\">+</span> direction<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>curx <span class=\"token operator\">>=</span> m <span class=\"token operator\">||</span> curx <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> cury <span class=\"token operator\">>=</span> n <span class=\"token operator\">||</span> cury <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> visit<span class=\"token punctuation\">[</span>curx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>cury<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>                <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>            horse <span class=\"token function\">m1</span><span class=\"token punctuation\">(</span>curx<span class=\"token punctuation\">,</span> cury<span class=\"token punctuation\">,</span> mhor<span class=\"token punctuation\">.</span>step <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"32\"></td><td><pre>            <span class=\"token comment\">// 将新节点入队</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>            road<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>m1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>            <span class=\"token comment\">// 记录</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>            step<span class=\"token punctuation\">[</span>curx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>cury<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> m1<span class=\"token punctuation\">.</span>step<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>            visit<span class=\"token punctuation\">[</span>curx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>cury<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        <span class=\"token comment\">// 马的步数加一</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        hor<span class=\"token punctuation\">.</span>step<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        <span class=\"token comment\">// 走过的节点 pop</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        road<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"44\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    cin <span class=\"token operator\">>></span> n <span class=\"token operator\">>></span> m<span class=\"token punctuation\">;</span> <span class=\"token comment\">// n rows,m columns</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    horse ma<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>    <span class=\"token function\">memset</span><span class=\"token punctuation\">(</span>step<span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>step<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>    <span class=\"token function\">memset</span><span class=\"token punctuation\">(</span>visit<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>visit<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>    cin <span class=\"token operator\">>></span> ma<span class=\"token punctuation\">.</span>x <span class=\"token operator\">>></span> ma<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>    ma<span class=\"token punctuation\">.</span>step <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>    ma<span class=\"token punctuation\">.</span>x<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 采用以（0，0）为原点的坐标～～而不是（1，1）~~</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>    ma<span class=\"token punctuation\">.</span>y<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>    visit<span class=\"token punctuation\">[</span>ma<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>ma<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 初始化</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>    step<span class=\"token punctuation\">[</span>ma<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>ma<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>    <span class=\"token function\">getstep</span><span class=\"token punctuation\">(</span>ma<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> m<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>            cout <span class=\"token operator\">&lt;&lt;</span> step<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token char\">' '</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>        cout <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"结语\"><a class=\"anchor\" href=\"#结语\">#</a> 结语：</h4>\n<p>最短路径适合 BFS 算法，存在性适合 DFS</p>\n<h4 id=\"参考资料\"><a class=\"anchor\" href=\"#参考资料\">#</a> 参考资料</h4>\n<blockquote>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">bfs</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token comment\">// 模板</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t <span class=\"token comment\">// 初始化，初始状态存数组；</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t <span class=\"token keyword\">int</span> head<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>tail<span class=\"token operator\">=</span><span class=\"token number\">1</span>，que<span class=\"token punctuation\">[</span>max_size<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 构建队列</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t <span class=\"token comment\">// 标记初始点 </span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>head<span class=\"token operator\">&lt;</span>tail<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t \thead<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 指向待扩展结点</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>maxi<span class=\"token punctuation\">;</span><span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>满足条件<span class=\"token operator\">||</span>不重复<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\t\t\ttail<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\t\t\t将新节点存入队列</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span>\t</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><span class=\"exturl\" data-url=\"aHR0cDovL3QuY3Nkbi5jbi9HY3ZqbQ==\">马的遍历 --BFS</span></p>\n</blockquote>\n",
            "tags": [
                "Notes",
                "C++"
            ]
        },
        {
            "id": "https://evefortosaber.github.io/2023/03/20/ComputerScience/ProgramDesignNotes/DFS/FindwayToKFC/",
            "url": "https://evefortosaber.github.io/2023/03/20/ComputerScience/ProgramDesignNotes/DFS/FindwayToKFC/",
            "title": "FindwayToKFC",
            "date_published": "2023-03-19T16:00:00.000Z",
            "content_html": "<p><img data-src=\"https://raw.githubusercontent.com/EveFortosaber/Open-pictures/main/picgo/KFC.jpg\" alt=\"KFC\" /></p>\n<h4 id=\"题目描述\"><a class=\"anchor\" href=\"#题目描述\">#</a> 题目描述</h4>\n<blockquote>\n<p>Pass a year learning in Hangzhou, yifenfei arrival hometown Ningbo at finally. Leave Ningbo one year, yifenfei have many people to meet. Especially a good friend Merceki.<br />\nYifenfei’s home is at the countryside, but Merceki’s home is in the center of city. So yifenfei made arrangements with Merceki to meet at a KFC. There are many KFC in Ningbo, they want to choose one that let the total time to it be most smallest.<br />\nNow give you a Ningbo map, Both yifenfei and Merceki can move up, down ,left, right to the adjacent road by cost 11 minutes.</p>\n</blockquote>\n<h4 id=\"输入\"><a class=\"anchor\" href=\"#输入\">#</a> 输入</h4>\n<blockquote>\n<p>The input contains multiple test cases.<br />\nEach test case include, first two integers n, m. (2&lt;=n,m&lt;=200).<br />\nNext n lines, each line included m character.<br />\n‘Y’ express yifenfei initial position.<br />\n‘M’   express Merceki initial position.<br />\n‘#’ forbid road;<br />\n‘.’ Road.<br />\n‘@’ KCF</p>\n</blockquote>\n<h5 id=\"输出\"><a class=\"anchor\" href=\"#输出\">#</a> 输出</h5>\n<blockquote>\n<p>For each test case output the minimum total time that both yifenfei and Merceki to arrival one of KFC.You may sure there is always have a KFC that can let them meet.</p>\n</blockquote>\n<h5 id=\"样例输入\"><a class=\"anchor\" href=\"#样例输入\">#</a> 样例输入</h5>\n<figure class=\"highlight plain\"><figcaption data-lang=\"plain\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>4 4</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>Y.#@</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>....</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>.#..</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>@..M</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>4 4</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>Y.#@</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>....</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>.#..</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>@#.M</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>5 5</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>Y..@.</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>.#...</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>.#...</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>@..M.</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>#...#</pre></td></tr></table></figure><h5 id=\"样例输出\"><a class=\"anchor\" href=\"#样例输出\">#</a> 样例输出</h5>\n<figure class=\"highlight plain\"><figcaption data-lang=\"plain\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>66</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>88</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>66</pre></td></tr></table></figure><h4 id=\"解决思路\"><a class=\"anchor\" href=\"#解决思路\">#</a> 解决思路：</h4>\n<p>DFS 算法全部扫描。</p>\n<h5 id=\"代码如下\"><a class=\"anchor\" href=\"#代码如下\">#</a> 代码如下</h5>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string.h></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;vector></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>using namespace std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> MaxN <span class=\"token operator\">=</span> <span class=\"token number\">200</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// vector&lt;vector&lt;char> > map(MaxN, vector&lt;char>(MaxN));</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">char</span> map<span class=\"token punctuation\">[</span>MaxN<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>MaxN<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">int</span> visit<span class=\"token punctuation\">[</span>MaxN<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>MaxN<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">,</span> m<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">int</span> direction<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span>swig￼<span class=\"token number\">0</span><span class=\"token operator\">--</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">people</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token comment\">/* data */</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">int</span> step<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token function\">people</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> _x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> _y<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> _step<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token function\">x</span><span class=\"token punctuation\">(</span>_x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>                                        <span class=\"token function\">y</span><span class=\"token punctuation\">(</span>_y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>                                        <span class=\"token function\">step</span><span class=\"token punctuation\">(</span>_step<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token function\">people</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token function\">x</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>               <span class=\"token function\">y</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>               <span class=\"token function\">step</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token comment\">//a 走过的路程，b 走过的路程，两人到达同一餐馆的最短距离</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> suma_step<span class=\"token punctuation\">,</span> sumb_step<span class=\"token punctuation\">,</span> ans<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>people a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token comment\">// 找出 a 到达各个餐馆的最短步数</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token comment\">/* 解释一下</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>这里由于习惯了 DFS 没有多想直接使用了 DFS</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>后来想到限制条件，故在 DFS 的基础上</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>我通过找出每条可达的路线，并记录相应步数</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>再找出抵达目的地的最小步数</pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>*/</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre></pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">findawayofa</span><span class=\"token punctuation\">(</span>people man<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> y<span class=\"token punctuation\">)</span><span class=\"token comment\">// 没有多想直接构建了两个函数</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>man<span class=\"token punctuation\">.</span>x <span class=\"token operator\">==</span> x <span class=\"token operator\">&amp;&amp;</span> man<span class=\"token punctuation\">.</span>y <span class=\"token operator\">==</span> y<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        suma_step<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>man<span class=\"token punctuation\">.</span>step<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>        <span class=\"token keyword\">int</span> curx <span class=\"token operator\">=</span> man<span class=\"token punctuation\">.</span>x <span class=\"token operator\">+</span> direction<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>        <span class=\"token keyword\">int</span> cury <span class=\"token operator\">=</span> man<span class=\"token punctuation\">.</span>y <span class=\"token operator\">+</span> direction<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>curx <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> cury <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> visit<span class=\"token punctuation\">[</span>curx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>cury<span class=\"token punctuation\">]</span> <span class=\"token operator\">||</span> curx <span class=\"token operator\">>=</span> m <span class=\"token operator\">||</span> cury <span class=\"token operator\">>=</span> n <span class=\"token operator\">||</span> map<span class=\"token punctuation\">[</span>curx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>cury<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token char\">'#'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>            <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>        visit<span class=\"token punctuation\">[</span>curx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>cury<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>        <span class=\"token comment\">// 下一节点</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>        people <span class=\"token function\">nman</span><span class=\"token punctuation\">(</span>curx<span class=\"token punctuation\">,</span> cury<span class=\"token punctuation\">,</span> man<span class=\"token punctuation\">.</span>step <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>        <span class=\"token function\">findawayofa</span><span class=\"token punctuation\">(</span>nman<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>        visit<span class=\"token punctuation\">[</span>curx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>cury<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">findawayofb</span><span class=\"token punctuation\">(</span>people man<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> y<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>man<span class=\"token punctuation\">.</span>x <span class=\"token operator\">==</span> x <span class=\"token operator\">&amp;&amp;</span> man<span class=\"token punctuation\">.</span>y <span class=\"token operator\">==</span> y<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>        sumb_step<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>man<span class=\"token punctuation\">.</span>step<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>        <span class=\"token keyword\">int</span> curx <span class=\"token operator\">=</span> man<span class=\"token punctuation\">.</span>x <span class=\"token operator\">+</span> direction<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>        <span class=\"token keyword\">int</span> cury <span class=\"token operator\">=</span> man<span class=\"token punctuation\">.</span>y <span class=\"token operator\">+</span> direction<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>curx <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> cury <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> visit<span class=\"token punctuation\">[</span>curx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>cury<span class=\"token punctuation\">]</span> <span class=\"token operator\">||</span> curx <span class=\"token operator\">>=</span> m <span class=\"token operator\">||</span> cury <span class=\"token operator\">>=</span> n <span class=\"token operator\">||</span> map<span class=\"token punctuation\">[</span>curx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>cury<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token char\">'#'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>            <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>        visit<span class=\"token punctuation\">[</span>curx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>cury<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>        people <span class=\"token function\">nman</span><span class=\"token punctuation\">(</span>curx<span class=\"token punctuation\">,</span> cury<span class=\"token punctuation\">,</span> man<span class=\"token punctuation\">.</span>step <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>        <span class=\"token function\">findawayofb</span><span class=\"token punctuation\">(</span>nman<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>        visit<span class=\"token punctuation\">[</span>curx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>cury<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre></pre></td></tr><tr><td data-num=\"78\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">destination</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>    <span class=\"token comment\">/* data */</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>    <span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>    <span class=\"token function\">destination</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> _x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> _y<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token function\">x</span><span class=\"token punctuation\">(</span>_x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>                                  <span class=\"token function\">y</span><span class=\"token punctuation\">(</span>_y<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>vector<span class=\"token operator\">&lt;</span>destination<span class=\"token operator\">></span> des<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre><span class=\"token comment\">// 考虑到每次可能有多条路径</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre><span class=\"token comment\">// 我将每地的最少步数，按照前一个是 A 的，后一个是 B 的，</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre><span class=\"token comment\">// 两两一组存入 ans</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">findmin</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span>s<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>    <span class=\"token keyword\">int</span> size <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>    <span class=\"token keyword\">int</span> temp <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">front</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> size<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>temp <span class=\"token operator\">></span> s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre>            temp <span class=\"token operator\">=</span> s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>    ans<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>temp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> size<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>        s<span class=\"token punctuation\">.</span><span class=\"token function\">pop_back</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre>    <span class=\"token comment\">// 两人初始位置</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre>    <span class=\"token keyword\">int</span> a_start_x<span class=\"token punctuation\">,</span> a_start_y<span class=\"token punctuation\">,</span> b_start_x<span class=\"token punctuation\">,</span> b_start_y<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>cin <span class=\"token operator\">>></span> n <span class=\"token operator\">>></span> m<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre>        <span class=\"token function\">memset</span><span class=\"token punctuation\">(</span>visit<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>visit<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"107\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"108\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre>            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> m<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"110\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"111\"></td><td><pre>                cin <span class=\"token operator\">>></span> map<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"112\"></td><td><pre>                <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>map<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"113\"></td><td><pre>                <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"114\"></td><td><pre>                <span class=\"token keyword\">case</span> <span class=\"token char\">'Y'</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"115\"></td><td><pre>                    a_start_x <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"116\"></td><td><pre>                    a_start_y <span class=\"token operator\">=</span> j<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"117\"></td><td><pre>                    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"118\"></td><td><pre></pre></td></tr><tr><td data-num=\"119\"></td><td><pre>                <span class=\"token keyword\">case</span> <span class=\"token char\">'M'</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"120\"></td><td><pre>                    b_start_x <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"121\"></td><td><pre>                    b_start_y <span class=\"token operator\">=</span> j<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"122\"></td><td><pre>                    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"123\"></td><td><pre>                <span class=\"token keyword\">case</span> <span class=\"token char\">'@'</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"124\"></td><td><pre>                        <span class=\"token comment\">// 记录餐馆位置</span></pre></td></tr><tr><td data-num=\"125\"></td><td><pre>                    destination <span class=\"token function\">d</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"126\"></td><td><pre>                    des<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"127\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"128\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"129\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"130\"></td><td><pre>        people <span class=\"token function\">a</span><span class=\"token punctuation\">(</span>a_start_x<span class=\"token punctuation\">,</span> a_start_y<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">b</span><span class=\"token punctuation\">(</span>b_start_x<span class=\"token punctuation\">,</span> b_start_y<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"131\"></td><td><pre>        <span class=\"token comment\">// 餐馆个数</span></pre></td></tr><tr><td data-num=\"132\"></td><td><pre>        <span class=\"token keyword\">int</span> des_size <span class=\"token operator\">=</span> des<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"133\"></td><td><pre>        <span class=\"token comment\">// 测试（可忽略 //cout&lt;&lt;des [0].x&lt;&lt;' '&lt;&lt;des [0].y&lt;&lt;endl;</span></pre></td></tr><tr><td data-num=\"134\"></td><td><pre></pre></td></tr><tr><td data-num=\"135\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> k <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> k <span class=\"token operator\">&lt;</span> des_size<span class=\"token punctuation\">;</span> k<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"136\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"137\"></td><td><pre>            <span class=\"token function\">findawayofa</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> des<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">,</span> des<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"138\"></td><td><pre>            <span class=\"token function\">findmin</span><span class=\"token punctuation\">(</span>suma_step<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"139\"></td><td><pre>            </pre></td></tr><tr><td data-num=\"140\"></td><td><pre>            <span class=\"token function\">findawayofb</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">,</span> des<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">,</span> des<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"141\"></td><td><pre>            <span class=\"token function\">findmin</span><span class=\"token punctuation\">(</span>sumb_step<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"142\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"143\"></td><td><pre></pre></td></tr><tr><td data-num=\"144\"></td><td><pre>        <span class=\"token keyword\">int</span> mi <span class=\"token operator\">=</span> ans<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> ans<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"145\"></td><td><pre>        <span class=\"token keyword\">int</span> size <span class=\"token operator\">=</span> ans<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"146\"></td><td><pre>\t\t<span class=\"token comment\">// 对 ans 中的数据两两一对处理</span></pre></td></tr><tr><td data-num=\"147\"></td><td><pre>        <span class=\"token comment\">// ans=[A,B,A,B,A,B,...]</span></pre></td></tr><tr><td data-num=\"148\"></td><td><pre>        <span class=\"token comment\">//       1   2   3 ... 第 i 组</span></pre></td></tr><tr><td data-num=\"149\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> size<span class=\"token punctuation\">;</span> j <span class=\"token operator\">+=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"150\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"151\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>mi <span class=\"token operator\">></span> ans<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> ans<span class=\"token punctuation\">[</span>j <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"152\"></td><td><pre>                mi <span class=\"token operator\">=</span> ans<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> ans<span class=\"token punctuation\">[</span>j <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"153\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"154\"></td><td><pre></pre></td></tr><tr><td data-num=\"155\"></td><td><pre>        <span class=\"token comment\">// for (int i = 0; i &lt; a_size; i++)</span></pre></td></tr><tr><td data-num=\"156\"></td><td><pre>        <span class=\"token comment\">// &#123;</span></pre></td></tr><tr><td data-num=\"157\"></td><td><pre>        <span class=\"token comment\">//     int total = suma_step[i] + sumb_step[i];</span></pre></td></tr><tr><td data-num=\"158\"></td><td><pre>        <span class=\"token comment\">//     if (total &lt; mi)</span></pre></td></tr><tr><td data-num=\"159\"></td><td><pre>        <span class=\"token comment\">//         mi = total;</span></pre></td></tr><tr><td data-num=\"160\"></td><td><pre>        <span class=\"token comment\">// &#125;</span></pre></td></tr><tr><td data-num=\"161\"></td><td><pre>        cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">11</span> <span class=\"token operator\">*</span> mi <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"162\"></td><td><pre>        <span class=\"token comment\">// while (a_size--)</span></pre></td></tr><tr><td data-num=\"163\"></td><td><pre>        <span class=\"token comment\">//     suma_step.pop_back();</span></pre></td></tr><tr><td data-num=\"164\"></td><td><pre>        <span class=\"token comment\">// while (b_size--)</span></pre></td></tr><tr><td data-num=\"165\"></td><td><pre>        <span class=\"token comment\">//     sumb_step.pop_back();</span></pre></td></tr><tr><td data-num=\"166\"></td><td><pre>        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>size<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"167\"></td><td><pre>            ans<span class=\"token punctuation\">.</span><span class=\"token function\">pop_back</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"168\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"169\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"结语\"><a class=\"anchor\" href=\"#结语\">#</a> 结语</h4>\n<p>由于最开始，在求两人到达 kfc 最短时间时，忽略了要到达同一餐馆，导致错误。</p>\n<p>出于懒惰，没有重新写过。期间，遇到如下问题：</p>\n<ol>\n<li>如何求得最短路径\n<ol>\n<li>人到餐馆有多条路径</li>\n<li>人与餐馆的相对位置非确定</li>\n</ol>\n</li>\n<li>如何求得两人到达同一餐馆的最短时间</li>\n</ol>\n<p><s>于是就出现了许多被注释删除的代码</s></p>\n<p>此外，这篇代码的局限性高，也没能模板化 -&gt; <s>可读性低</s></p>\n<p>后续继续努力吧✊。</p>\n<h4 id=\"参考资料\"><a class=\"anchor\" href=\"#参考资料\">#</a> 参考资料</h4>\n<blockquote>\n<p><span class=\"exturl\" data-url=\"aHR0cDovL3QuY3Nkbi5jbi9oMXFMYg==\">vector 二维数组</span></p>\n</blockquote>\n",
            "tags": [
                "Notes",
                "C++",
                "DFS"
            ]
        },
        {
            "id": "https://evefortosaber.github.io/2023/03/19/Mathematics/%E9%94%99%E9%A2%98%E6%9C%AC/",
            "url": "https://evefortosaber.github.io/2023/03/19/Mathematics/%E9%94%99%E9%A2%98%E6%9C%AC/",
            "title": "错题本",
            "date_published": "2023-03-19T11:29:17.421Z",
            "content_html": "<h1 id=\"数学错题\"><a class=\"anchor\" href=\"#数学错题\">#</a> 数学错题</h1>\n<h2 id=\"高数\"><a class=\"anchor\" href=\"#高数\">#</a> 高数</h2>\n<p><img data-src=\"https://raw.githubusercontent.com/EveFortosaber/Open-pictures/main/00_5-1663714277821.png\" alt=\"5\" /></p>\n<p><img data-src=\"https://raw.githubusercontent.com/EveFortosaber/Open-pictures/main/00_6-1663714314009.png\" alt=\"6\" /></p>\n<p><img data-src=\"https://raw.githubusercontent.com/EveFortosaber/Open-pictures/main/00_7-1663714323364.png\" alt=\"7\" /></p>\n<p><img data-src=\"https://raw.githubusercontent.com/EveFortosaber/Open-pictures/main/00_8-1663714341842.png\" alt=\"8\" /></p>\n<p><img data-src=\"https://raw.githubusercontent.com/EveFortosaber/Open-pictures/main/01_9-1663714386623.png\" alt=\"9\" /></p>\n<p><img data-src=\"https://raw.githubusercontent.com/EveFortosaber/Open-pictures/main/01_10-1663714362855.png\" alt=\"10\" /></p>\n",
            "tags": [
                "Notes"
            ]
        },
        {
            "id": "https://evefortosaber.github.io/2023/03/19/Mathematics/%E6%95%B0%E5%AD%A6%E7%AC%94%E8%AE%B0%E4%B8%80/",
            "url": "https://evefortosaber.github.io/2023/03/19/Mathematics/%E6%95%B0%E5%AD%A6%E7%AC%94%E8%AE%B0%E4%B8%80/",
            "title": "高等数学笔记一",
            "date_published": "2023-03-19T11:29:17.406Z",
            "content_html": "<h1 id=\"高等数学一\"><a class=\"anchor\" href=\"#高等数学一\">#</a> 高等数学・一</h1>\n<hr />\n<p>学习时做的一些笔记，顺便对内容梳理一遍。^0</p>\n<hr />\n<h2 id=\"第一章-函数与极限\"><a class=\"anchor\" href=\"#第一章-函数与极限\">#</a> 第一章 函数与极限</h2>\n<hr />\n<h3 id=\"第一节-映射与函数\"><a class=\"anchor\" href=\"#第一节-映射与函数\">#</a> 第一节 映射与函数</h3>\n<ul>\n<li>\n<p><strong>映射</strong></p>\n<blockquote>\n<p>与 x 所对应的 y 称为 x 在映射 f 下的象。<br />\nx 称为 y 在 f 下的原象。</p>\n</blockquote>\n<blockquote>\n<p><strong>满射、一一映射、单射、双射</strong></p>\n<p>A 映射得到的 B 集合等于映射的目标集合则是满射。</p>\n<p>对每个 y 都有唯一一个 x 对应，则是<strong>单射</strong>或称<strong>一一映射</strong>。</p>\n<p>若 f 既是满射又是单射则称为<strong>双射</strong>。</p>\n</blockquote>\n</li>\n<li>\n<p><strong>函数定义与表示方法</strong></p>\n<ul>\n<li>\n<p>特殊函数</p>\n<ul>\n<li>\n<p>狄利克雷函数</p>\n<blockquote>\n<p><img data-src=\"https://raw.githubusercontent.com/EveFortosaber/Open-pictures/main/00_2.png\" alt=\"00_2\" title=\"狄利克雷函数\" /></p>\n<p>狄利克雷函数是一个定义在实数范围上、值域不连续的函数。狄利克雷函数的图像以 Y 轴为对称轴，是一个偶函数，它处处不连续，处处极限不存在，不可黎曼积分。这是一个处处不连续的可测函数。</p>\n</blockquote>\n</li>\n<li>\n<p>符号函数</p>\n<blockquote>\n<p><img data-src=\"https://raw.githubusercontent.com/EveFortosaber/Open-pictures/main/00_3-1663132097343.png\" alt=\"00_3\" title=\"符号函数\" /></p>\n</blockquote>\n</li>\n<li>\n<p>取整函数</p>\n<blockquote>\n<p><img data-src=\"raw.githubusercontent.com/EveFortosaber/Open-pictures/main/image-20220914131129520.png\" alt=\"image-20220914131129520\" /></p>\n<p>函数 y=[x] 称为取整函数，也称<span class=\"exturl\" data-url=\"aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS8lRTklQUIlOTglRTYlOTYlQUYlRTUlODclQkQlRTYlOTUlQjAvMjY3MDk1MT9mcm9tTW9kdWxlPWxlbW1hX2lubGluaw==\">高斯函数</span>。其中不超过实数 x 的最大整数称为 x 的整数部分，记作 [x]。该函数被广泛应用于<span class=\"exturl\" data-url=\"aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS8lRTYlOTUlQjAlRTglQUUlQkEvMzcwMD9mcm9tTW9kdWxlPWxlbW1hX2lubGluaw==\">数论</span>，函数绘图和计算机领域。</p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li>\n<p>函数的有界性</p>\n<blockquote>\n<p>函数 f (x) 在 D 上有界的充要条件是 f (x) 在 D 上既有上界又有下界。</p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li>\n<p><strong>函数的单调性</strong></p>\n<ul>\n<li>单调增 (减) 函数</li>\n<li>严格单调增 (减) 函数</li>\n</ul>\n</li>\n<li>\n<p><strong>函数的四则运算</strong></p>\n</li>\n<li>\n<p><strong>复合函数</strong></p>\n<blockquote>\n<p>形如： <strong>f(g(u(x)))</strong> 或 <strong>f</strong> o <strong>g</strong> o <strong>u</strong></p>\n</blockquote>\n</li>\n<li>\n<p><strong>反函数</strong></p>\n<blockquote>\n<p>反函数的单调性基本归纳于 <strong>先外后内，同增异减</strong>。</p>\n</blockquote>\n</li>\n<li>\n<p><strong>初等函数</strong></p>\n<blockquote>\n<p>初等函数是由<strong>幂函数（power function）、指数函数（exponential function）、对数函数（logarithmic function）、三角函数（trigonometric function）、反三角函数（inverse trigonometric function</strong> 与常数经过有限次的有理运算（加、减、乘、除、有理数次乘方、有理数次开方）及有限次函数复合所产生，并且能用一个解析式表示的函数。</p>\n</blockquote>\n</li>\n</ul>\n<hr />\n<h3 id=\"第二节-数列的极限\"><a class=\"anchor\" href=\"#第二节-数列的极限\">#</a> 第二节 数列的极限</h3>\n<ul>\n<li>\n<p><strong>邻域</strong></p>\n<ul>\n<li>邻域</li>\n<li>去心邻域</li>\n<li>左 (右) 邻域</li>\n</ul>\n</li>\n<li>\n<p><strong>数列基本概念</strong></p>\n<ul>\n<li>\n<p>有限 or 无限</p>\n</li>\n<li>\n<p>通项公式</p>\n</li>\n<li>\n<p>整标函数</p>\n</li>\n<li>\n<p>子数列</p>\n</li>\n<li>\n<p>单调性</p>\n<blockquote>\n<p>作差或作商求单调性。有时候利用数列的单调性可能会得到惊喜的解题方式。</p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS8lRTYlOTUlQjAlRTUlODglOTclRTYlOUUlODElRTklOTklOTA/ZnJvbU1vZHVsZT1sZW1tYV9zZWFyY2gtYm94\">数列极限</span></p>\n</li>\n<li>\n<p><strong>收敛数列与数列的有界性</strong></p>\n<blockquote>\n<p><strong>tip：数列收敛一定有界，数列有界不一定收敛</strong></p>\n</blockquote>\n<ul>\n<li>极限唯一性 &amp; 有界性 &amp; 保号性</li>\n</ul>\n</li>\n<li>\n<p>极限四则运算法则（严格意义上要分别证明数列的与函数的）</p>\n</li>\n</ul>\n<hr />\n<h3 id=\"第三节-函数的极限\"><a class=\"anchor\" href=\"#第三节-函数的极限\">#</a> 第三节 函数的极限</h3>\n<ul>\n<li>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS8lRTUlODclQkQlRTYlOTUlQjAlRTYlOUUlODElRTklOTklOTAvNzI3MDgz\">函数极限</span><img data-src=\"https://raw.githubusercontent.com/EveFortosaber/Open-pictures/main/00_1.png\" alt=\"00_1\" /></p>\n<blockquote>\n<p>函数某点极限存在的充要条件是左右极限都存在且相等。</p>\n</blockquote>\n</li>\n<li>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS8lRTYlQjUlQjclRTYlQjYlODUlRTUlQUUlOUElRTclOTAlODY/ZnJvbU1vZHVsZT1sZW1tYV9zZWFyY2gtYm94\">海涅 (Heine) 定理</span></p>\n</li>\n<li>\n<p>求函数极限</p>\n<ul>\n<li>简单的有限次函数，如果最高次项系数相等比较最高次项系数，如果不等，次数高的为高阶无穷大量。</li>\n<li>妙用，分子有理化，分母有理化。</li>\n<li>通分消去。</li>\n<li>立方差、因式分解。</li>\n<li>裂项等将无穷项收缩的方法。</li>\n<li>......</li>\n</ul>\n</li>\n<li>\n<p>复合函数极限</p>\n</li>\n</ul>\n<hr />\n<h3 id=\"第四节-函数的连续性\"><a class=\"anchor\" href=\"#第四节-函数的连续性\">#</a> 第四节 函数的连续性</h3>\n<ul>\n<li>\n<p>连续性概念</p>\n<blockquote>\n<p>由极限的性质可知，一个函数在某点连续的充要条件是它在该点左右都连续。</p>\n</blockquote>\n</li>\n<li>\n<p>间断点分类</p>\n</li>\n</ul>\n",
            "tags": [
                "Notes"
            ]
        },
        {
            "id": "https://evefortosaber.github.io/2023/03/19/Mathematics/%E6%95%B0%E5%AD%A6%E7%AC%94%E8%AE%B0%E4%BA%8C/",
            "url": "https://evefortosaber.github.io/2023/03/19/Mathematics/%E6%95%B0%E5%AD%A6%E7%AC%94%E8%AE%B0%E4%BA%8C/",
            "title": "数学笔记二",
            "date_published": "2023-03-19T11:29:17.406Z",
            "content_html": "<h1 id=\"数学笔记二\"><a class=\"anchor\" href=\"#数学笔记二\">#</a> 数学笔记・二</h1>\n<h3 id=\"第四节-函数的连续性承第一章函数与极限\"><a class=\"anchor\" href=\"#第四节-函数的连续性承第一章函数与极限\">#</a> 第四节 函数的连续性（承第一章函数与极限）</h3>\n<ul>\n<li>\n<p>连续性概念</p>\n<blockquote>\n<p>由极限的性质可知，一个函数在某点连续的充要条件是它在该点左右都连续。</p>\n</blockquote>\n</li>\n<li>\n<p>间断点分类</p>\n<ul>\n<li>\n<p><strong>第一类间断点</strong></p>\n<blockquote>\n<p><strong><span class=\"exturl\" data-url=\"aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS8lRTUlOEYlQUYlRTUlOEUlQkIlRTklOTclQjQlRTYlOTYlQUQlRTclODIlQjk/ZnJvbU1vZHVsZT1sZW1tYV9pbmxpbms=\">可去间断点</span></strong>：函数在该点左极限、右极限存在且相等，但不等于该点函数值或函数在该点无定义。如函数 y=（x^2-1)/(x-1) 在点 x=1 处。</p>\n<p><strong><span class=\"exturl\" data-url=\"aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS8lRTglQjclQjMlRTglQjclODMlRTklOTclQjQlRTYlOTYlQUQlRTclODIlQjk/ZnJvbU1vZHVsZT1sZW1tYV9pbmxpbms=\">跳跃间断点</span></strong>：函数在该点左极限、右极限存在，但不相等。如函数 y=|x|/x 在点 x=0 处。</p>\n</blockquote>\n</li>\n<li>\n<p><strong>第二类间断点</strong></p>\n<blockquote>\n<p><a href=\"https://baike.baidu.com/item/%E6%97%A0%E7%A9%B7%E9%97%B4%E6%96%AD%E7%82%B9/3531630?fromModule=lemma_inlink\"><strong>无穷间断点</strong></a>：函数在该点可以无定义，且左极限、右极限至少有一个不存在，且函数在该点极限为∞。如函数 y=tanx 在点 x=π/2 处。</p>\n<p><strong><span class=\"exturl\" data-url=\"aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS8lRTYlOEMlQUYlRTglOEQlQTElRTklOTclQjQlRTYlOTYlQUQlRTclODIlQjk/ZnJvbU1vZHVsZT1sZW1tYV9pbmxpbms=\">振荡间断点</span></strong>：函数在该点可以无定义，当自变量趋于该点时，函数值在两个常数间变动无限多次。如函数 y=sin (1/x) 在 x=0 处。</p>\n</blockquote>\n</li>\n<li>\n<p>由上述对各种间断点的描述可知，<strong>函数 f (x) 在第一类间断点的左右极限都存在，而函数 f (x) 在第二类间断点的左右极限至少有一个不存在</strong>，这也是第一类间断点和第二类间断点的本质上的区别。</p>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"第五节\"><a class=\"anchor\" href=\"#第五节\">#</a> 第五节</h3>\n<ul>\n<li>\n<p>迫敛准则</p>\n<p>主要是放缩，抓住可合成量（如 N 个 1 求和为 n*(n+1)/2），和高阶量不变原则</p>\n</li>\n<li>\n<p><strong>单调有界准则</strong></p>\n<p>单调有界数列必有极限。用于证明收敛很有用。</p>\n<p>求极限时可以<strong>先假设存在</strong>。方便计算。<s>（避免求数列通项）</s></p>\n</li>\n<li>\n<p><strong>两个重要极限</strong></p>\n<p><img data-src=\"https://raw.githubusercontent.com/EveFortosaber/Open-pictures/main/image-20220921223539147.png\" alt=\"image-20220921223539147\" /></p>\n<blockquote>\n<p>第二个很重要，第一个可以直接看成等价无穷小。</p>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"第六节\"><a class=\"anchor\" href=\"#第六节\">#</a> 第六节</h3>\n<ul>\n<li>\n<p><strong>无穷小量</strong></p>\n<blockquote>\n<p>确切地说，当自变量 x 无限接近 x&lt;sub&gt;0&lt;/sub&gt;（或 x 的绝对值无限增大）时，函数值 f (x) 与 0 无限接近，即 f (x)→0 (或 f (x)=0)，则称 f (x) 为当 x→x&lt;sub&gt;0&lt;/sub&gt;(或 x→∞) 时的无穷小量。</p>\n</blockquote>\n</li>\n<li>\n<p><strong>等阶无穷小量</strong></p>\n<p>即两个无穷小量坐商得常数时。</p>\n</li>\n<li>\n<p><strong>等价无穷小量</strong></p>\n<p>即两个无穷小量坐商得 1。等价无穷小量可互换。</p>\n</li>\n<li>\n<p><strong>常见等价无穷小量</strong></p>\n<p><img data-src=\"https://pica.zhimg.com/v2-f20a929bed77e97c61a9f83de9b4b5a4_r.jpg?source=1940ef5c\" alt=\"aa\" title=\"等价无穷小\" /></p>\n</li>\n</ul>\n<hr />\n<p><em>关于我突然变水的原因</em>：</p>\n<p>实在是比较忙，各项内容也越来越复杂，所以就择取主要的知识点并舍去证明。</p>\n<p><em>以上。</em></p>\n<h2 id=\"第二章\"><a class=\"anchor\" href=\"#第二章\">#</a> 第二章</h2>\n<h3 id=\"导数\"><a class=\"anchor\" href=\"#导数\">#</a> 导数</h3>\n<ul>\n<li>\n<p>导数定义</p>\n<blockquote>\n<p>函数可导一定连续，函数连续不一定可导。</p>\n</blockquote>\n</li>\n<li>\n<p>求导法则</p>\n<p>注意除法，反函数，隐函数求导法则。</p>\n<blockquote>\n<p>掌握反代的思想，掌握对数求导法。</p>\n</blockquote>\n</li>\n<li>\n<p>含参求导</p>\n<p>一阶导可直接求二阶导可能需要反代。</p>\n</li>\n</ul>\n<blockquote>\n<p>注意导数与微分的关系，如何二阶导隐函数。以及推导方法。</p>\n</blockquote>\n<ul>\n<li>\n<p>断点处的导数求解，在有定义时使用求导法。</p>\n<p>在无定义时，使用定义法。(求极限)</p>\n</li>\n<li>\n<p>高阶函数求导注意规律，和复合函数的导</p>\n</li>\n</ul>\n<h3 id=\"微分\"><a class=\"anchor\" href=\"#微分\">#</a> 微分</h3>\n<ul>\n<li>\n<p>一元函数，可导则可微</p>\n</li>\n<li>\n<p>微分常数 A，与极限有关</p>\n</li>\n<li>\n<p>微分运算类似求导法则</p>\n</li>\n<li>\n<p>微分近似运算</p>\n<p>f(x)=f(x0)+f'(x0)(x-x0)</p>\n<blockquote>\n<p>为了计算 f (x)，可找一个邻近于 x 的 x0，只要 f (x) 和 f'(x) 容易计算，就可以利用这个公式计算 f (x) 的近似值。</p>\n</blockquote>\n</li>\n</ul>\n<p><img data-src=\"https://raw.githubusercontent.com/EveFortosaber/Open-pictures/main/%E5%BE%AE%E5%88%86%E8%BF%91%E4%BC%BC%E8%AE%A1%E7%AE%97.jpg\" alt=\"微分\" /></p>\n<h2 id=\"第三章\"><a class=\"anchor\" href=\"#第三章\">#</a> 第三章</h2>\n<h3 id=\"微分中值定理\"><a class=\"anchor\" href=\"#微分中值定理\">#</a> 微分中值定理</h3>\n<ul>\n<li>\n<p>费马引理</p>\n<p><img data-src=\"https://raw.githubusercontent.com/EveFortosaber/Open-pictures/main/%E8%B4%B9%E9%A9%AC%E5%BC%95%E7%90%86.jpg\" alt=\"费马引理\" /></p>\n</li>\n<li>\n<p>罗尔中值定理</p>\n<p><img data-src=\"https://raw.githubusercontent.com/EveFortosaber/Open-pictures/main/%E7%BD%97%E5%B0%94%E4%B8%AD%E5%80%BC%E5%AE%9A%E7%90%86.jpg\" alt=\"罗尔中值定理\" /></p>\n</li>\n<li>\n<p>拉格朗日中值定理</p>\n<p><img data-src=\"https://raw.githubusercontent.com/EveFortosaber/Open-pictures/main/%E6%8B%89%E6%A0%BC%E6%9C%97%E6%97%A5%E4%B8%AD%E5%80%BC%E5%AE%9A%E7%90%86.jpg\" alt=\"拉格朗日中值定理\" /></p>\n</li>\n<li>\n<p>柯西中值定理</p>\n<p><img data-src=\"https://raw.githubusercontent.com/EveFortosaber/Open-pictures/main/%E6%9F%AF%E8%A5%BF%E4%B8%AD%E5%80%BC%E5%AE%9A%E7%90%86.jpg\" alt=\"柯西中值定理\" /></p>\n</li>\n</ul>\n<p>洛必达法则</p>\n<p>泰勒公式</p>\n<p>麦克劳林公式</p>\n<ul>\n<li>\n<p>佩亚诺余项</p>\n<p>高阶无穷小</p>\n</li>\n<li>\n<p>拉格朗日余项</p>\n<p>中值 -- 定量分析</p>\n</li>\n</ul>\n<p>函数的凹凸性</p>\n<h2 id=\"第四章\"><a class=\"anchor\" href=\"#第四章\">#</a> 第四章</h2>\n<h4 id=\"不定积分\"><a class=\"anchor\" href=\"#不定积分\">#</a> 不定积分</h4>\n<h5 id=\"换元积分\"><a class=\"anchor\" href=\"#换元积分\">#</a> 换元积分</h5>\n<h5 id=\"分部积分\"><a class=\"anchor\" href=\"#分部积分\">#</a> 分部积分</h5>\n<blockquote>\n<p>凑微分，低次换元，三角换元，二次换元，重复型</p>\n</blockquote>\n<h5 id=\"积分表\"><a class=\"anchor\" href=\"#积分表\">#</a> 积分表</h5>\n<p><img data-src=\"https://raw.githubusercontent.com/EveFortosaber/Open-pictures/main/%E7%A7%AF%E5%88%86%E8%A1%A8.jpg\" alt=\"积分表\" /></p>\n<h5 id=\"有理函数的不定积分\"><a class=\"anchor\" href=\"#有理函数的不定积分\">#</a> 有理函数的不定积分</h5>\n<p>待定系数法</p>\n<ul>\n<li>\n<p>万能公式</p>\n<p><img data-src=\"https://raw.githubusercontent.com/EveFortosaber/Open-pictures/main/%E4%B8%87%E8%83%BD%E5%85%AC%E5%BC%8F.jpg\" alt=\"万能公式\" /></p>\n</li>\n</ul>\n<h4 id=\"定积分\"><a class=\"anchor\" href=\"#定积分\">#</a> 定积分</h4>\n<h5 id=\"定积分概念求无穷项和的极限\"><a class=\"anchor\" href=\"#定积分概念求无穷项和的极限\">#</a> 定积分概念求无穷项和的极限</h5>\n<p><img data-src=\"https://raw.githubusercontent.com/EveFortosaber/Open-pictures/main/%E5%AE%9A%E7%A7%AF%E5%88%86%E6%A6%82%E5%BF%B5.jpg\" alt=\"定积分概念\" /></p>\n<h5 id=\"估值定理\"><a class=\"anchor\" href=\"#估值定理\">#</a> 估值定理</h5>\n<p>区间内的 Max 与 Min 乘以区间长度得到限定区间。</p>\n<h5 id=\"积分中值定理\"><a class=\"anchor\" href=\"#积分中值定理\">#</a> 积分中值定理</h5>\n<p><img data-src=\"https://raw.githubusercontent.com/EveFortosaber/Open-pictures/main/%E7%A7%AF%E5%88%86%E4%B8%AD%E5%80%BC%E5%AE%9A%E7%90%86.jpg\" alt=\"积分中值定理\" /></p>\n<p>求积分函数极限时用到，由介值定理推得</p>\n<h5 id=\"几何意义\"><a class=\"anchor\" href=\"#几何意义\">#</a> 几何意义</h5>\n<h5 id=\"牛顿莱布尼茨公式\"><a class=\"anchor\" href=\"#牛顿莱布尼茨公式\">#</a> 牛顿莱布尼茨公式</h5>\n<h5 id=\"微积分学基本定理\"><a class=\"anchor\" href=\"#微积分学基本定理\">#</a> 微积分学基本定理</h5>\n<p>连续函数必存在原函数</p>\n<h5 id=\"平面曲线的弧长与曲率\"><a class=\"anchor\" href=\"#平面曲线的弧长与曲率\">#</a> 平面曲线的弧长与曲率</h5>\n<ul>\n<li><img data-src=\"https://raw.githubusercontent.com/EveFortosaber/Open-pictures/main/1%E5%BC%A7%E9%95%BF%E5%85%AC%E5%BC%8F.png\" alt=\"1弧长公式\" /></li>\n<li><img data-src=\"https://raw.githubusercontent.com/EveFortosaber/Open-pictures/main/2%E5%BC%A7%E9%95%BF%E5%85%AC%E5%BC%8F.png\" alt=\"2\" /></li>\n<li><img data-src=\"https://raw.githubusercontent.com/EveFortosaber/Open-pictures/main/3%E5%BC%A7%E9%95%BF%E5%85%AC%E5%BC%8F.png\" alt=\"3\" /></li>\n</ul>\n<h5 id=\"极坐标系\"><a class=\"anchor\" href=\"#极坐标系\">#</a> 极坐标系</h5>\n<p><em><strong>x=pcosa,y=psina;</strong></em></p>\n<h5 id=\"平面曲线的曲率\"><a class=\"anchor\" href=\"#平面曲线的曲率\">#</a> 平面曲线的曲率</h5>\n<h5 id=\"曲率圆\"><a class=\"anchor\" href=\"#曲率圆\">#</a> 曲率圆</h5>\n<h5 id=\"定积分的几何应用\"><a class=\"anchor\" href=\"#定积分的几何应用\">#</a> 定积分的几何应用</h5>\n<h5 id=\"连续函数的平均值\"><a class=\"anchor\" href=\"#连续函数的平均值\">#</a> 连续函数的平均值</h5>\n<h5 id=\"定积分在物理学与经济学\"><a class=\"anchor\" href=\"#定积分在物理学与经济学\">#</a> 定积分在物理学与经济学</h5>\n<ul>\n<li>\n<p>变力做功</p>\n</li>\n<li>\n<p>引力问题</p>\n</li>\n<li>\n<p>液体侧面压力</p>\n</li>\n</ul>\n<h5 id=\"反常积分\"><a class=\"anchor\" href=\"#反常积分\">#</a> 反常积分</h5>\n",
            "tags": [
                "Notes"
            ]
        },
        {
            "id": "https://evefortosaber.github.io/2023/03/19/ComputerScience/ProgramDesignNotes/%E5%A4%9A%E5%A4%9A%E6%9E%9C%E5%AD%90%E9%97%AE%E9%A2%98/",
            "url": "https://evefortosaber.github.io/2023/03/19/ComputerScience/ProgramDesignNotes/%E5%A4%9A%E5%A4%9A%E6%9E%9C%E5%AD%90%E9%97%AE%E9%A2%98/",
            "title": "多多果子问题二叉堆与优先序列",
            "date_published": "2023-03-19T11:29:17.362Z",
            "content_html": "<p><img data-src=\"https://s2.loli.net/2023/03/16/No51BErYemDLZpQ.jpg\" alt=\"37\" /></p>\n<h4 id=\"问题描述\"><a class=\"anchor\" href=\"#问题描述\">#</a> 问题描述：</h4>\n<blockquote>\n<p>在一个果园里，多多已经将所有的果子打了下来，而且按果子的不同种类分成了不同的堆。多多决定把所有的果子合成一堆。每一次合并，多多可以把两堆果子合并到一起，消耗的体力等于两堆果子的重量之和。可以看出，所有的果子经过 n-1 次合并之后，就只剩下一堆了。多多在合并果子时总共消耗的体力等于每次合并所耗体力之和。</p>\n<p>因为还要花大力气把这些果子搬回家，所以多多在合并果子时要尽可能地节省体力。假定每个果子重量都为 1，并且已知果子的种类数和每种果子的数目，你的任务是设计出合并的次序方案，使多多耗费的体力最少，并输出这个最小的体力耗费值。<br />\n　　例如有 3 种果子，数目依次为 1，2，9。可以先将 1、2 堆合并，新堆数目为 3，耗费体力为 3。接着，将新堆与原先的第三堆合并，又得到新的堆，数目为 12，耗费体力为 12。<br />\n所以多多总共耗费体力 = 3+12=15。可以证明 15 为最小的体力耗费值。<br />\n输入<br />\n　　输入包括两行，第一行是一个整数 n (1&lt;＝n&lt;=10000)，表示果子的种类数。<br />\n　　第二行包含 n 个整数，用空格分隔，第 i 个整数 ai (1&lt;＝ai&lt;=20000) 是第 i 种果子的数目。<br />\n输出<br />\n　　输出包括一行，这一行只包含一个整数，也就是最小的体力耗费值。输入数据保证这个值小于 2^31。</p>\n</blockquote>\n<p><strong>解决问题思路</strong>：取出最小相加成一堆，并计算体力消耗</p>\n<h4 id=\"方法一小顶堆\"><a class=\"anchor\" href=\"#方法一小顶堆\">#</a> 方法一：小顶堆</h4>\n<p>代码及思路如下</p>\n<pre><code class=\"language-c++\">#include&lt;iostream&gt;\n#include&lt;algorithm&gt;\n\nusing namespace std;\nconst int maxn=10086;\nvoid updateheap(int heap[],int idx,int high)// 在本身是小顶堆的情况下维护\n&#123;\n    int i=idx,j=2*i;//\n    while(j&lt;=high)\n    &#123;\n        if(j+1&lt;=high &amp;&amp; heap[j]&gt;heap[j+1]) j=j+1;\n        if(heap[j]&lt;heap[i]) swap(heap[j],heap[i]);// 当需要进行维护操作时，就说明idx节点不满足小顶堆，要考虑swap后对子节点的影响\n        else break;//  在它本身是小顶堆的情况下，确保了维护的这个节点满足条件即可结束\n        i=j; // 考虑到子节点的影响，继续对子节点判断维护\n        j=2*i;\n    &#125;\n&#125;\n\nvoid heapinit(int heap[],int len) // 创建一个小顶堆，len是小顶堆大小\n&#123;\n    for(int i=1;i&lt;=len;i++) cin&gt;&gt;heap[i]; // 空间足够，以1为根结点 事实上，一般都以1为节点\n    for(int i=len/2;i&gt;0;i--) updateheap(heap,i,len); // 从叶子向根节点维护，确保有序性\n&#125;\n\nvoid deletetop(int heap[],int &amp;n) // n即size将要移除的数放到末尾，并回收末尾节点 = size-- \n&#123;\n    \n    swap(heap[1],heap[n]);// change happans ,we have to maintain it\n    n--; // after swap we recycle the last node\n    updateheap(heap,1,n);\n    \n&#125;\nvoid insertheap(int heap[],int &amp;n,int value)\n&#123;\n    n++;\n    heap[n]=value;\n    int i=n,j=i/2;// i is the childnode, and j is the fathernode\n    while(i&gt;1)\n    &#123;\n        if(heap[i]&lt;heap[j]) swap(heap[i],heap[j]);\n        else return; // heap[i]&gt;=heap[j]说明插入的值并不比父节点大，有序性得以保证\n        i=j;\n        j=i/2;\n    &#125;\n    return;\n&#125;\nint main()\n&#123;\n    int n,Heap[maxn],stamina,size;\n    cin&gt;&gt;n;\n    size=n;\n    stamina=0;\n    heapinit(Heap,n);\n    if(n==1)\n    &#123;\n        cout&lt;&lt;Heap[1];\n        return 1;\n    &#125;\n    // stamina 的消耗可以堆顶的访问删除来实现\n    // 通过将堆顶与堆底互换并回收堆底，保持访问堆的结构不变，通过维护保持堆的有序\n    // 回收（size--通过大小的减小停止对堆底的维护，即回收）未删除数据但不影响\n    while(size&gt;1)\n    &#123;\n        int a = Heap[1];\n        deletetop(Heap,size);\n        int b=Heap[1];\n        deletetop(Heap,size);\n       \n        insertheap(Heap,size,a+b);// value isn't equal to stamina cost totally\n        stamina+=(a+b);\n\n    &#125;\n    cout&lt;&lt;stamina;\n&#125;\n</code></pre>\n<p>结语：涉及二叉堆的生成与维护，要注意对堆顶 pop 时 (也就是上文中的 deletetop 函数，topnode 的值并没有被删除，而是放在了堆底回收区，堆的大小并不是真正意义上所占全部空间的大小，而是有效空间的大小)</p>\n<h4 id=\"方法二优先队列\"><a class=\"anchor\" href=\"#方法二优先队列\">#</a> 方法二：优先队列</h4>\n<p>代码及思路如下</p>\n<pre><code class=\"language-c++\">#include &lt;queue&gt;\n#include &lt;iostream&gt;\n\nusing namespace std;\n\nint main()\n&#123;\n    priority_queue&lt;int, vector&lt;int&gt;, greater&lt;int&gt; &gt; que;\n    // greater 增序，使最小的位于top\n    int n, i, stamina = 0;\n    cin &gt;&gt; n;\n    i = n;\n    while (i--)\n    &#123;\n        int x;\n        cin &gt;&gt; x;\n        que.push(x);\n    &#125;// 输入que，自动排序\n    if (n == 1)\n    &#123;\n        int x = que.top();\n        cout &lt;&lt; x;\n        que.pop();\n    &#125;\n    while (que.size() &gt; 1)\n    &#123;\n        int a = que.top();\n        que.pop();\n        int b = que.top();\n        que.pop();\n        stamina += (a + b);\n        que.push(a + b);\n    &#125;\n    //que.top()=sum 所有之和，不用计算到体力消耗\n\n\n    cout &lt;&lt; stamina;\n&#125;\n\n</code></pre>\n<p>结语：相比于使用小顶堆，使用优先队列的代码无疑简介易懂。</p>\n<p>然而事实上优先队列本质上使用的也是堆的思想。二者在时间效率上，是前者更优。<s>(specific 优于 general)</s> 😃</p>\n<p>参考资料：</p>\n<blockquote>\n<p><span class=\"exturl\" data-url=\"aHR0cDovL3QuY3Nkbi5jbi82dXBFSw==\">Possible_Answer</span>,</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC8xODc2MTg0NTA=\"> 二叉堆 -- 知乎</span>，</p>\n<p><span class=\"exturl\" data-url=\"aHR0cDovL3QuY3Nkbi5jbi8yQ1o0YQ==\">优先队列</span>，<span class=\"exturl\" data-url=\"aHR0cDovL3QuY3Nkbi5jbi9DNlA0aA==\">优先队列 (实例)</span>,</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC80MTU0NjcwMDA=\">数据结构 —— 哈夫曼树 (Huffman Tree)</span>,(知识扩展)</p>\n</blockquote>\n<hr />\n<blockquote>\n<p>写在最后，这里出于课程要求，并没有考虑快排的方法，事实上快排无疑也是一种解决方案</p>\n</blockquote>\n",
            "tags": [
                "Notes",
                "C++"
            ]
        },
        {
            "id": "https://evefortosaber.github.io/2023/03/19/ComputerScience/ProgramDesignNotes/DFS/%E5%B0%8F%E6%9C%A8%E6%A3%8D%E7%BB%84%E6%AD%A3%E6%96%B9%E5%BD%A2/",
            "url": "https://evefortosaber.github.io/2023/03/19/ComputerScience/ProgramDesignNotes/DFS/%E5%B0%8F%E6%9C%A8%E6%A3%8D%E7%BB%84%E6%AD%A3%E6%96%B9%E5%BD%A2/",
            "title": "小木棍组正方形",
            "date_published": "2023-03-19T11:29:17.362Z",
            "content_html": "<h3 id=\"小木棍组正方形\"><a class=\"anchor\" href=\"#小木棍组正方形\">#</a> 小木棍组正方形：</h3>\n<h4 id=\"题目描述\"><a class=\"anchor\" href=\"#题目描述\">#</a> 题目描述</h4>\n<blockquote>\n<p>有 n 个木棒，需要用上所有木棒，围成一个正方形，如果可以围成正方形，则输出 &quot;yes&quot;, 否则输出 &quot;no&quot;。</p>\n<h4 id=\"输入\"><a class=\"anchor\" href=\"#输入\">#</a> 输入</h4>\n<p>第一行输入一个整数 T 表示样例个数。<br />\n对于每个样例，第一行输入一个整数 N 表示木棍的个数，第二行输入 N 个数字表示木棒的长度。</p>\n<h4 id=\"输出\"><a class=\"anchor\" href=\"#输出\">#</a> 输出</h4>\n<p>对于每个样例，如果可以则输出 &quot;yes&quot;, 否则输出 &quot;no&quot;。</p>\n<h4 id=\"样例输入-复制\"><a class=\"anchor\" href=\"#样例输入-复制\">#</a> 样例输入 复制</h4>\n<figure class=\"highlight plain\"><figcaption data-lang=\"plain\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>3 </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>4 </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>1 1 1 1 </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>5 </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>10 20 30 40 50 </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>8 </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>1 7 2 6 4 4 3 5</pre></td></tr></table></figure><h4 id=\"样例输出-复制\"><a class=\"anchor\" href=\"#样例输出-复制\">#</a> 样例输出 复制</h4>\n<figure class=\"highlight plain\"><figcaption data-lang=\"plain\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>yes</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>no</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>yes</pre></td></tr></table></figure><h4 id=\"提示\"><a class=\"anchor\" href=\"#提示\">#</a> 提示</h4>\n<p>N &lt;= 20</p>\n</blockquote>\n<h4 id=\"解题思路\"><a class=\"anchor\" href=\"#解题思路\">#</a> 解题思路：</h4>\n<p>使用 DFS 算法，并减去一些枝干</p>\n<h5 id=\"代码如下\"><a class=\"anchor\" href=\"#代码如下\">#</a> 代码如下</h5>\n<pre><code class=\"language-c++\">#include &lt;iostream&gt;\n#include &lt;algorithm&gt;\n\nusing namespace std;\nint sticks[38]&#123;0&#125;;//建立木棍数组\n\nint side, groupnum, n;\n// sum表示目前木棍长度和，num表示已凑出的边数，pos表示使用的木棍，flag表示是否已使用\nbool DFS(int sum, int number, int pos,int * flag)\n&#123;\n    //凑到3条边即可\n    if (number == 3)\n        return true;\n    // 从pos到n-1\n    for(int i=pos;i&lt;n;i++)\n    &#123;\n        // 如果大于边长舍去这种可能\n        if(sum+sticks[pos]&gt;side)&#123;\n            continue;\n        &#125;\n        // 如果被使用了，跳过\n        if(flag[i]==1)\n        &#123;\n            continue;\n        &#125;\n        // 恰好找到了\n        if(sum+sticks[i]==side)\n        &#123;\n            // 找到一条边，重头再找下一条边 sum，pos 归零，num+1，但flag不动用于记录是否被使用\n            //（如果木棍被用于组成上一条边此时其对应的flag应为1\n            if(DFS(0,number+1,0,flag)) return true;\n        &#125;\n        // 不足\n        else\n        &#123;\n            // 取出这一根木棍：sum=sum+sticks[i] （两个sum不等价）\n            if(DFS(sum+sticks[i],number,0,flag)) return true;\n        &#125;\n        // 回溯，（这种可能不行（此路不通（把用了的木棍归还（则flag归零\n        flag[i]=0;\n    &#125;\n    return false;\n&#125;\n\nint main()\n&#123;\n\n    cin &gt;&gt; groupnum;//输入测试案例数\n    while (groupnum--)\n    &#123;\n        int flag[38]&#123;0&#125;;// 用于标记是否使用过\n        cin &gt;&gt; n;// 木棍数量\n        int s = 0; // 木棍总长度\n        //获取木棍长度，及总长\n        for (int i = 0; i &lt; n; i++) \n        &#123;\n            cin &gt;&gt; sticks[i];\n            s += sticks[i];\n        &#125;\n        // 如果总长不能被4整除，舍去\n        if (s % 4 != 0)\n        &#123;\n            cout &lt;&lt; &quot;no&quot; &lt;&lt; endl;\n            continue;\n        &#125;\n        // 边长\n        side = s / 4;\n        // 排序，便于搜索\n        sort(sticks, sticks + n, greater&lt;int&gt;());\n        // 如果最长的大于边长舍去\n        if (sticks[0] &gt; side)\n        &#123;\n            cout &lt;&lt; &quot;no&quot; &lt;&lt; endl;\n            continue;\n        &#125;\n        //搜索\n        if (DFS(0, 0, 0,flag))\n            cout &lt;&lt; &quot;yes&quot; &lt;&lt; endl;\n        else \n            cout&lt;&lt;&quot;no&quot;&lt;&lt;endl;\n    &#125;\n</code></pre>\n<h4 id=\"结语\"><a class=\"anchor\" href=\"#结语\">#</a> 结语：</h4>\n<p>DFS 模板</p>\n<pre><code class=\"language-c++\">int check(参数)\n&#123;\n    if(满足条件)\n        return 1;\n    return 0;\n&#125;\n \nvoid dfs(int step)\n&#123;\n        判断边界\n        &#123;\n            相应操作\n        &#125;\n        尝试每一种可能\n        &#123;\n               满足check条件\n               标记\n               继续下一步dfs(step+1)\n               恢复初始状态（回溯的时候要用到）\n        &#125;\n&#125;   \n</code></pre>\n<h4 id=\"参考资料\"><a class=\"anchor\" href=\"#参考资料\">#</a> 参考资料</h4>\n<blockquote>\n<p><span class=\"exturl\" data-url=\"aHR0cDovL3QuY3Nkbi5jbi9FZjhNUQ==\">DFS 算法解释及例题</span></p>\n</blockquote>\n",
            "tags": [
                "Notes",
                "C++",
                "DFS"
            ]
        },
        {
            "id": "https://evefortosaber.github.io/2023/03/19/ComputerScience/ProgramDesignNotes/DFS/%E6%A3%8B%E7%9B%98%E9%97%AE%E9%A2%98/",
            "url": "https://evefortosaber.github.io/2023/03/19/ComputerScience/ProgramDesignNotes/DFS/%E6%A3%8B%E7%9B%98%E9%97%AE%E9%A2%98/",
            "title": "棋盘问题",
            "date_published": "2023-03-19T11:29:17.362Z",
            "content_html": "<p><img data-src=\"https://raw.githubusercontent.com/EveFortosaber/Open-pictures/main/picgo/%E5%87%89_001.jpg\" alt=\"凉_001\" /></p>\n<h4 id=\"问题描述\"><a class=\"anchor\" href=\"#问题描述\">#</a> 问题描述</h4>\n<blockquote>\n<p>在一个给定形状的棋盘（形状可能是不规则的）上面摆放棋子，棋子没有区别。要求摆放时任意的两个棋子不能放在棋盘中的同一行或者同一列，请编程求解对于给定形状和大小的棋盘，摆放 k 个棋子的所有可行的摆放方案 C。</p>\n</blockquote>\n<hr />\n<h5 id=\"输入\"><a class=\"anchor\" href=\"#输入\">#</a> 输入</h5>\n<blockquote>\n<p>输入含有多组测试数据。<br />\n每组数据的第一行是两个正整数 *，n k*，用一个空格隔开，表示了将在一个 n*n 的矩阵内描述棋盘，以及摆放棋子的数目。</p>\n<p>n &lt;= 8 , k &lt;= n</p>\n<p>当为 **-1 -1** 时表示输入结束。<br />\n随后的 n 行描述了棋盘的形状：每行有 n 个字符，其中  <code>#</code>  表示棋盘区域， <code>.</code>  表示空白区域（数据保证不出现多余的空白行或者空白列）。</p>\n</blockquote>\n<hr />\n<h5 id=\"输出\"><a class=\"anchor\" href=\"#输出\">#</a> 输出</h5>\n<blockquote>\n<p>对于每一组数据，给出一行输出，输出摆放的方案数目 C （<em>数据保证 C&lt;2^31</em>）。</p>\n</blockquote>\n<hr />\n<h5 id=\"样例输入\"><a class=\"anchor\" href=\"#样例输入\">#</a> 样例输入</h5>\n<figure class=\"highlight plain\"><figcaption data-lang=\"plain\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>2 1</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>#.</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>.#</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>4 4</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>...#</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>..#.</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>.#..</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>#...</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>-1 -1</pre></td></tr></table></figure><hr />\n<h5 id=\"样例输出\"><a class=\"anchor\" href=\"#样例输出\">#</a> 样例输出</h5>\n<figure class=\"highlight plain\"><figcaption data-lang=\"plain\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>2</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>1</pre></td></tr></table></figure><hr />\n<h4 id=\"解题思路\"><a class=\"anchor\" href=\"#解题思路\">#</a> 解题思路</h4>\n<p>通过 visit 记录行列被 ' 污染 ' 情况。对应的下标表示行列。</p>\n<p>通过 DFS 遍历所有可能</p>\n<p><strong>代码如下</strong>:</p>\n<pre><code class=\"language-c++\">#include &lt;iostream&gt;\n#include &lt;string.h&gt;\nusing namespace std;\n\nint n, k, ans, a[64], j; // n 方阵长度，k棋子个数,ans is answer\n\nint visit[8][8]&#123;0&#125;; // shows which cloumn and row is not placeable\n\nstruct Node\n&#123;\n    int *flag;\n    int p = 0;// in fact, the param is redundant\n&#125;;\n// 如果为0则空，1则有棋盘’#‘\nNode qiju[100];\n// 进行遍历// 考虑使用下标 从1开始\n\nvoid dfs(int idx, int num)\n&#123;\n    if (num == k)\n        ans++; // plan + 1\n    else\n    &#123;\n        for (int i = idx; i &lt; j; i++) // each qipan has possiblity\n        &#123;\n            if (*qiju[a[i]].flag == 1)\n                continue;\n            *qiju[a[i]].flag = 1; //\n            dfs(0, num + 1);\n        &#125;\n    &#125;\n&#125;\n\nint main()\n&#123;\n    char ch;\n    while (cin &gt;&gt; n &gt;&gt; k)\n    &#123;\n        if (n == -1 &amp;&amp; k == -1)\n            break;\n        j = 0;\n        ans = 0;\n        memset(qiju, 0, sizeof(qiju));\n        memset(visit, 0, sizeof(visit));\n\n        for (int i = 0; i &lt; n * n; i++)\n        &#123;\n\n            cin &gt;&gt; ch;\n            switch (ch)\n            &#123;\n            case '.':\n                break;\n            case '#':\n\n                qiju[i].p = 1;// when I have created array a, \n                    \t\t//I can visit qiju by a, \n                    \t\t//in this situation param p is redundant.\n                qiju[i].flag = &amp;visit[i / n][i % n]; // point to position\n                a[j] = i;                            // restore qipan position with arry a\n                j++;\n                break;\n            &#125;\n        &#125;\n        dfs(0, 0);\n        cout &lt;&lt; ans &lt;&lt; endl;\n    &#125;\n    return 0;\n&#125;\n</code></pre>\n<h4 id=\"结语\"><a class=\"anchor\" href=\"#结语\">#</a> 结语</h4>\n<p>通过 visit 标记状态，通过 node 取地址，使每个棋盘的状态得以被标示，同时通过 node 数组，a 数组实现快速访问，规避无效数据。</p>\n<h4 id=\"参考资料\"><a class=\"anchor\" href=\"#参考资料\">#</a> 参考资料</h4>\n<blockquote>\n<p>DFS 深度优先搜索算法</p>\n</blockquote>\n",
            "tags": [
                "Notes",
                "C++",
                "DFS"
            ]
        },
        {
            "id": "https://evefortosaber.github.io/2023/03/19/ComputerScience/ProgramDesignNotes/DFS/%E7%B4%A0%E6%95%B0%E7%8E%AF%E9%97%AE%E9%A2%98/",
            "url": "https://evefortosaber.github.io/2023/03/19/ComputerScience/ProgramDesignNotes/DFS/%E7%B4%A0%E6%95%B0%E7%8E%AF%E9%97%AE%E9%A2%98/",
            "title": "素数环问题",
            "date_published": "2023-03-19T11:29:17.362Z",
            "content_html": "<p><img data-src=\"https://raw.githubusercontent.com/EveFortosaber/Open-pictures/main/picgo/1267999.jpg\" alt=\"1267999\" /></p>\n<h4 id=\"素数环问题\"><a class=\"anchor\" href=\"#素数环问题\">#</a> 素数环问题</h4>\n<blockquote>\n<p><strong>Problem Description</strong></p>\n<p>A ring is compose of n circles as shown in diagram. Put natural number 1, 2, ..., n into each circle separately, and the sum of numbers in two adjacent circles should be a prime.</p>\n<p>Note: the number of first circle should always be 1.</p>\n<hr />\n<p><strong>Input</strong></p>\n<p>n (0 &lt; n &lt; 20).</p>\n<hr />\n<p><strong>Output</strong></p>\n<p>The output format is shown as sample below. Each row represents a series of circle numbers in the ring beginning from 1 clockwisely and anticlockwisely. The order of numbers must satisfy the above requirements. Print solutions in lexicographical order.</p>\n<hr />\n<p>You are to write a program that completes above process.</p>\n<p>&lt;u&gt;<strong>Print a blank line after each case.</strong>&lt;/u&gt;</p>\n</blockquote>\n<h4 id=\"解题思路\"><a class=\"anchor\" href=\"#解题思路\">#</a> 解题思路：</h4>\n<h5 id=\"代码如下\"><a class=\"anchor\" href=\"#代码如下\">#</a> 代码如下：</h5>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stack></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;math.h></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string.h></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>using namespace std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>从 2 开始到 sqrt (num)，逐一判断</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>*/</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">int</span> arry<span class=\"token punctuation\">[</span><span class=\"token number\">27</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> flag<span class=\"token punctuation\">[</span><span class=\"token number\">27</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#123;</span><span class=\"token number\">0</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>stack<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> s1<span class=\"token punctuation\">,</span> s2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>bool <span class=\"token function\">isPrime_2</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> num<span class=\"token punctuation\">)</span><span class=\"token comment\">// 素数怕判断</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>num <span class=\"token operator\">==</span> <span class=\"token number\">1</span> <span class=\"token operator\">||</span> num <span class=\"token operator\">==</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>num <span class=\"token operator\">==</span> <span class=\"token number\">2</span> <span class=\"token operator\">||</span> num <span class=\"token operator\">==</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">int</span> temp <span class=\"token operator\">=</span> <span class=\"token function\">sqrt</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> temp<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>num <span class=\"token operator\">%</span> i <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token comment\">// bool primeloop(int num, int pos, int *flag)</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token comment\">// &#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token comment\">//     if (n == 1)</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token comment\">//         return true;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token comment\">//     if (num == n &amp;&amp; isPrime_2(s1.top() + 1))</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token comment\">//         return true;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token comment\">//     for (int i = pos; i &lt; n; i++)</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token comment\">//     &#123;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token comment\">//         if (flag[i] || !isPrime_2(arry[pos] + arry[i]))</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token comment\">//             continue;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token comment\">//         flag[i] = 1;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token comment\">//         if (isPrime_2(arry[pos] + arry[i]))</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token comment\">//         &#123;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token comment\">//             s1.push(arry[pos] + arry[i]);</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre><span class=\"token comment\">//             if (primeloop(num + 1, 1, flag))</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre><span class=\"token comment\">//                 return true;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre><span class=\"token comment\">//         &#125;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre><span class=\"token comment\">//         flag[i] = 0;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre><span class=\"token comment\">//         s1.pop();</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre><span class=\"token comment\">//     &#125;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre><span class=\"token comment\">//     return false;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre><span class=\"token comment\">// &#125; 只找一条</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> k<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>k <span class=\"token operator\">==</span> n <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">isPrime_2</span><span class=\"token punctuation\">(</span>arry<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> arry<span class=\"token punctuation\">[</span>n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 如果递归到下标 n 并且满足条件就找到一组正确的数据了</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>            cout <span class=\"token operator\">&lt;&lt;</span> arry<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>        cout <span class=\"token operator\">&lt;&lt;</span> arry<span class=\"token punctuation\">[</span>n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>    <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>flag<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">isPrime_2</span><span class=\"token punctuation\">(</span>arry<span class=\"token punctuation\">[</span>k <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 如果 i 没有使用过，并且 a [k-1] 和 i 相加为素数，即和前一个数相加为质数</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>                arry<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span> <span class=\"token comment\">//i 符合条件，存入当前位</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>                flag<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 标记为使用过的</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>                <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span>k <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 开始下一个位置符合条件的值</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>                flag<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 清除标记</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre></pre></td></tr><tr><td data-num=\"73\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>    <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>cin <span class=\"token operator\">>></span> n<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>        i<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>        <span class=\"token function\">memset</span><span class=\"token punctuation\">(</span>flag<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>flag<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> k <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> k <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> k<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>            arry<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 只要 a [0]=1 即可 // 随意</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>        cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Case \"</span> <span class=\"token operator\">&lt;&lt;</span> i <span class=\"token operator\">&lt;&lt;</span> <span class=\"token char\">':'</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>        <span class=\"token comment\">//flag [0] = 1;// 随意</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>        <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>        cout <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"结语\"><a class=\"anchor\" href=\"#结语\">#</a> 结语：</h4>\n<p>注意考虑全部可能的情况</p>\n<h4 id=\"参考资料\"><a class=\"anchor\" href=\"#参考资料\">#</a> 参考资料：</h4>\n<blockquote>\n<p>[源码借鉴 From 简书]( <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuamlhbnNodS5jb20vcC85MThiZWM3MzJiN2Q=\">DFS (素数环) - 简书 (jianshu.com)</span>)，</p>\n</blockquote>\n",
            "tags": [
                "Notes",
                "C++"
            ]
        },
        {
            "id": "https://evefortosaber.github.io/2023/03/19/ComputerScience/ProgramDesignNotes/DFS/%E8%BF%B7%E5%AE%AB%E9%97%AE%E9%A2%98/",
            "url": "https://evefortosaber.github.io/2023/03/19/ComputerScience/ProgramDesignNotes/DFS/%E8%BF%B7%E5%AE%AB%E9%97%AE%E9%A2%98/",
            "title": "迷宫问题",
            "date_published": "2023-03-18T16:00:00.000Z",
            "content_html": "<p><img data-src=\"https://raw.githubusercontent.com/EveFortosaber/Open-pictures/main/picgo/fox_001.jpg\" alt=\"fox_001\" /></p>\n<h4 id=\"问题描述\"><a class=\"anchor\" href=\"#问题描述\">#</a> 问题描述</h4>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 定义一个二维数组： </span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">int</span> maze<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><blockquote>\n<p>它表示一个迷宫，其中的 1 表示墙壁，0 表示可以走的路，只能横着走或竖着走，不能斜着走，要求编程序找出从左上角到右下角的最短路线。</p>\n</blockquote>\n<hr />\n<h5 id=\"输入\"><a class=\"anchor\" href=\"#输入\">#</a> 输入</h5>\n<blockquote>\n<p>一个 5 × 5 的二维数组，表示一个迷宫。数据保证有唯一解。</p>\n</blockquote>\n<hr />\n<h5 id=\"输出\"><a class=\"anchor\" href=\"#输出\">#</a> 输出</h5>\n<blockquote>\n<p>左上角到右下角的最短路径，格式如样例所示。</p>\n</blockquote>\n<hr />\n<h5 id=\"样例输入\"><a class=\"anchor\" href=\"#样例输入\">#</a> 样例输入</h5>\n<figure class=\"highlight plain\"><figcaption data-lang=\"plain\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>0 1 0 0 0</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>0 1 0 1 0</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>0 0 0 0 0</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>0 1 1 1 0</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>0 0 0 1 0</pre></td></tr></table></figure><hr />\n<h5 id=\"样例输出\"><a class=\"anchor\" href=\"#样例输出\">#</a> 样例输出</h5>\n<figure class=\"highlight plain\"><figcaption data-lang=\"plain\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>(0, 0)</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>(1, 0)</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>(2, 0)</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>(2, 1)</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>(2, 2)</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>(2, 3)</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>(2, 4)</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>(3, 4)</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>(4, 4)</pre></td></tr></table></figure><h4 id=\"解决思路\"><a class=\"anchor\" href=\"#解决思路\">#</a> 解决思路</h4>\n<p>这道题可以使用 BFS（广度优先搜索）来解决。</p>\n<p>BFS 算法：首先将起点加入队列，每次从队列中取出一个点来进行扩展，将扩展得到的所有点加入队列。重复上述过程，直到找到终点或队列为空为止。</p>\n<p>需要注意的是，在扩展时，如果某个点已经在之前被扩展过，那么就不需要再次处理它了，这样可以避免进入死循环。</p>\n<h5 id=\"代码如下\"><a class=\"anchor\" href=\"#代码如下\">#</a> 代码如下</h5>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stack></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string.h></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>using namespace std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">int</span> maze<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">int</span> visit<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">int</span> direction<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span>swig￼<span class=\"token number\">0</span><span class=\"token operator\">--</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">Node</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\">/* data */</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">int</span> x <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> y <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token function\">Node</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> _x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> _y<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token function\">x</span><span class=\"token punctuation\">(</span>_x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>                           <span class=\"token function\">y</span><span class=\"token punctuation\">(</span>_y<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>stack<span class=\"token operator\">&lt;</span>Node<span class=\"token operator\">></span> s<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>bool <span class=\"token function\">findway</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token comment\">// 只要找一条路，不需要遍历所有可能</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    Node <span class=\"token function\">t</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    t <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">top</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">.</span>x <span class=\"token operator\">==</span> <span class=\"token number\">4</span> <span class=\"token operator\">&amp;&amp;</span> t<span class=\"token punctuation\">.</span>y <span class=\"token operator\">==</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token keyword\">return</span> true<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token comment\">// if (t.x &lt; 0 || t.y &lt; 0 || t.x > 4 || t.y > 4)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token comment\">// &#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token comment\">//     return false;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token comment\">// &#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token keyword\">int</span> cur_x <span class=\"token operator\">=</span> t<span class=\"token punctuation\">.</span>x <span class=\"token operator\">+</span> direction<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token keyword\">int</span> cur_y <span class=\"token operator\">=</span> t<span class=\"token punctuation\">.</span>y <span class=\"token operator\">+</span> direction<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cur_x <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> cur_y <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> cur_x <span class=\"token operator\">></span> <span class=\"token number\">4</span> <span class=\"token operator\">||</span> cur_y <span class=\"token operator\">></span> <span class=\"token number\">4</span> <span class=\"token operator\">||</span> visit<span class=\"token punctuation\">[</span>cur_x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>cur_y<span class=\"token punctuation\">]</span> <span class=\"token operator\">||</span> maze<span class=\"token punctuation\">[</span>cur_x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>cur_y<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>            <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token comment\">// ensure that next node must be on the road</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        <span class=\"token comment\">// visit, make tag</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        visit<span class=\"token punctuation\">[</span>cur_x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>cur_y<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 标记走过</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        Node <span class=\"token function\">newpos</span><span class=\"token punctuation\">(</span>cur_x<span class=\"token punctuation\">,</span> cur_y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        s<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>newpos<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 走过了，入栈</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">findway</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token comment\">// 继续搜索</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>            <span class=\"token keyword\">return</span> true<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        s<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 失败，退栈， 回溯</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        visit<span class=\"token punctuation\">[</span>cur_x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>cur_y<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    <span class=\"token keyword\">return</span> false<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre></pre></td></tr><tr><td data-num=\"49\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>            cin <span class=\"token operator\">>></span> maze<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>    Node <span class=\"token function\">startpos</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>    s<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>startpos<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">findway</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>        stack<span class=\"token operator\">&lt;</span>Node<span class=\"token operator\">></span> temp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>            temp<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">top</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>            s<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>temp<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>            cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token char\">'('</span> <span class=\"token operator\">&lt;&lt;</span> temp<span class=\"token punctuation\">.</span><span class=\"token function\">top</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>x <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\", \"</span> <span class=\"token operator\">&lt;&lt;</span> temp<span class=\"token punctuation\">.</span><span class=\"token function\">top</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>y <span class=\"token operator\">&lt;&lt;</span> <span class=\"token char\">')'</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>            temp<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"结语\"><a class=\"anchor\" href=\"#结语\">#</a> 结语：</h4>\n<p>迷宫问题很重要的就是路径，方向，路径使用栈，方向通过<em> 2X4</em> 的数组描述，关键在于，在平面上点的坐标可以用 *(x,y)* 描述，给它加上相应分量</p>\n<p><em><strong>( 1, 0 )</strong> ( <strong>( -1, 0 ), ( 0, 1 ), ( 0, -1 )</strong> )* 就实现了向</em> * 右 (左，上，下)** 移动。</p>\n<h4 id=\"参考资料\"><a class=\"anchor\" href=\"#参考资料\">#</a> 参考资料</h4>\n<blockquote>\n<p>DFS 搜索算法，</p>\n<p>结构体</p>\n</blockquote>\n",
            "tags": [
                "Notes",
                "C++",
                "DFS"
            ]
        },
        {
            "id": "https://evefortosaber.github.io/2023/03/13/Mathematics/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6(%E4%B8%8B)/",
            "url": "https://evefortosaber.github.io/2023/03/13/Mathematics/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6(%E4%B8%8B)/",
            "title": "高等数学(下)",
            "date_published": "2023-03-12T16:00:00.000Z",
            "content_html": "<p>关于高等数学下册的一些笔记</p>\n<hr />\n<h4 id=\"向量的方向角和方向余弦\"><a class=\"anchor\" href=\"#向量的方向角和方向余弦\">#</a> 向量的方向角和方向余弦</h4>\n<p><img data-src=\"https://pic3.zhimg.com/80/v2-372cbaa699e447996d4c6d27ebbc4f2a_1440w.webp\" alt=\"向量的方向角和方向余弦\" /></p>\n<h4 id=\"向量叉乘\"><a class=\"anchor\" href=\"#向量叉乘\">#</a> 向量叉乘</h4>\n<blockquote>\n<p>在三维几何中，向量 a 和向量 b 的叉乘结果是一个向量，该向量垂直于 a 和 b 向量构成的平面，该向量也被称作法向量</p>\n</blockquote>\n<p><img data-src=\"https://sunocean.life/blog/assets/images/201205-3d-linear-algebra/20160902232814429.jpg\" alt=\"矢量叉乘 - 小时百科\" /></p>\n<p>右手螺旋定则，手指指向左元。</p>\n<h5 id=\"叉乘公式\"><a class=\"anchor\" href=\"#叉乘公式\">#</a> 叉乘公式</h5>\n<p><em>--- 行列式的展开</em></p>\n<p><img data-src=\"https://pics3.baidu.com/feed/38dbb6fd5266d0166e8615243bd8d80d34fa3518.png@f_auto?token=ebf017fb7eacd318da1313abf2fc6484\" alt=\"img\" /></p>\n<h4 id=\"平面方程\"><a class=\"anchor\" href=\"#平面方程\">#</a> 平面方程</h4>\n<p><em>表达式</em></p>\n<ul>\n<li>\n<p>截距式</p>\n<p><strong>x/a+y/b+z/c=1</strong> 它与三坐标轴的交点分别为<em> P (a, 0, 0), Q (0, b, 0), R (0, 0, c)</em></p>\n</li>\n<li>\n<p>点法式</p>\n<p><strong>A(x-x0)+B(y-y0)+C(z-z0)=0</strong> 法向量为<strong> n</strong>=(A,B,C)</p>\n</li>\n<li>\n<p>一般式</p>\n<p><strong>Ax+By+Cz+D=0</strong> 基本与点法式相同</p>\n</li>\n</ul>\n<blockquote>\n<p>可用平面上两条相交的直线的方向向量做点乘从而求出<em>平面法向量</em></p>\n</blockquote>\n<h4 id=\"空间直线\"><a class=\"anchor\" href=\"#空间直线\">#</a> 空间直线</h4>\n<h5 id=\"空间直线方程\"><a class=\"anchor\" href=\"#空间直线方程\">#</a> 空间直线方程</h5>\n<ul>\n<li>两平面联立</li>\n<li>对称式，由方向向量和直线上一点确定</li>\n<li>参数式 // 可由对称式导出</li>\n</ul>\n<p>&lt;u&gt; 详情戳<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTc1MDk3Mi9hcnRpY2xlL2RldGFpbHMvMTIxMTcyNzkz\">链接</span> &lt;/u&gt;</p>\n<h4 id=\"空间曲线\"><a class=\"anchor\" href=\"#空间曲线\">#</a> 空间曲线</h4>\n<p><img data-src=\"https://article.biliimg.com/bfs/article/0855cbc45dba5608e872dbee0b0064636027e540.png\" alt=\"ququ\" /></p>\n<h5 id=\"曲线弧长\"><a class=\"anchor\" href=\"#曲线弧长\">#</a> 曲线弧长</h5>\n<p>设空间曲线 C 由参数方程</p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>x</mi><mo>=</mo><mi>x</mi><mo stretchy=\"false\">(</mo><mi>t</mi><mo stretchy=\"false\">)</mo><mo separator=\"true\">,</mo><mtext> </mtext><mi>y</mi><mo>=</mo><mi>y</mi><mo stretchy=\"false\">(</mo><mi>t</mi><mo stretchy=\"false\">)</mo><mo separator=\"true\">,</mo><mtext> </mtext><mi>z</mi><mo>=</mo><mi>z</mi><mo stretchy=\"false\">(</mo><mi>t</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">x=x(t),\\,y=y(t),\\,z=z(t)\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">t</span><span class=\"mclose\">)</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">t</span><span class=\"mclose\">)</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.04398em;\">z</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.04398em;\">z</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">t</span><span class=\"mclose\">)</span></span></span></span></span></p>\n<p>给出，且函数<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mo>=</mo><mi>x</mi><mo stretchy=\"false\">(</mo><mi>t</mi><mo stretchy=\"false\">)</mo><mo separator=\"true\">,</mo><mtext> </mtext><mi>y</mi><mo>=</mo><mi>y</mi><mo stretchy=\"false\">(</mo><mi>t</mi><mo stretchy=\"false\">)</mo><mo separator=\"true\">,</mo><mtext> </mtext><mi>z</mi><mo>=</mo><mi>z</mi><mo stretchy=\"false\">(</mo><mi>t</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">x=x(t), \\, y=y(t), \\, z=z(t)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">t</span><span class=\"mclose\">)</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">t</span><span class=\"mclose\">)</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.04398em;\">z</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.04398em;\">z</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">t</span><span class=\"mclose\">)</span></span></span></span> 在闭区间<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">[</mo><mi>α</mi><mo separator=\"true\">,</mo><mtext> </mtext><mi>β</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">[\\alpha,\\,\\beta]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.0037em;\">α</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05278em;\">β</span><span class=\"mclose\">]</span></span></span></span> 上连续则弧长 s 为</p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>s</mi><mo>=</mo><msubsup><mo>∫</mo><mi>α</mi><mi>β</mi></msubsup><msqrt><mrow><msup><mi>x</mi><mrow><mo mathvariant=\"normal\">′</mo><mn>2</mn></mrow></msup><mo stretchy=\"false\">(</mo><mi>t</mi><mo stretchy=\"false\">)</mo><mo>+</mo><msup><mi>y</mi><mrow><mo mathvariant=\"normal\">′</mo><mn>2</mn></mrow></msup><mo stretchy=\"false\">(</mo><mi>t</mi><mo stretchy=\"false\">)</mo><mo>+</mo><msup><mi>z</mi><mrow><mo mathvariant=\"normal\">′</mo><mn>2</mn></mrow></msup><mo stretchy=\"false\">(</mo><mi>t</mi><mo stretchy=\"false\">)</mo></mrow></msqrt><mi>d</mi><mi>t</mi></mrow><annotation encoding=\"application/x-tex\">s=\\int_{\\alpha}^{\\beta} \\sqrt{x&#x27;^2(t)+y&#x27;^2(t)+z&#x27;^2(t)}dt\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">s</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:2.511em;vertical-align:-0.9119em;\"></span><span class=\"mop\"><span class=\"mop op-symbol large-op\" style=\"margin-right:0.44445em;position:relative;top:-0.0011em;\">∫</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.599em;\"><span style=\"top:-1.7881em;margin-left:-0.4445em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.0037em;\">α</span></span></span></span><span style=\"top:-3.8129em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.05278em;\">β</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.9119em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord sqrt\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.9839em;\"><span class=\"svg-align\" style=\"top:-3.2em;\"><span class=\"pstrut\" style=\"height:3.2em;\"></span><span class=\"mord\" style=\"padding-left:1em;\"><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7401em;\"><span style=\"top:-2.989em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′2</span></span></span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">t</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7401em;\"><span style=\"top:-2.989em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′2</span></span></span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">t</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.04398em;\">z</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7401em;\"><span style=\"top:-2.989em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′2</span></span></span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">t</span><span class=\"mclose\">)</span></span></span><span style=\"top:-2.9439em;\"><span class=\"pstrut\" style=\"height:3.2em;\"></span><span class=\"hide-tail\" style=\"min-width:1.02em;height:1.28em;\"><svg xmlns=\"http://www.w3.org/2000/svg\" width='400em' height='1.28em' viewBox='0 0 400000 1296' preserveAspectRatio='xMinYMin slice'><path d='M263,681c0.7,0,18,39.7,52,119\nc34,79.3,68.167,158.7,102.5,238c34.3,79.3,51.8,119.3,52.5,120\nc340,-704.7,510.7,-1060.3,512,-1067\nl0 -0\nc4.7,-7.3,11,-11,19,-11\nH40000v40H1012.3\ns-271.3,567,-271.3,567c-38.7,80.7,-84,175,-136,283c-52,108,-89.167,185.3,-111.5,232\nc-22.3,46.7,-33.8,70.3,-34.5,71c-4.7,4.7,-12.3,7,-23,7s-12,-1,-12,-1\ns-109,-253,-109,-253c-72.7,-168,-109.3,-252,-110,-252c-10.7,8,-22,16.7,-34,26\nc-22,17.3,-33.3,26,-34,26s-26,-26,-26,-26s76,-59,76,-59s76,-60,76,-60z\nM1001 80h400000v40h-400000z'/></svg></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2561em;\"><span></span></span></span></span></span><span class=\"mord mathnormal\">d</span><span class=\"mord mathnormal\">t</span></span></span></span></span></p>\n<h4 id=\"空间曲面\"><a class=\"anchor\" href=\"#空间曲面\">#</a> 空间曲面</h4>\n<h5 id=\"切面\"><a class=\"anchor\" href=\"#切面\">#</a> 切面</h5>\n<p><img data-src=\"https://picx.zhimg.com/v2-1a3899e4a5ec22962d64505ccd86dd29_720w.jpg?source=d16d100b\" alt=\"img\" /></p>\n<blockquote>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC8xNzkwODEzNzI=\">空间曲面与曲线 - 知乎</span></p>\n</blockquote>\n<h4 id=\"多元函数\"><a class=\"anchor\" href=\"#多元函数\">#</a> 多元函数</h4>\n<h5 id=\"可微的必要条件\"><a class=\"anchor\" href=\"#可微的必要条件\">#</a> 可微的必要条件</h5>\n<p>若函数<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>z</mi><mo>=</mo><mi>f</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo separator=\"true\">,</mo><mi>y</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">z=f(x,y)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.04398em;\">z</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mclose\">)</span></span></span></span> 在点<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><msub><mi>x</mi><mn>0</mn></msub><mo separator=\"true\">,</mo><mtext> </mtext><msub><mi>y</mi><mn>0</mn></msub><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(x_0,\\,y_0)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span> 处可微，则<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>z</mi><mo>=</mo><mi>f</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo separator=\"true\">,</mo><mi>y</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">z=f(x,y)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.04398em;\">z</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mclose\">)</span></span></span></span> 在点<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><msub><mi>x</mi><mn>0</mn></msub><mo separator=\"true\">,</mo><mtext> </mtext><msub><mi>y</mi><mn>0</mn></msub><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(x_0,\\,y_0)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span> 处存在对变量 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">x</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">x</span></span></span></span> 和 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>y</mi></mrow><annotation encoding=\"application/x-tex\">y</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span></span></span></span> 的偏导数，且</p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>d</mi><mi>z</mi><msub><mi mathvariant=\"normal\">∣</mi><mrow><mo stretchy=\"false\">(</mo><msub><mi>x</mi><mn>0</mn></msub><mo separator=\"true\">,</mo><msub><mi>y</mi><mn>0</mn></msub><mo stretchy=\"false\">)</mo></mrow></msub><mo>=</mo><msubsup><mi>f</mi><mi>x</mi><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msubsup><mo stretchy=\"false\">(</mo><mi>x</mi><mo separator=\"true\">,</mo><mtext> </mtext><mi>y</mi><mo stretchy=\"false\">)</mo><mi mathvariant=\"normal\">Δ</mi><mi>x</mi><mo>+</mo><msubsup><mi>f</mi><mi>y</mi><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msubsup><mo stretchy=\"false\">(</mo><mi>x</mi><mo separator=\"true\">,</mo><mtext> </mtext><mi>y</mi><mo stretchy=\"false\">)</mo><mi mathvariant=\"normal\">Δ</mi><mi>y</mi><mi mathvariant=\"normal\">.</mi></mrow><annotation encoding=\"application/x-tex\">dz|_{(x_0,y_0)}=f&#x27;_x(x,\\,y)\\Delta x+f&#x27;_y(x,\\,y)\\Delta y.\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.1052em;vertical-align:-0.3552em;\"></span><span class=\"mord mathnormal\">d</span><span class=\"mord mathnormal\" style=\"margin-right:0.04398em;\">z</span><span class=\"mord\"><span class=\"mord\">∣</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3448em;\"><span style=\"top:-2.5198em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mopen mtight\">(</span><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3173em;\"><span style=\"top:-2.357em;margin-left:0em;margin-right:0.0714em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.143em;\"><span></span></span></span></span></span></span><span class=\"mpunct mtight\">,</span><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03588em;\">y</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3173em;\"><span style=\"top:-2.357em;margin-left:-0.0359em;margin-right:0.0714em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.143em;\"><span></span></span></span></span></span></span><span class=\"mclose mtight\">)</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3552em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.0519em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8019em;\"><span style=\"top:-2.453em;margin-left:-0.1076em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">x</span></span></span><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.247em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mclose\">)</span><span class=\"mord\">Δ</span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.185em;vertical-align:-0.3831em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8019em;\"><span style=\"top:-2.453em;margin-left:-0.1076em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03588em;\">y</span></span></span><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3831em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mclose\">)</span><span class=\"mord\">Δ</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mord\">.</span></span></span></span></span></p>\n<p>函数<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>z</mi><mo>=</mo><mi>f</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo separator=\"true\">,</mo><mtext> </mtext><mi>y</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">z=f(x,\\,y)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.04398em;\">z</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mclose\">)</span></span></span></span> 在点<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><msub><mi>x</mi><mn>0</mn></msub><mo separator=\"true\">,</mo><mtext> </mtext><msub><mi>y</mi><mn>0</mn></msub><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(x_0,\\,y_0)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span> 处的全微分可表示为</p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>d</mi><mi>z</mi><msub><mi mathvariant=\"normal\">∣</mi><mrow><msub><mi>x</mi><mn>0</mn></msub><mo separator=\"true\">,</mo><mtext> </mtext><msub><mi>y</mi><mn>0</mn></msub></mrow></msub><mo>=</mo><msubsup><mi>f</mi><mi>x</mi><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msubsup><mo stretchy=\"false\">(</mo><msub><mi>x</mi><mn>0</mn></msub><mo separator=\"true\">,</mo><mtext> </mtext><msub><mi>y</mi><mn>0</mn></msub><mo stretchy=\"false\">)</mo><mi>d</mi><mi>x</mi><mo>+</mo><msubsup><mi>f</mi><mi>y</mi><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msubsup><mo stretchy=\"false\">(</mo><msub><mi>x</mi><mn>0</mn></msub><mo separator=\"true\">,</mo><msub><mi>y</mi><mn>0</mn></msub><mo stretchy=\"false\">)</mo><mi>d</mi><mi>y</mi><mi mathvariant=\"normal\">.</mi></mrow><annotation encoding=\"application/x-tex\">dz|_{x_0,\\,y_0}=f&#x27;_x(x_0,\\,y_0)dx+f&#x27;_y(x_0,y_0)dy.\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0361em;vertical-align:-0.2861em;\"></span><span class=\"mord mathnormal\">d</span><span class=\"mord mathnormal\" style=\"margin-right:0.04398em;\">z</span><span class=\"mord\"><span class=\"mord\">∣</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3173em;\"><span style=\"top:-2.357em;margin-left:0em;margin-right:0.0714em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.143em;\"><span></span></span></span></span></span></span><span class=\"mpunct mtight\">,</span><span class=\"mspace mtight\" style=\"margin-right:0.1952em;\"></span><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03588em;\">y</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3173em;\"><span style=\"top:-2.357em;margin-left:-0.0359em;margin-right:0.0714em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.143em;\"><span></span></span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2861em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.0519em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8019em;\"><span style=\"top:-2.453em;margin-left:-0.1076em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">x</span></span></span><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.247em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mord mathnormal\">d</span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.185em;vertical-align:-0.3831em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8019em;\"><span style=\"top:-2.453em;margin-left:-0.1076em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03588em;\">y</span></span></span><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3831em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mord mathnormal\">d</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mord\">.</span></span></span></span></span></p>\n<h5 id=\"可微的充分条件\"><a class=\"anchor\" href=\"#可微的充分条件\">#</a> 可微的充分条件</h5>\n<p>若函数<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>z</mi><mo>=</mo><mi>f</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo separator=\"true\">,</mo><mtext> </mtext><mi>y</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">z=f(x,\\,y)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.04398em;\">z</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mclose\">)</span></span></span></span> 的两个偏导数在点<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><msub><mi>x</mi><mn>0</mn></msub><mo separator=\"true\">,</mo><mtext> </mtext><msub><mi>y</mi><mn>0</mn></msub><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(x_0,\\,y_0)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span> 的某邻域存在，且<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msubsup><mi>f</mi><mi>x</mi><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msubsup><mo stretchy=\"false\">(</mo><mi>x</mi><mo separator=\"true\">,</mo><mtext> </mtext><mi>y</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">f&#x27;_x(x,\\,y)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0019em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7519em;\"><span style=\"top:-2.453em;margin-left:-0.1076em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">x</span></span></span><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.247em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mclose\">)</span></span></span></span> 与 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msubsup><mi>f</mi><mi>y</mi><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msubsup><mo stretchy=\"false\">(</mo><mi>x</mi><mo separator=\"true\">,</mo><mtext> </mtext><mi>y</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">f&#x27;_y(x,\\,y)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.135em;vertical-align:-0.3831em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7519em;\"><span style=\"top:-2.453em;margin-left:-0.1076em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03588em;\">y</span></span></span><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3831em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mclose\">)</span></span></span></span> 在点 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><msub><mi>x</mi><mn>0</mn></msub><mo separator=\"true\">,</mo><mtext> </mtext><msub><mi>y</mi><mn>0</mn></msub><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(x_0,\\,y_0)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span> 处连续，则函数 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>z</mi><mo>=</mo><mi>f</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo separator=\"true\">,</mo><mtext> </mtext><mi>y</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">z=f(x,\\,y)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.04398em;\">z</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mclose\">)</span></span></span></span> 在点 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><msub><mi>x</mi><mn>0</mn></msub><mo separator=\"true\">,</mo><mtext> </mtext><msub><mi>y</mi><mn>0</mn></msub><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(x_0,\\,y_0)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span> 处可微。</p>\n<p>从公式出发</p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi mathvariant=\"normal\">Δ</mi><mi>z</mi><mo>=</mo><msubsup><mi>f</mi><mi>x</mi><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msubsup><mo stretchy=\"false\">(</mo><msub><mi>x</mi><mn>0</mn></msub><mo separator=\"true\">,</mo><mtext> </mtext><msub><mi>y</mi><mn>0</mn></msub><mo stretchy=\"false\">)</mo><mi mathvariant=\"normal\">Δ</mi><mi>x</mi><mo>+</mo><msubsup><mi>f</mi><mi>y</mi><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msubsup><mo stretchy=\"false\">(</mo><msub><mi>x</mi><mn>0</mn></msub><mo separator=\"true\">,</mo><mtext> </mtext><msub><mi>y</mi><mn>0</mn></msub><mo stretchy=\"false\">)</mo><mi mathvariant=\"normal\">Δ</mi><mi>y</mi><mo>+</mo><mi>α</mi><mi mathvariant=\"normal\">Δ</mi><mi>x</mi><mo>+</mo><mi>β</mi><mi mathvariant=\"normal\">Δ</mi><mi>y</mi><mi mathvariant=\"normal\">.</mi></mrow><annotation encoding=\"application/x-tex\">\\Delta z=f&#x27;_x(x_0,\\,y_0)\\Delta x + f&#x27;_y(x_0,\\,y_0)\\Delta y +\\alpha\\Delta x + \\beta\\Delta y.\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord\">Δ</span><span class=\"mord mathnormal\" style=\"margin-right:0.04398em;\">z</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.0519em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8019em;\"><span style=\"top:-2.453em;margin-left:-0.1076em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">x</span></span></span><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.247em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mord\">Δ</span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.185em;vertical-align:-0.3831em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8019em;\"><span style=\"top:-2.453em;margin-left:-0.1076em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03588em;\">y</span></span></span><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3831em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mord\">Δ</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7667em;vertical-align:-0.0833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.0037em;\">α</span><span class=\"mord\">Δ</span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05278em;\">β</span><span class=\"mord\">Δ</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mord\">.</span></span></span></span></span></p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>ρ</mi><mo>=</mo><msqrt><mrow><mo stretchy=\"false\">(</mo><mi mathvariant=\"normal\">Δ</mi><mi>x</mi><msup><mo stretchy=\"false\">)</mo><mn>2</mn></msup><mo>+</mo><mo stretchy=\"false\">(</mo><mi mathvariant=\"normal\">Δ</mi><mi>y</mi><msup><mo stretchy=\"false\">)</mo><mn>2</mn></msup></mrow></msqrt></mrow><annotation encoding=\"application/x-tex\">\\rho = \\sqrt{(\\Delta x)^2+(\\Delta y)^2}\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">ρ</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.24em;vertical-align:-0.2561em;\"></span><span class=\"mord sqrt\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.9839em;\"><span class=\"svg-align\" style=\"top:-3.2em;\"><span class=\"pstrut\" style=\"height:3.2em;\"></span><span class=\"mord\" style=\"padding-left:1em;\"><span class=\"mopen\">(</span><span class=\"mord\">Δ</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7401em;\"><span style=\"top:-2.989em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mopen\">(</span><span class=\"mord\">Δ</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7401em;\"><span style=\"top:-2.989em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span></span><span style=\"top:-2.9439em;\"><span class=\"pstrut\" style=\"height:3.2em;\"></span><span class=\"hide-tail\" style=\"min-width:1.02em;height:1.28em;\"><svg xmlns=\"http://www.w3.org/2000/svg\" width='400em' height='1.28em' viewBox='0 0 400000 1296' preserveAspectRatio='xMinYMin slice'><path d='M263,681c0.7,0,18,39.7,52,119\nc34,79.3,68.167,158.7,102.5,238c34.3,79.3,51.8,119.3,52.5,120\nc340,-704.7,510.7,-1060.3,512,-1067\nl0 -0\nc4.7,-7.3,11,-11,19,-11\nH40000v40H1012.3\ns-271.3,567,-271.3,567c-38.7,80.7,-84,175,-136,283c-52,108,-89.167,185.3,-111.5,232\nc-22.3,46.7,-33.8,70.3,-34.5,71c-4.7,4.7,-12.3,7,-23,7s-12,-1,-12,-1\ns-109,-253,-109,-253c-72.7,-168,-109.3,-252,-110,-252c-10.7,8,-22,16.7,-34,26\nc-22,17.3,-33.3,26,-34,26s-26,-26,-26,-26s76,-59,76,-59s76,-60,76,-60z\nM1001 80h400000v40h-400000z'/></svg></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2561em;\"><span></span></span></span></span></span></span></span></span></span></p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><munder><mrow><mi>lim</mi><mo>⁡</mo></mrow><mrow><mi>ρ</mi><mo>→</mo><mn>0</mn></mrow></munder><mfrac><mrow><mi>α</mi><mi mathvariant=\"normal\">Δ</mi><mi>x</mi><mo>+</mo><mi>β</mi><mi mathvariant=\"normal\">Δ</mi><mi>y</mi></mrow><mi>ρ</mi></mfrac><mo>=</mo><mn>0.</mn></mrow><annotation encoding=\"application/x-tex\">\\lim\\limits_{\\rho\\rightarrow0}\\frac{\\alpha\\Delta x + \\beta\\Delta y}{\\rho} =0.\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:2.2519em;vertical-align:-0.8804em;\"></span><span class=\"mop op-limits\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6944em;\"><span style=\"top:-2.3829em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">ρ</span><span class=\"mrel mtight\">→</span><span class=\"mord mtight\">0</span></span></span></span><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span><span class=\"mop\">lim</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8532em;\"><span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.3714em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">ρ</span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.0037em;\">α</span><span class=\"mord\">Δ</span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05278em;\">β</span><span class=\"mord\">Δ</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8804em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">0.</span></span></span></span></span></p>\n",
            "tags": [
                "Notes"
            ]
        },
        {
            "id": "https://evefortosaber.github.io/2022/09/07/zhaji/Note%20of%20markdown/",
            "url": "https://evefortosaber.github.io/2022/09/07/zhaji/Note%20of%20markdown/",
            "title": "Notes Of Markdown",
            "date_published": "2022-09-07T15:00:00.000Z",
            "content_html": "<p>为了搭建自己的 blog，clone 了个模板。现在也是时候该来学写 blog 了。 <s>（什么写 blog 还要学不是有手就行？？）</s></p>\n<hr />\n<h1 id=\"note-of-markdown\"><a class=\"anchor\" href=\"#note-of-markdown\">#</a> Note Of Markdown</h1>\n<hr />\n<h3 id=\"1-准备preparation\"><a class=\"anchor\" href=\"#1-准备preparation\">#</a> 1. 准备（Preparation）</h3>\n<ul>\n<li><strong>应用软件：Video Studio Code</strong></li>\n<li><strong>工作文件：makedown (后缀为 <code>.md</code> ）</strong></li>\n</ul>\n<hr />\n<h3 id=\"2-开始beginning\"><a class=\"anchor\" href=\"#2-开始beginning\">#</a> 2. 开始（Beginning）</h3>\n<ul>\n<li><strong>创建一个文本文档更改后缀为 <code>.md</code>  然后用 Visual Studio Code 打开，或者先打开 Visual Studio Code 然后新建一个后缀为 <code>.md</code>  的文件。</strong></li>\n<li><strong>打开侧边预览</strong></li>\n</ul>\n<pre><code>在view中打开 Command Palette 然后输入Open Preview to the Side\n</code></pre>\n<hr />\n<h3 id=\"3语法grammar\"><a class=\"anchor\" href=\"#3语法grammar\">#</a> 3. 语法（Grammar）</h3>\n<h5 id=\"标题title\"><a class=\"anchor\" href=\"#标题title\">#</a> 标题（Title)</h5>\n<ol>\n<li>标题可分为一到六级分别用 #、##、###...... 以此类推<br />\n其中 #表示的最大，###### 最小。语法如下：</li>\n</ol>\n<pre><code># 标题1\n## 标题2\n### 标题3\n...\n</code></pre>\n<ol start=\"2\">\n<li>换行直接回车</li>\n<li>字体\n<ul>\n<li><code>*内容*</code>  为斜体</li>\n<li><code>**内容**</code>  为加粗</li>\n<li><code>***内容***</code>  为粗斜体</li>\n<li><code>~~内容~~</code>  为删除线<br />\n表现：<em>内容</em>、<strong>内容</strong>、<em><strong>内容</strong></em>、<s>内容</s></li>\n</ul>\n</li>\n</ol>\n<h3 id=\"4插入insert\"><a class=\"anchor\" href=\"#4插入insert\">#</a> 4. 插入 (Insert)</h3>\n<ol>\n<li>\n<p>插入图片</p>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>![图片名称](图片链接 'Alt')</pre></td></tr></table></figure></li>\n<li>\n<p>插入链接</p>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token url\">[<span class=\"token content\">内容</span>](<span class=\"token url\">链接</span>)</span></pre></td></tr></table></figure></li>\n<li>\n<p>混合使用</p>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>[![图片名称](图片链接 'Alt')](链接)</pre></td></tr></table></figure><p>这样就对图片添加了超链接。</p>\n</li>\n</ol>\n<h3 id=\"5其他\"><a class=\"anchor\" href=\"#5其他\">#</a> 5. 其他</h3>\n<ul>\n<li>\n<p>工具</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly90eXBvcmFpby5jbi8=\">Typro</span></p>\n</li>\n<li>\n<p>更多语法参照<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS9odG1sL2h0bWwtdHV0b3JpYWwuaHRtbA==\"> HTML</span></p>\n</li>\n</ul>\n<h3 id=\"6希腊字母\"><a class=\"anchor\" href=\"#6希腊字母\">#</a> 6. 希腊字母</h3>\n<p><img data-src=\"https://pic1.zhimg.com/v2-e006224a3066540d792b5ecb950aab50_r.jpg\" alt=\"xilazimu\" /></p>\n",
            "tags": [
                "Notes"
            ]
        }
    ]
}