{
    "version": "https://jsonfeed.org/version/1",
    "title": "流云阁 • All posts by \"notes\" tag",
    "description": "",
    "home_page_url": "https://evefortosaber.github.io",
    "items": [
        {
            "id": "https://evefortosaber.github.io/2023/03/19/Mathematics/%E9%94%99%E9%A2%98%E6%9C%AC/",
            "url": "https://evefortosaber.github.io/2023/03/19/Mathematics/%E9%94%99%E9%A2%98%E6%9C%AC/",
            "title": "错题本",
            "date_published": "2023-03-19T11:29:17.421Z",
            "content_html": "<h1 id=\"数学错题\"><a class=\"anchor\" href=\"#数学错题\">#</a> 数学错题</h1>\n<h2 id=\"高数\"><a class=\"anchor\" href=\"#高数\">#</a> 高数</h2>\n<p><img data-src=\"https://raw.githubusercontent.com/EveFortosaber/Open-pictures/main/00_5-1663714277821.png\" alt=\"5\" /></p>\n<p><img data-src=\"https://raw.githubusercontent.com/EveFortosaber/Open-pictures/main/00_6-1663714314009.png\" alt=\"6\" /></p>\n<p><img data-src=\"https://raw.githubusercontent.com/EveFortosaber/Open-pictures/main/00_7-1663714323364.png\" alt=\"7\" /></p>\n<p><img data-src=\"https://raw.githubusercontent.com/EveFortosaber/Open-pictures/main/00_8-1663714341842.png\" alt=\"8\" /></p>\n<p><img data-src=\"https://raw.githubusercontent.com/EveFortosaber/Open-pictures/main/01_9-1663714386623.png\" alt=\"9\" /></p>\n<p><img data-src=\"https://raw.githubusercontent.com/EveFortosaber/Open-pictures/main/01_10-1663714362855.png\" alt=\"10\" /></p>\n",
            "tags": [
                "Notes"
            ]
        },
        {
            "id": "https://evefortosaber.github.io/2023/03/19/Mathematics/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6(%E4%B8%8B)/",
            "url": "https://evefortosaber.github.io/2023/03/19/Mathematics/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6(%E4%B8%8B)/",
            "title": "高等数学(下)",
            "date_published": "2023-03-19T11:29:17.421Z",
            "content_html": "<p>关于高等数学下册的一些笔记</p>\n<hr />\n<h4 id=\"向量的方向角和方向余弦\"><a class=\"anchor\" href=\"#向量的方向角和方向余弦\">#</a> 向量的方向角和方向余弦</h4>\n<p><img data-src=\"https://pic3.zhimg.com/80/v2-372cbaa699e447996d4c6d27ebbc4f2a_1440w.webp\" alt=\"向量的方向角和方向余弦\" /></p>\n<h4 id=\"向量叉乘\"><a class=\"anchor\" href=\"#向量叉乘\">#</a> 向量叉乘</h4>\n<blockquote>\n<p>在三维几何中，向量 a 和向量 b 的叉乘结果是一个向量，该向量垂直于 a 和 b 向量构成的平面，该向量也被称作法向量</p>\n</blockquote>\n<p><img data-src=\"https://sunocean.life/blog/assets/images/201205-3d-linear-algebra/20160902232814429.jpg\" alt=\"矢量叉乘 - 小时百科\" /></p>\n<p>右手螺旋定则，手指指向左元。</p>\n<h5 id=\"叉乘公式\"><a class=\"anchor\" href=\"#叉乘公式\">#</a> 叉乘公式</h5>\n<p><em>--- 行列式的展开</em></p>\n<p><img data-src=\"https://img-my.csdn.net/uploads/201704/19/1492585617_5108.png\" alt=\"img\" /></p>\n<p><img data-src=\"https://pics3.baidu.com/feed/38dbb6fd5266d0166e8615243bd8d80d34fa3518.png@f_auto?token=ebf017fb7eacd318da1313abf2fc6484\" alt=\"img\" /></p>\n<h4 id=\"平面方程\"><a class=\"anchor\" href=\"#平面方程\">#</a> 平面方程</h4>\n<p><em>表达式</em></p>\n<ul>\n<li>\n<p>截距式</p>\n<p><strong>x/a+y/b+z/c=1</strong> 它与三坐标轴的交点分别为<em> P (a, 0, 0), Q (0, b, 0), R (0, 0, c)</em></p>\n</li>\n<li>\n<p>点法式</p>\n<p><strong>A(x-x0)+B(y-y0)+C(z-z0)=0</strong> 法向量为<strong> n</strong>=(A,B,C)</p>\n</li>\n<li>\n<p>一般式</p>\n<p><strong>Ax+By+Cz+D=0</strong> 基本与点法式相同</p>\n</li>\n</ul>\n<blockquote>\n<p>可用平面上两条相交的直线的方向向量做点乘从而求出<em>平面法向量</em></p>\n</blockquote>\n<h4 id=\"空间直线\"><a class=\"anchor\" href=\"#空间直线\">#</a> 空间直线</h4>\n<h5 id=\"空间直线方程\"><a class=\"anchor\" href=\"#空间直线方程\">#</a> 空间直线方程</h5>\n<ul>\n<li>两平面联立</li>\n<li>对称式，由方向向量和直线上一点确定</li>\n<li>参数式 // 可由对称式导出</li>\n</ul>\n<p>&lt;u&gt; 详情戳<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTc1MDk3Mi9hcnRpY2xlL2RldGFpbHMvMTIxMTcyNzkz\">链接</span> &lt;/u&gt;</p>\n<h4 id=\"空间曲面\"><a class=\"anchor\" href=\"#空间曲面\">#</a> 空间曲面</h4>\n<h5 id=\"切面\"><a class=\"anchor\" href=\"#切面\">#</a> 切面</h5>\n<p><img data-src=\"https://picx.zhimg.com/v2-1a3899e4a5ec22962d64505ccd86dd29_720w.jpg?source=d16d100b\" alt=\"img\" /></p>\n",
            "tags": [
                "Notes"
            ]
        },
        {
            "id": "https://evefortosaber.github.io/2023/03/19/Mathematics/%E6%95%B0%E5%AD%A6%E7%AC%94%E8%AE%B0%E4%B8%80/",
            "url": "https://evefortosaber.github.io/2023/03/19/Mathematics/%E6%95%B0%E5%AD%A6%E7%AC%94%E8%AE%B0%E4%B8%80/",
            "title": "高等数学笔记一",
            "date_published": "2023-03-19T11:29:17.406Z",
            "content_html": "<h1 id=\"高等数学一\"><a class=\"anchor\" href=\"#高等数学一\">#</a> 高等数学・一</h1>\n<hr />\n<p>学习时做的一些笔记，顺便对内容梳理一遍。^0</p>\n<hr />\n<h2 id=\"第一章-函数与极限\"><a class=\"anchor\" href=\"#第一章-函数与极限\">#</a> 第一章 函数与极限</h2>\n<hr />\n<h3 id=\"第一节-映射与函数\"><a class=\"anchor\" href=\"#第一节-映射与函数\">#</a> 第一节 映射与函数</h3>\n<ul>\n<li>\n<p><strong>映射</strong></p>\n<blockquote>\n<p>与 x 所对应的 y 称为 x 在映射 f 下的象。<br />\nx 称为 y 在 f 下的原象。</p>\n</blockquote>\n<blockquote>\n<p><strong>满射、一一映射、单射、双射</strong></p>\n<p>A 映射得到的 B 集合等于映射的目标集合则是满射。</p>\n<p>对每个 y 都有唯一一个 x 对应，则是<strong>单射</strong>或称<strong>一一映射</strong>。</p>\n<p>若 f 既是满射又是单射则称为<strong>双射</strong>。</p>\n</blockquote>\n</li>\n<li>\n<p><strong>函数定义与表示方法</strong></p>\n<ul>\n<li>\n<p>特殊函数</p>\n<ul>\n<li>\n<p>狄利克雷函数</p>\n<blockquote>\n<p><img data-src=\"https://raw.githubusercontent.com/EveFortosaber/Open-pictures/main/00_2.png\" alt=\"00_2\" title=\"狄利克雷函数\" /></p>\n<p>狄利克雷函数是一个定义在实数范围上、值域不连续的函数。狄利克雷函数的图像以 Y 轴为对称轴，是一个偶函数，它处处不连续，处处极限不存在，不可黎曼积分。这是一个处处不连续的可测函数。</p>\n</blockquote>\n</li>\n<li>\n<p>符号函数</p>\n<blockquote>\n<p><img data-src=\"https://raw.githubusercontent.com/EveFortosaber/Open-pictures/main/00_3-1663132097343.png\" alt=\"00_3\" title=\"符号函数\" /></p>\n</blockquote>\n</li>\n<li>\n<p>取整函数</p>\n<blockquote>\n<p><img data-src=\"raw.githubusercontent.com/EveFortosaber/Open-pictures/main/image-20220914131129520.png\" alt=\"image-20220914131129520\" /></p>\n<p>函数 y=[x] 称为取整函数，也称<span class=\"exturl\" data-url=\"aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS8lRTklQUIlOTglRTYlOTYlQUYlRTUlODclQkQlRTYlOTUlQjAvMjY3MDk1MT9mcm9tTW9kdWxlPWxlbW1hX2lubGluaw==\">高斯函数</span>。其中不超过实数 x 的最大整数称为 x 的整数部分，记作 [x]。该函数被广泛应用于<span class=\"exturl\" data-url=\"aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS8lRTYlOTUlQjAlRTglQUUlQkEvMzcwMD9mcm9tTW9kdWxlPWxlbW1hX2lubGluaw==\">数论</span>，函数绘图和计算机领域。</p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li>\n<p>函数的有界性</p>\n<blockquote>\n<p>函数 f (x) 在 D 上有界的充要条件是 f (x) 在 D 上既有上界又有下界。</p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li>\n<p><strong>函数的单调性</strong></p>\n<ul>\n<li>单调增 (减) 函数</li>\n<li>严格单调增 (减) 函数</li>\n</ul>\n</li>\n<li>\n<p><strong>函数的四则运算</strong></p>\n</li>\n<li>\n<p><strong>复合函数</strong></p>\n<blockquote>\n<p>形如： <strong>f(g(u(x)))</strong> 或 <strong>f</strong> o <strong>g</strong> o <strong>u</strong></p>\n</blockquote>\n</li>\n<li>\n<p><strong>反函数</strong></p>\n<blockquote>\n<p>反函数的单调性基本归纳于 <strong>先外后内，同增异减</strong>。</p>\n</blockquote>\n</li>\n<li>\n<p><strong>初等函数</strong></p>\n<blockquote>\n<p>初等函数是由<strong>幂函数（power function）、指数函数（exponential function）、对数函数（logarithmic function）、三角函数（trigonometric function）、反三角函数（inverse trigonometric function</strong> 与常数经过有限次的有理运算（加、减、乘、除、有理数次乘方、有理数次开方）及有限次函数复合所产生，并且能用一个解析式表示的函数。</p>\n</blockquote>\n</li>\n</ul>\n<hr />\n<h3 id=\"第二节-数列的极限\"><a class=\"anchor\" href=\"#第二节-数列的极限\">#</a> 第二节 数列的极限</h3>\n<ul>\n<li>\n<p><strong>邻域</strong></p>\n<ul>\n<li>邻域</li>\n<li>去心邻域</li>\n<li>左 (右) 邻域</li>\n</ul>\n</li>\n<li>\n<p><strong>数列基本概念</strong></p>\n<ul>\n<li>\n<p>有限 or 无限</p>\n</li>\n<li>\n<p>通项公式</p>\n</li>\n<li>\n<p>整标函数</p>\n</li>\n<li>\n<p>子数列</p>\n</li>\n<li>\n<p>单调性</p>\n<blockquote>\n<p>作差或作商求单调性。有时候利用数列的单调性可能会得到惊喜的解题方式。</p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS8lRTYlOTUlQjAlRTUlODglOTclRTYlOUUlODElRTklOTklOTA/ZnJvbU1vZHVsZT1sZW1tYV9zZWFyY2gtYm94\">数列极限</span></p>\n</li>\n<li>\n<p><strong>收敛数列与数列的有界性</strong></p>\n<blockquote>\n<p><strong>tip：数列收敛一定有界，数列有界不一定收敛</strong></p>\n</blockquote>\n<ul>\n<li>极限唯一性 &amp; 有界性 &amp; 保号性</li>\n</ul>\n</li>\n<li>\n<p>极限四则运算法则（严格意义上要分别证明数列的与函数的）</p>\n</li>\n</ul>\n<hr />\n<h3 id=\"第三节-函数的极限\"><a class=\"anchor\" href=\"#第三节-函数的极限\">#</a> 第三节 函数的极限</h3>\n<ul>\n<li>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS8lRTUlODclQkQlRTYlOTUlQjAlRTYlOUUlODElRTklOTklOTAvNzI3MDgz\">函数极限</span><img data-src=\"https://raw.githubusercontent.com/EveFortosaber/Open-pictures/main/00_1.png\" alt=\"00_1\" /></p>\n<blockquote>\n<p>函数某点极限存在的充要条件是左右极限都存在且相等。</p>\n</blockquote>\n</li>\n<li>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS8lRTYlQjUlQjclRTYlQjYlODUlRTUlQUUlOUElRTclOTAlODY/ZnJvbU1vZHVsZT1sZW1tYV9zZWFyY2gtYm94\">海涅 (Heine) 定理</span></p>\n</li>\n<li>\n<p>求函数极限</p>\n<ul>\n<li>简单的有限次函数，如果最高次项系数相等比较最高次项系数，如果不等，次数高的为高阶无穷大量。</li>\n<li>妙用，分子有理化，分母有理化。</li>\n<li>通分消去。</li>\n<li>立方差、因式分解。</li>\n<li>裂项等将无穷项收缩的方法。</li>\n<li>......</li>\n</ul>\n</li>\n<li>\n<p>复合函数极限</p>\n</li>\n</ul>\n<hr />\n<h3 id=\"第四节-函数的连续性\"><a class=\"anchor\" href=\"#第四节-函数的连续性\">#</a> 第四节 函数的连续性</h3>\n<ul>\n<li>\n<p>连续性概念</p>\n<blockquote>\n<p>由极限的性质可知，一个函数在某点连续的充要条件是它在该点左右都连续。</p>\n</blockquote>\n</li>\n<li>\n<p>间断点分类</p>\n</li>\n</ul>\n",
            "tags": [
                "Notes"
            ]
        },
        {
            "id": "https://evefortosaber.github.io/2023/03/19/Mathematics/%E6%95%B0%E5%AD%A6%E7%AC%94%E8%AE%B0%E4%BA%8C/",
            "url": "https://evefortosaber.github.io/2023/03/19/Mathematics/%E6%95%B0%E5%AD%A6%E7%AC%94%E8%AE%B0%E4%BA%8C/",
            "title": "数学笔记二",
            "date_published": "2023-03-19T11:29:17.406Z",
            "content_html": "<h1 id=\"数学笔记二\"><a class=\"anchor\" href=\"#数学笔记二\">#</a> 数学笔记・二</h1>\n<h3 id=\"第四节-函数的连续性承第一章函数与极限\"><a class=\"anchor\" href=\"#第四节-函数的连续性承第一章函数与极限\">#</a> 第四节 函数的连续性（承第一章函数与极限）</h3>\n<ul>\n<li>\n<p>连续性概念</p>\n<blockquote>\n<p>由极限的性质可知，一个函数在某点连续的充要条件是它在该点左右都连续。</p>\n</blockquote>\n</li>\n<li>\n<p>间断点分类</p>\n<ul>\n<li>\n<p><strong>第一类间断点</strong></p>\n<blockquote>\n<p><strong><span class=\"exturl\" data-url=\"aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS8lRTUlOEYlQUYlRTUlOEUlQkIlRTklOTclQjQlRTYlOTYlQUQlRTclODIlQjk/ZnJvbU1vZHVsZT1sZW1tYV9pbmxpbms=\">可去间断点</span></strong>：函数在该点左极限、右极限存在且相等，但不等于该点函数值或函数在该点无定义。如函数 y=（x^2-1)/(x-1) 在点 x=1 处。</p>\n<p><strong><span class=\"exturl\" data-url=\"aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS8lRTglQjclQjMlRTglQjclODMlRTklOTclQjQlRTYlOTYlQUQlRTclODIlQjk/ZnJvbU1vZHVsZT1sZW1tYV9pbmxpbms=\">跳跃间断点</span></strong>：函数在该点左极限、右极限存在，但不相等。如函数 y=|x|/x 在点 x=0 处。</p>\n</blockquote>\n</li>\n<li>\n<p><strong>第二类间断点</strong></p>\n<blockquote>\n<p><a href=\"https://baike.baidu.com/item/%E6%97%A0%E7%A9%B7%E9%97%B4%E6%96%AD%E7%82%B9/3531630?fromModule=lemma_inlink\"><strong>无穷间断点</strong></a>：函数在该点可以无定义，且左极限、右极限至少有一个不存在，且函数在该点极限为∞。如函数 y=tanx 在点 x=π/2 处。</p>\n<p><strong><span class=\"exturl\" data-url=\"aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS8lRTYlOEMlQUYlRTglOEQlQTElRTklOTclQjQlRTYlOTYlQUQlRTclODIlQjk/ZnJvbU1vZHVsZT1sZW1tYV9pbmxpbms=\">振荡间断点</span></strong>：函数在该点可以无定义，当自变量趋于该点时，函数值在两个常数间变动无限多次。如函数 y=sin (1/x) 在 x=0 处。</p>\n</blockquote>\n</li>\n<li>\n<p>由上述对各种间断点的描述可知，<strong>函数 f (x) 在第一类间断点的左右极限都存在，而函数 f (x) 在第二类间断点的左右极限至少有一个不存在</strong>，这也是第一类间断点和第二类间断点的本质上的区别。</p>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"第五节\"><a class=\"anchor\" href=\"#第五节\">#</a> 第五节</h3>\n<ul>\n<li>\n<p>迫敛准则</p>\n<p>主要是放缩，抓住可合成量（如 N 个 1 求和为 n*(n+1)/2），和高阶量不变原则</p>\n</li>\n<li>\n<p><strong>单调有界准则</strong></p>\n<p>单调有界数列必有极限。用于证明收敛很有用。</p>\n<p>求极限时可以<strong>先假设存在</strong>。方便计算。<s>（避免求数列通项）</s></p>\n</li>\n<li>\n<p><strong>两个重要极限</strong></p>\n<p><img data-src=\"https://raw.githubusercontent.com/EveFortosaber/Open-pictures/main/image-20220921223539147.png\" alt=\"image-20220921223539147\" /></p>\n<blockquote>\n<p>第二个很重要，第一个可以直接看成等价无穷小。</p>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"第六节\"><a class=\"anchor\" href=\"#第六节\">#</a> 第六节</h3>\n<ul>\n<li>\n<p><strong>无穷小量</strong></p>\n<blockquote>\n<p>确切地说，当自变量 x 无限接近 x&lt;sub&gt;0&lt;/sub&gt;（或 x 的绝对值无限增大）时，函数值 f (x) 与 0 无限接近，即 f (x)→0 (或 f (x)=0)，则称 f (x) 为当 x→x&lt;sub&gt;0&lt;/sub&gt;(或 x→∞) 时的无穷小量。</p>\n</blockquote>\n</li>\n<li>\n<p><strong>等阶无穷小量</strong></p>\n<p>即两个无穷小量坐商得常数时。</p>\n</li>\n<li>\n<p><strong>等价无穷小量</strong></p>\n<p>即两个无穷小量坐商得 1。等价无穷小量可互换。</p>\n</li>\n<li>\n<p><strong>常见等价无穷小量</strong></p>\n<p><img data-src=\"https://pica.zhimg.com/v2-f20a929bed77e97c61a9f83de9b4b5a4_r.jpg?source=1940ef5c\" alt=\"aa\" title=\"等价无穷小\" /></p>\n</li>\n</ul>\n<hr />\n<p><em>关于我突然变水的原因</em>：</p>\n<p>实在是比较忙，各项内容也越来越复杂，所以就择取主要的知识点并舍去证明。</p>\n<p><em>以上。</em></p>\n<h2 id=\"第二章\"><a class=\"anchor\" href=\"#第二章\">#</a> 第二章</h2>\n<h3 id=\"导数\"><a class=\"anchor\" href=\"#导数\">#</a> 导数</h3>\n<ul>\n<li>\n<p>导数定义</p>\n<blockquote>\n<p>函数可导一定连续，函数连续不一定可导。</p>\n</blockquote>\n</li>\n<li>\n<p>求导法则</p>\n<p>注意除法，反函数，隐函数求导法则。</p>\n<blockquote>\n<p>掌握反代的思想，掌握对数求导法。</p>\n</blockquote>\n</li>\n<li>\n<p>含参求导</p>\n<p>一阶导可直接求二阶导可能需要反代。</p>\n</li>\n</ul>\n<blockquote>\n<p>注意导数与微分的关系，如何二阶导隐函数。以及推导方法。</p>\n</blockquote>\n<ul>\n<li>\n<p>断点处的导数求解，在有定义时使用求导法。</p>\n<p>在无定义时，使用定义法。(求极限)</p>\n</li>\n<li>\n<p>高阶函数求导注意规律，和复合函数的导</p>\n</li>\n</ul>\n<h3 id=\"微分\"><a class=\"anchor\" href=\"#微分\">#</a> 微分</h3>\n<ul>\n<li>\n<p>一元函数，可导则可微</p>\n</li>\n<li>\n<p>微分常数 A，与极限有关</p>\n</li>\n<li>\n<p>微分运算类似求导法则</p>\n</li>\n<li>\n<p>微分近似运算</p>\n<p>f(x)=f(x0)+f'(x0)(x-x0)</p>\n<blockquote>\n<p>为了计算 f (x)，可找一个邻近于 x 的 x0，只要 f (x) 和 f'(x) 容易计算，就可以利用这个公式计算 f (x) 的近似值。</p>\n</blockquote>\n</li>\n</ul>\n<p><img data-src=\"https://raw.githubusercontent.com/EveFortosaber/Open-pictures/main/%E5%BE%AE%E5%88%86%E8%BF%91%E4%BC%BC%E8%AE%A1%E7%AE%97.jpg\" alt=\"微分\" /></p>\n<h2 id=\"第三章\"><a class=\"anchor\" href=\"#第三章\">#</a> 第三章</h2>\n<h3 id=\"微分中值定理\"><a class=\"anchor\" href=\"#微分中值定理\">#</a> 微分中值定理</h3>\n<ul>\n<li>\n<p>费马引理</p>\n<p><img data-src=\"https://raw.githubusercontent.com/EveFortosaber/Open-pictures/main/%E8%B4%B9%E9%A9%AC%E5%BC%95%E7%90%86.jpg\" alt=\"费马引理\" /></p>\n</li>\n<li>\n<p>罗尔中值定理</p>\n<p><img data-src=\"https://raw.githubusercontent.com/EveFortosaber/Open-pictures/main/%E7%BD%97%E5%B0%94%E4%B8%AD%E5%80%BC%E5%AE%9A%E7%90%86.jpg\" alt=\"罗尔中值定理\" /></p>\n</li>\n<li>\n<p>拉格朗日中值定理</p>\n<p><img data-src=\"https://raw.githubusercontent.com/EveFortosaber/Open-pictures/main/%E6%8B%89%E6%A0%BC%E6%9C%97%E6%97%A5%E4%B8%AD%E5%80%BC%E5%AE%9A%E7%90%86.jpg\" alt=\"拉格朗日中值定理\" /></p>\n</li>\n<li>\n<p>柯西中值定理</p>\n<p><img data-src=\"https://raw.githubusercontent.com/EveFortosaber/Open-pictures/main/%E6%9F%AF%E8%A5%BF%E4%B8%AD%E5%80%BC%E5%AE%9A%E7%90%86.jpg\" alt=\"柯西中值定理\" /></p>\n</li>\n</ul>\n<p>洛必达法则</p>\n<p>泰勒公式</p>\n<p>麦克劳林公式</p>\n<ul>\n<li>\n<p>佩亚诺余项</p>\n<p>高阶无穷小</p>\n</li>\n<li>\n<p>拉格朗日余项</p>\n<p>中值 -- 定量分析</p>\n</li>\n</ul>\n<p>函数的凹凸性</p>\n<h2 id=\"第四章\"><a class=\"anchor\" href=\"#第四章\">#</a> 第四章</h2>\n<h4 id=\"不定积分\"><a class=\"anchor\" href=\"#不定积分\">#</a> 不定积分</h4>\n<h5 id=\"换元积分\"><a class=\"anchor\" href=\"#换元积分\">#</a> 换元积分</h5>\n<h5 id=\"分部积分\"><a class=\"anchor\" href=\"#分部积分\">#</a> 分部积分</h5>\n<blockquote>\n<p>凑微分，低次换元，三角换元，二次换元，重复型</p>\n</blockquote>\n<h5 id=\"积分表\"><a class=\"anchor\" href=\"#积分表\">#</a> 积分表</h5>\n<p><img data-src=\"https://raw.githubusercontent.com/EveFortosaber/Open-pictures/main/%E7%A7%AF%E5%88%86%E8%A1%A8.jpg\" alt=\"积分表\" /></p>\n<h5 id=\"有理函数的不定积分\"><a class=\"anchor\" href=\"#有理函数的不定积分\">#</a> 有理函数的不定积分</h5>\n<p>待定系数法</p>\n<ul>\n<li>\n<p>万能公式</p>\n<p><img data-src=\"https://raw.githubusercontent.com/EveFortosaber/Open-pictures/main/%E4%B8%87%E8%83%BD%E5%85%AC%E5%BC%8F.jpg\" alt=\"万能公式\" /></p>\n</li>\n</ul>\n<h4 id=\"定积分\"><a class=\"anchor\" href=\"#定积分\">#</a> 定积分</h4>\n<h5 id=\"定积分概念求无穷项和的极限\"><a class=\"anchor\" href=\"#定积分概念求无穷项和的极限\">#</a> 定积分概念求无穷项和的极限</h5>\n<p><img data-src=\"https://raw.githubusercontent.com/EveFortosaber/Open-pictures/main/%E5%AE%9A%E7%A7%AF%E5%88%86%E6%A6%82%E5%BF%B5.jpg\" alt=\"定积分概念\" /></p>\n<h5 id=\"估值定理\"><a class=\"anchor\" href=\"#估值定理\">#</a> 估值定理</h5>\n<p>区间内的 Max 与 Min 乘以区间长度得到限定区间。</p>\n<h5 id=\"积分中值定理\"><a class=\"anchor\" href=\"#积分中值定理\">#</a> 积分中值定理</h5>\n<p><img data-src=\"https://raw.githubusercontent.com/EveFortosaber/Open-pictures/main/%E7%A7%AF%E5%88%86%E4%B8%AD%E5%80%BC%E5%AE%9A%E7%90%86.jpg\" alt=\"积分中值定理\" /></p>\n<p>求积分函数极限时用到，由介值定理推得</p>\n<h5 id=\"几何意义\"><a class=\"anchor\" href=\"#几何意义\">#</a> 几何意义</h5>\n<h5 id=\"牛顿莱布尼茨公式\"><a class=\"anchor\" href=\"#牛顿莱布尼茨公式\">#</a> 牛顿莱布尼茨公式</h5>\n<h5 id=\"微积分学基本定理\"><a class=\"anchor\" href=\"#微积分学基本定理\">#</a> 微积分学基本定理</h5>\n<p>连续函数必存在原函数</p>\n<h5 id=\"平面曲线的弧长与曲率\"><a class=\"anchor\" href=\"#平面曲线的弧长与曲率\">#</a> 平面曲线的弧长与曲率</h5>\n<ul>\n<li><img data-src=\"https://raw.githubusercontent.com/EveFortosaber/Open-pictures/main/1%E5%BC%A7%E9%95%BF%E5%85%AC%E5%BC%8F.png\" alt=\"1弧长公式\" /></li>\n<li><img data-src=\"https://raw.githubusercontent.com/EveFortosaber/Open-pictures/main/2%E5%BC%A7%E9%95%BF%E5%85%AC%E5%BC%8F.png\" alt=\"2\" /></li>\n<li><img data-src=\"https://raw.githubusercontent.com/EveFortosaber/Open-pictures/main/3%E5%BC%A7%E9%95%BF%E5%85%AC%E5%BC%8F.png\" alt=\"3\" /></li>\n</ul>\n<h5 id=\"极坐标系\"><a class=\"anchor\" href=\"#极坐标系\">#</a> 极坐标系</h5>\n<p><em><strong>x=pcosa,y=psina;</strong></em></p>\n<h5 id=\"平面曲线的曲率\"><a class=\"anchor\" href=\"#平面曲线的曲率\">#</a> 平面曲线的曲率</h5>\n<h5 id=\"曲率圆\"><a class=\"anchor\" href=\"#曲率圆\">#</a> 曲率圆</h5>\n<h5 id=\"定积分的几何应用\"><a class=\"anchor\" href=\"#定积分的几何应用\">#</a> 定积分的几何应用</h5>\n<h5 id=\"连续函数的平均值\"><a class=\"anchor\" href=\"#连续函数的平均值\">#</a> 连续函数的平均值</h5>\n<h5 id=\"定积分在物理学与经济学\"><a class=\"anchor\" href=\"#定积分在物理学与经济学\">#</a> 定积分在物理学与经济学</h5>\n<ul>\n<li>\n<p>变力做功</p>\n</li>\n<li>\n<p>引力问题</p>\n</li>\n<li>\n<p>液体侧面压力</p>\n</li>\n</ul>\n<h5 id=\"反常积分\"><a class=\"anchor\" href=\"#反常积分\">#</a> 反常积分</h5>\n",
            "tags": [
                "Notes"
            ]
        },
        {
            "id": "https://evefortosaber.github.io/2023/03/19/ComputerScience/ProgramDesignNotes/%E7%B4%A0%E6%95%B0%E7%8E%AF%E9%97%AE%E9%A2%98/",
            "url": "https://evefortosaber.github.io/2023/03/19/ComputerScience/ProgramDesignNotes/%E7%B4%A0%E6%95%B0%E7%8E%AF%E9%97%AE%E9%A2%98/",
            "title": "素数环问题",
            "date_published": "2023-03-19T11:29:17.362Z",
            "content_html": "<p><img data-src=\"https://raw.githubusercontent.com/EveFortosaber/Open-pictures/main/picgo/1267999.jpg\" alt=\"1267999\" /></p>\n<p>素数环问题</p>\n<blockquote>\n<p><strong>Problem Description</strong></p>\n<p>A ring is compose of n circles as shown in diagram. Put natural number 1, 2, ..., n into each circle separately, and the sum of numbers in two adjacent circles should be a prime.</p>\n<p>Note: the number of first circle should always be 1.</p>\n<hr />\n<p><strong>Input</strong></p>\n<p>n (0 &lt; n &lt; 20).</p>\n<hr />\n<p><strong>Output</strong></p>\n<p>The output format is shown as sample below. Each row represents a series of circle numbers in the ring beginning from 1 clockwisely and anticlockwisely. The order of numbers must satisfy the above requirements. Print solutions in lexicographical order.</p>\n<hr />\n<p>You are to write a program that completes above process.</p>\n<p>&lt;u&gt;<strong>Print a blank line after each case.</strong>&lt;/u&gt;</p>\n</blockquote>\n<p>解题思路：</p>\n<p>代码如下：</p>\n<pre><code class=\"language-c++\">#include &lt;iostream&gt;\n#include &lt;stack&gt;\n#include&lt;math.h&gt; \n#include&lt;string.h&gt;\nusing namespace std;\n/*\n从2开始到sqrt(num)，逐一判断\n*/\nint n;\nint arry[27]&#123;1&#125;,flag[27]&#123;0&#125;;\nstack&lt;int&gt; s1, s2;\n\nbool isPrime_2(int num)\n&#123;\n    if (num == 1 || num == 4)\n        return 0;\n    if (num == 2 || num == 3)\n        return 1;\n    int temp = sqrt(num);\n    for (int i = 2; i &lt;= temp; i++)\n    &#123;\n        if (num % i == 0)\n            return 0;\n    &#125;\n    return 1;\n&#125;\n\n\nvoid dfs(int k)\n&#123;\n    if(k==n&amp;&amp;isPrime_2(arry[0]+arry[n-1])) //如果递归到下标n并且满足条件就找到一组正确的数据了\n    &#123;\n        for(int i=0;i&lt;n-1;i++)\n        cout&lt;&lt;arry[i]&lt;&lt;&quot; &quot;;\n        cout&lt;&lt;arry[n-1]&lt;&lt;endl;\n    &#125;\n    else\n    &#123;\n        for(int i=2;i&lt;=n;i++)\n        if(flag[i]==0&amp;&amp;isPrime_2(arry[k-1]+i)) //如果i没有使用过，并且a[k-1]和i相加为素数\n        &#123;\n            arry[k]=i;     //记录下标的值\n            flag[i]=1; //标记为使用过的\n            dfs(k+1);  //开始下一个下标的计算\n            flag[i]=0;//清除标记\n        &#125;\n    &#125;\n&#125;\n\nint main()\n&#123;\n    int i=0;\n    while (cin &gt;&gt; n)\n    &#123;\n        i++;\n        memset(flag,0,sizeof(flag));\n        for (int k = 0; k &lt; n; k++)\n            arry[k] = 1;\n        cout&lt;&lt;&quot;Case &quot;&lt;&lt;i&lt;&lt;':'&lt;&lt;endl;\n        flag[0]=1;\n        dfs(1);\n        cout&lt;&lt;endl;\n        \n\n    &#125;\n&#125;\n</code></pre>\n<p>结语：</p>\n<p>参考资料：</p>\n<blockquote>\n<p>[源码借鉴 From 简书]( <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuamlhbnNodS5jb20vcC85MThiZWM3MzJiN2Q=\">DFS (素数环) - 简书 (jianshu.com)</span>)，</p>\n</blockquote>\n",
            "tags": [
                "Notes",
                "C++"
            ]
        },
        {
            "id": "https://evefortosaber.github.io/2023/03/19/ComputerScience/ProgramDesignNotes/%E5%A4%9A%E5%A4%9A%E6%9E%9C%E5%AD%90%E9%97%AE%E9%A2%98/",
            "url": "https://evefortosaber.github.io/2023/03/19/ComputerScience/ProgramDesignNotes/%E5%A4%9A%E5%A4%9A%E6%9E%9C%E5%AD%90%E9%97%AE%E9%A2%98/",
            "title": "多多果子问题二叉堆与优先序列",
            "date_published": "2023-03-19T11:29:17.362Z",
            "content_html": "<p><img data-src=\"https://s2.loli.net/2023/03/16/No51BErYemDLZpQ.jpg\" alt=\"37\" /></p>\n<h4 id=\"问题描述\"><a class=\"anchor\" href=\"#问题描述\">#</a> 问题描述：</h4>\n<blockquote>\n<p>在一个果园里，多多已经将所有的果子打了下来，而且按果子的不同种类分成了不同的堆。多多决定把所有的果子合成一堆。每一次合并，多多可以把两堆果子合并到一起，消耗的体力等于两堆果子的重量之和。可以看出，所有的果子经过 n-1 次合并之后，就只剩下一堆了。多多在合并果子时总共消耗的体力等于每次合并所耗体力之和。</p>\n<p>因为还要花大力气把这些果子搬回家，所以多多在合并果子时要尽可能地节省体力。假定每个果子重量都为 1，并且已知果子的种类数和每种果子的数目，你的任务是设计出合并的次序方案，使多多耗费的体力最少，并输出这个最小的体力耗费值。<br />\n　　例如有 3 种果子，数目依次为 1，2，9。可以先将 1、2 堆合并，新堆数目为 3，耗费体力为 3。接着，将新堆与原先的第三堆合并，又得到新的堆，数目为 12，耗费体力为 12。<br />\n所以多多总共耗费体力 = 3+12=15。可以证明 15 为最小的体力耗费值。<br />\n输入<br />\n　　输入包括两行，第一行是一个整数 n (1&lt;＝n&lt;=10000)，表示果子的种类数。<br />\n　　第二行包含 n 个整数，用空格分隔，第 i 个整数 ai (1&lt;＝ai&lt;=20000) 是第 i 种果子的数目。<br />\n输出<br />\n　　输出包括一行，这一行只包含一个整数，也就是最小的体力耗费值。输入数据保证这个值小于 2^31。</p>\n</blockquote>\n<p><strong>解决问题思路</strong>：取出最小相加成一堆，并计算体力消耗</p>\n<h4 id=\"方法一小顶堆\"><a class=\"anchor\" href=\"#方法一小顶堆\">#</a> 方法一：小顶堆</h4>\n<p>代码及思路如下</p>\n<pre><code class=\"language-c++\">#include&lt;iostream&gt;\n#include&lt;algorithm&gt;\n\nusing namespace std;\nconst int maxn=10086;\nvoid updateheap(int heap[],int idx,int high)// 在本身是小顶堆的情况下维护\n&#123;\n    int i=idx,j=2*i;//\n    while(j&lt;=high)\n    &#123;\n        if(j+1&lt;=high &amp;&amp; heap[j]&gt;heap[j+1]) j=j+1;\n        if(heap[j]&lt;heap[i]) swap(heap[j],heap[i]);// 当需要进行维护操作时，就说明idx节点不满足小顶堆，要考虑swap后对子节点的影响\n        else break;//  在它本身是小顶堆的情况下，确保了维护的这个节点满足条件即可结束\n        i=j; // 考虑到子节点的影响，继续对子节点判断维护\n        j=2*i;\n    &#125;\n&#125;\n\nvoid heapinit(int heap[],int len) // 创建一个小顶堆，len是小顶堆大小\n&#123;\n    for(int i=1;i&lt;=len;i++) cin&gt;&gt;heap[i]; // 空间足够，以1为根结点 事实上，一般都以1为节点\n    for(int i=len/2;i&gt;0;i--) updateheap(heap,i,len); // 从叶子向根节点维护，确保有序性\n&#125;\n\nvoid deletetop(int heap[],int &amp;n) // n即size将要移除的数放到末尾，并回收末尾节点 = size-- \n&#123;\n    \n    swap(heap[1],heap[n]);// change happans ,we have to maintain it\n    n--; // after swap we recycle the last node\n    updateheap(heap,1,n);\n    \n&#125;\nvoid insertheap(int heap[],int &amp;n,int value)\n&#123;\n    n++;\n    heap[n]=value;\n    int i=n,j=i/2;// i is the childnode, and j is the fathernode\n    while(i&gt;1)\n    &#123;\n        if(heap[i]&lt;heap[j]) swap(heap[i],heap[j]);\n        else return; // heap[i]&gt;=heap[j]说明插入的值并不比父节点大，有序性得以保证\n        i=j;\n        j=i/2;\n    &#125;\n    return;\n&#125;\nint main()\n&#123;\n    int n,Heap[maxn],stamina,size;\n    cin&gt;&gt;n;\n    size=n;\n    stamina=0;\n    heapinit(Heap,n);\n    if(n==1)\n    &#123;\n        cout&lt;&lt;Heap[1];\n        return 1;\n    &#125;\n    // stamina 的消耗可以堆顶的访问删除来实现\n    // 通过将堆顶与堆底互换并回收堆底，保持访问堆的结构不变，通过维护保持堆的有序\n    // 回收（size--通过大小的减小停止对堆底的维护，即回收）未删除数据但不影响\n    while(size&gt;1)\n    &#123;\n        int a = Heap[1];\n        deletetop(Heap,size);\n        int b=Heap[1];\n        deletetop(Heap,size);\n       \n        insertheap(Heap,size,a+b);// value isn't equal to stamina cost totally\n        stamina+=(a+b);\n\n    &#125;\n    cout&lt;&lt;stamina;\n&#125;\n</code></pre>\n<p>结语：涉及二叉堆的生成与维护，要注意对堆顶 pop 时 (也就是上文中的 deletetop 函数，topnode 的值并没有被删除，而是放在了堆底回收区，堆的大小并不是真正意义上所占全部空间的大小，而是有效空间的大小)</p>\n<h4 id=\"方法二优先队列\"><a class=\"anchor\" href=\"#方法二优先队列\">#</a> 方法二：优先队列</h4>\n<p>代码及思路如下</p>\n<pre><code class=\"language-c++\">#include &lt;queue&gt;\n#include &lt;iostream&gt;\n\nusing namespace std;\n\nint main()\n&#123;\n    priority_queue&lt;int, vector&lt;int&gt;, greater&lt;int&gt; &gt; que;\n    // greater 增序，使最小的位于top\n    int n, i, stamina = 0;\n    cin &gt;&gt; n;\n    i = n;\n    while (i--)\n    &#123;\n        int x;\n        cin &gt;&gt; x;\n        que.push(x);\n    &#125;// 输入que，自动排序\n    if (n == 1)\n    &#123;\n        int x = que.top();\n        cout &lt;&lt; x;\n        que.pop();\n    &#125;\n    while (que.size() &gt; 1)\n    &#123;\n        int a = que.top();\n        que.pop();\n        int b = que.top();\n        que.pop();\n        stamina += (a + b);\n        que.push(a + b);\n    &#125;\n    //que.top()=sum 所有之和，不用计算到体力消耗\n\n\n    cout &lt;&lt; stamina;\n&#125;\n\n</code></pre>\n<p>结语：相比于使用小顶堆，使用优先队列的代码无疑简介易懂。</p>\n<p>然而事实上优先队列本质上使用的也是堆的思想。二者在时间效率上，是前者更优。<s>(specific 优于 general)</s> 😃</p>\n<p>参考资料：</p>\n<blockquote>\n<p><span class=\"exturl\" data-url=\"aHR0cDovL3QuY3Nkbi5jbi82dXBFSw==\">Possible_Answer</span>,</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC8xODc2MTg0NTA=\"> 二叉堆 -- 知乎</span>，</p>\n<p><span class=\"exturl\" data-url=\"aHR0cDovL3QuY3Nkbi5jbi8yQ1o0YQ==\">优先队列</span>，<span class=\"exturl\" data-url=\"aHR0cDovL3QuY3Nkbi5jbi9DNlA0aA==\">优先队列 (实例)</span>,</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC80MTU0NjcwMDA=\">数据结构 —— 哈夫曼树 (Huffman Tree)</span>,(知识扩展)</p>\n</blockquote>\n<hr />\n<blockquote>\n<p>写在最后，这里出于课程要求，并没有考虑快排的方法，事实上快排无疑也是一种解决方案</p>\n</blockquote>\n",
            "tags": [
                "Notes",
                "C++"
            ]
        },
        {
            "id": "https://evefortosaber.github.io/2023/03/19/ComputerScience/ProgramDesignNotes/%E5%B0%8F%E6%9C%A8%E6%A3%8D%E7%BB%84%E6%AD%A3%E6%96%B9%E5%BD%A2/",
            "url": "https://evefortosaber.github.io/2023/03/19/ComputerScience/ProgramDesignNotes/%E5%B0%8F%E6%9C%A8%E6%A3%8D%E7%BB%84%E6%AD%A3%E6%96%B9%E5%BD%A2/",
            "title": "小木棍组正方形",
            "date_published": "2023-03-19T11:29:17.362Z",
            "content_html": "<p>小木棍组正方形：</p>\n<p>解题思路：</p>\n<p>使用 DFS 算法，并减去一些枝干</p>\n<p>代码如下</p>\n<pre><code class=\"language-c++\">#include &lt;iostream&gt;\n#include &lt;algorithm&gt;\n\nusing namespace std;\nint sticks[38]&#123;0&#125;;//存放木棍长度\n\nint side, groupnum, n;\nbool DFS(int sum, int number, int pos,int * flag)\n&#123;\n    if (number == 3)\n        return true;\n\n    for(int i=pos;i&lt;n;i++)\n    &#123;\n        if(sum+sticks[pos]&gt;side)&#123;\n            continue;\n        &#125;\n        if(flag[i]==1)\n        &#123;\n            continue;\n        &#125;\n        if(sum+sticks[i]==side)// 深度搜索\n        &#123;\n            if(DFS(0,number+1,0,flag)) return true;\n        &#125;\n        else\n        &#123;\n            if(DFS(sum+sticks[i],number,0,flag)) return true;\n        &#125;//深度搜索不能返回true，则返回上一节点，寻找其他子节点，通过for实现\n        flag[i]=0;\n    &#125;\n    return false;\n&#125;\n\nint main()\n&#123;\n\n    cin &gt;&gt; groupnum;\n    while (groupnum--)\n    &#123;\n        int flag[38]&#123;0&#125;;\n        cin &gt;&gt; n;\n        int s = 0;\n        for (int i = 0; i &lt; n; i++)\n        &#123;\n            cin &gt;&gt; sticks[i];\n            s += sticks[i];\n        &#125;\n        if (s % 4 != 0)\n        &#123;\n            cout &lt;&lt; &quot;no&quot; &lt;&lt; endl;\n            continue;\n        &#125;\n        side = s / 4;\n\n        sort(sticks, sticks + n, greater&lt;int&gt;());\n        if (sticks[0] &gt; side)\n        &#123;\n            cout &lt;&lt; &quot;no&quot; &lt;&lt; endl;\n            continue;\n        &#125;\n        if (DFS(0, 0, 0,flag))\n            cout &lt;&lt; &quot;yes&quot; &lt;&lt; endl;\n        else \n            cout&lt;&lt;&quot;no&quot;&lt;&lt;endl;\n    &#125;\n&#125;\n</code></pre>\n<p>结语：</p>\n<p>DFS 模板</p>\n<pre><code class=\"language-c++\">int check(参数)\n&#123;\n    if(满足条件)\n        return 1;\n    return 0;\n&#125;\n \nvoid dfs(int step)\n&#123;\n        判断边界\n        &#123;\n            相应操作\n        &#125;\n        尝试每一种可能\n        &#123;\n               满足check条件\n               标记\n               继续下一步dfs(step+1)\n               恢复初始状态（回溯的时候要用到）\n        &#125;\n&#125;   \n</code></pre>\n<p>参考资料</p>\n<p><span class=\"exturl\" data-url=\"aHR0cDovL3QuY3Nkbi5jbi9FZjhNUQ==\">http://t.csdn.cn/Ef8MQ</span> DFS 算法解释及例题</p>\n",
            "tags": [
                "Notes",
                "C++"
            ]
        },
        {
            "id": "https://evefortosaber.github.io/2023/03/19/ComputerScience/ProgramDesignNotes/DFS/%E6%A3%8B%E7%9B%98%E9%97%AE%E9%A2%98/",
            "url": "https://evefortosaber.github.io/2023/03/19/ComputerScience/ProgramDesignNotes/DFS/%E6%A3%8B%E7%9B%98%E9%97%AE%E9%A2%98/",
            "title": "棋盘问题",
            "date_published": "2023-03-19T11:29:17.362Z",
            "content_html": "<h4 id=\"问题描述\"><a class=\"anchor\" href=\"#问题描述\">#</a> 问题描述</h4>\n<blockquote>\n<p>在一个给定形状的棋盘（形状可能是不规则的）上面摆放棋子，棋子没有区别。要求摆放时任意的两个棋子不能放在棋盘中的同一行或者同一列，请编程求解对于给定形状和大小的棋盘，摆放 k 个棋子的所有可行的摆放方案 C。</p>\n</blockquote>\n<h5 id=\"输入\"><a class=\"anchor\" href=\"#输入\">#</a> 输入</h5>\n<blockquote>\n<p>输入含有多组测试数据。<br />\n每组数据的第一行是两个正整数 *，n k*，用一个空格隔开，表示了将在一个 n*n 的矩阵内描述棋盘，以及摆放棋子的数目。</p>\n<p>n &lt;= 8 , k &lt;= n</p>\n<p>当为 **-1 -1** 时表示输入结束。<br />\n随后的 n 行描述了棋盘的形状：每行有 n 个字符，其中  <code>#</code>  表示棋盘区域， <code>.</code>  表示空白区域（数据保证不出现多余的空白行或者空白列）。</p>\n</blockquote>\n<h5 id=\"输出\"><a class=\"anchor\" href=\"#输出\">#</a> 输出</h5>\n<blockquote>\n<p>对于每一组数据，给出一行输出，输出摆放的方案数目 C （<em>数据保证 C&lt;2^31</em>）。</p>\n</blockquote>\n<h5 id=\"样例输入\"><a class=\"anchor\" href=\"#样例输入\">#</a> 样例输入</h5>\n<figure class=\"highlight plain\"><figcaption data-lang=\"plain\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>2 1</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>#.</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>.#</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>4 4</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>...#</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>..#.</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>.#..</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>#...</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>-1 -1</pre></td></tr></table></figure><h5 id=\"样例输出\"><a class=\"anchor\" href=\"#样例输出\">#</a> 样例输出</h5>\n<figure class=\"highlight plain\"><figcaption data-lang=\"plain\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>2</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>1</pre></td></tr></table></figure><h4 id=\"解题思路\"><a class=\"anchor\" href=\"#解题思路\">#</a> 解题思路</h4>\n<p><strong>代码如下</strong>:</p>\n<pre><code class=\"language-c++\">#include &lt;iostream&gt;\n#include &lt;string.h&gt;\nusing namespace std;\n\nint n, k, ans, a[64], j; // n 方阵长度，k棋子个数,ans is answer\n\nint visit[8][8]&#123;0&#125;; // shows which cloumn and row is not placeable\n\nstruct Node\n&#123;\n    int *flag;\n    int p = 0;// in fact, the param is redundant\n&#125;;\n// 如果为0则空，1则有棋盘’#‘\nNode qiju[100];\n// 进行遍历// 考虑使用下标 从1开始\n\nvoid dfs(int idx, int num)\n&#123;\n    if (num == k)\n        ans++; // plan + 1\n    else\n    &#123;\n        for (int i = idx; i &lt; j; i++) // each qipan has possiblity\n        &#123;\n            if (*qiju[a[i]].flag == 1)\n                continue;\n            *qiju[a[i]].flag = 1; //\n            dfs(0, num + 1);\n        &#125;\n    &#125;\n&#125;\n\nint main()\n&#123;\n    char ch;\n    while (cin &gt;&gt; n &gt;&gt; k)\n    &#123;\n        if (n == -1 &amp;&amp; k == -1)\n            break;\n        j = 0;\n        ans = 0;\n        memset(qiju, 0, sizeof(qiju));\n        memset(visit, 0, sizeof(visit));\n\n        for (int i = 0; i &lt; n * n; i++)\n        &#123;\n\n            cin &gt;&gt; ch;\n            switch (ch)\n            &#123;\n            case '.':\n                break;\n            case '#':\n\n                qiju[i].p = 1;// when I have created array a, \n                    \t\t//I can visit qiju by a, \n                    \t\t//in this situation param p is redundant.\n                qiju[i].flag = &amp;visit[i / n][i % n]; // point to position\n                a[j] = i;                            // restore qipan position with arry a\n                j++;\n                break;\n            &#125;\n        &#125;\n        dfs(0, 0);\n        cout &lt;&lt; ans &lt;&lt; endl;\n    &#125;\n    return 0;\n&#125;\n</code></pre>\n<h4 id=\"结语\"><a class=\"anchor\" href=\"#结语\">#</a> 结语</h4>\n<p>通过 visit 标记状态，通过 node 取地址，使每个棋盘的状态得以被标示，同时通过 node 数组，a 数组实现快速访问，规避无效数据。</p>\n<h4 id=\"参考资料\"><a class=\"anchor\" href=\"#参考资料\">#</a> 参考资料</h4>\n<blockquote>\n<p>DFS 深度优先搜索算法</p>\n</blockquote>\n",
            "tags": [
                "Notes",
                "C++",
                "DFS"
            ]
        },
        {
            "id": "https://evefortosaber.github.io/2023/03/19/ComputerScience/ProgramDesignNotes/DFS/%E8%BF%B7%E5%AE%AB%E9%97%AE%E9%A2%98/",
            "url": "https://evefortosaber.github.io/2023/03/19/ComputerScience/ProgramDesignNotes/DFS/%E8%BF%B7%E5%AE%AB%E9%97%AE%E9%A2%98/",
            "title": "迷宫问题",
            "date_published": "2023-03-19T11:29:17.362Z",
            "content_html": "<p>问题描述</p>\n<p>解决思路</p>\n<p>代码如下</p>\n<p>结语：</p>\n<p>迷宫问题很重要的就是路径，方向，路径使用栈，方向通过 2X4 的数组描述，关键在于，在平面上点的坐标可以用 (x,y) 描述，给它加上</p>\n<p>(1,0)((-1,0),(0,1),(0,-1)) 就实现了向右 (左，上，下) 移动。</p>\n<p>参考资料</p>\n",
            "tags": [
                "Notes",
                "C++",
                "DFS"
            ]
        },
        {
            "id": "https://evefortosaber.github.io/2022/09/07/zhaji/Note%20of%20markdown/",
            "url": "https://evefortosaber.github.io/2022/09/07/zhaji/Note%20of%20markdown/",
            "title": "Notes Of Markdown",
            "date_published": "2022-09-07T15:00:00.000Z",
            "content_html": "<p>为了搭建自己的 blog，clone 了个模板。现在也是时候该来学写 blog 了。 <s>（什么写 blog 还要学不是有手就行？？）</s></p>\n<hr />\n<h1 id=\"note-of-markdown\"><a class=\"anchor\" href=\"#note-of-markdown\">#</a> Note Of Markdown</h1>\n<hr />\n<h3 id=\"1-准备preparation\"><a class=\"anchor\" href=\"#1-准备preparation\">#</a> 1. 准备（Preparation）</h3>\n<ul>\n<li><strong>应用软件：Video Studio Code</strong></li>\n<li><strong>工作文件：makedown (后缀为 <code>.md</code> ）</strong></li>\n</ul>\n<hr />\n<h3 id=\"2-开始beginning\"><a class=\"anchor\" href=\"#2-开始beginning\">#</a> 2. 开始（Beginning）</h3>\n<ul>\n<li><strong>创建一个文本文档更改后缀为 <code>.md</code>  然后用 Visual Studio Code 打开，或者先打开 Visual Studio Code 然后新建一个后缀为 <code>.md</code>  的文件。</strong></li>\n<li><strong>打开侧边预览</strong></li>\n</ul>\n<pre><code>在view中打开 Command Palette 然后输入Open Preview to the Side\n</code></pre>\n<hr />\n<h3 id=\"3语法grammar\"><a class=\"anchor\" href=\"#3语法grammar\">#</a> 3. 语法（Grammar）</h3>\n<h5 id=\"标题title\"><a class=\"anchor\" href=\"#标题title\">#</a> 标题（Title)</h5>\n<ol>\n<li>标题可分为一到六级分别用 #、##、###...... 以此类推<br />\n其中 #表示的最大，###### 最小。语法如下：</li>\n</ol>\n<pre><code># 标题1\n## 标题2\n### 标题3\n...\n</code></pre>\n<ol start=\"2\">\n<li>换行直接回车</li>\n<li>字体\n<ul>\n<li><code>*内容*</code>  为斜体</li>\n<li><code>**内容**</code>  为加粗</li>\n<li><code>***内容***</code>  为粗斜体</li>\n<li><code>~~内容~~</code>  为删除线<br />\n表现：<em>内容</em>、<strong>内容</strong>、<em><strong>内容</strong></em>、<s>内容</s></li>\n</ul>\n</li>\n</ol>\n<h3 id=\"4插入insert\"><a class=\"anchor\" href=\"#4插入insert\">#</a> 4. 插入 (Insert)</h3>\n<ol>\n<li>\n<p>插入图片</p>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>![图片名称](图片链接 'Alt')</pre></td></tr></table></figure></li>\n<li>\n<p>插入链接</p>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token url\">[<span class=\"token content\">内容</span>](<span class=\"token url\">链接</span>)</span></pre></td></tr></table></figure></li>\n<li>\n<p>混合使用</p>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>[![图片名称](图片链接 'Alt')](链接)</pre></td></tr></table></figure><p>这样就对图片添加了超链接。</p>\n</li>\n</ol>\n<h3 id=\"5其他\"><a class=\"anchor\" href=\"#5其他\">#</a> 5. 其他</h3>\n<ul>\n<li>\n<p>工具</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly90eXBvcmFpby5jbi8=\">Typro</span></p>\n</li>\n<li>\n<p>更多语法参照<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS9odG1sL2h0bWwtdHV0b3JpYWwuaHRtbA==\"> HTML</span></p>\n</li>\n</ul>\n",
            "tags": [
                "Notes"
            ]
        }
    ]
}