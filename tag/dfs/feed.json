{
    "version": "https://jsonfeed.org/version/1",
    "title": "流云阁 • All posts by \"dfs\" tag",
    "description": "",
    "home_page_url": "https://evefortosaber.github.io",
    "items": [
        {
            "id": "https://evefortosaber.github.io/2023/03/20/ComputerScience/ProgramDesignNotes/DFS/FindwayToKFC/",
            "url": "https://evefortosaber.github.io/2023/03/20/ComputerScience/ProgramDesignNotes/DFS/FindwayToKFC/",
            "title": "FindwayToKFC",
            "date_published": "2023-03-19T16:00:00.000Z",
            "content_html": "<p><img data-src=\"https://raw.githubusercontent.com/EveFortosaber/Open-pictures/main/picgo/KFC.jpg\" alt=\"KFC\" /></p>\n<h4 id=\"题目描述\"><a class=\"anchor\" href=\"#题目描述\">#</a> 题目描述</h4>\n<blockquote>\n<p>Pass a year learning in Hangzhou, yifenfei arrival hometown Ningbo at finally. Leave Ningbo one year, yifenfei have many people to meet. Especially a good friend Merceki.<br />\nYifenfei’s home is at the countryside, but Merceki’s home is in the center of city. So yifenfei made arrangements with Merceki to meet at a KFC. There are many KFC in Ningbo, they want to choose one that let the total time to it be most smallest.<br />\nNow give you a Ningbo map, Both yifenfei and Merceki can move up, down ,left, right to the adjacent road by cost 11 minutes.</p>\n</blockquote>\n<h4 id=\"输入\"><a class=\"anchor\" href=\"#输入\">#</a> 输入</h4>\n<blockquote>\n<p>The input contains multiple test cases.<br />\nEach test case include, first two integers n, m. (2&lt;=n,m&lt;=200).<br />\nNext n lines, each line included m character.<br />\n‘Y’ express yifenfei initial position.<br />\n‘M’   express Merceki initial position.<br />\n‘#’ forbid road;<br />\n‘.’ Road.<br />\n‘@’ KCF</p>\n</blockquote>\n<h5 id=\"输出\"><a class=\"anchor\" href=\"#输出\">#</a> 输出</h5>\n<blockquote>\n<p>For each test case output the minimum total time that both yifenfei and Merceki to arrival one of KFC.You may sure there is always have a KFC that can let them meet.</p>\n</blockquote>\n<h5 id=\"样例输入\"><a class=\"anchor\" href=\"#样例输入\">#</a> 样例输入</h5>\n<figure class=\"highlight plain\"><figcaption data-lang=\"plain\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>4 4</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>Y.#@</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>....</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>.#..</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>@..M</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>4 4</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>Y.#@</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>....</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>.#..</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>@#.M</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>5 5</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>Y..@.</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>.#...</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>.#...</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>@..M.</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>#...#</pre></td></tr></table></figure><h5 id=\"样例输出\"><a class=\"anchor\" href=\"#样例输出\">#</a> 样例输出</h5>\n<figure class=\"highlight plain\"><figcaption data-lang=\"plain\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>66</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>88</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>66</pre></td></tr></table></figure><h4 id=\"解决思路\"><a class=\"anchor\" href=\"#解决思路\">#</a> 解决思路：</h4>\n<p>DFS 算法全部扫描。</p>\n<h5 id=\"代码如下\"><a class=\"anchor\" href=\"#代码如下\">#</a> 代码如下</h5>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string.h></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;vector></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>using namespace std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> MaxN <span class=\"token operator\">=</span> <span class=\"token number\">200</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// vector&lt;vector&lt;char> > map(MaxN, vector&lt;char>(MaxN));</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">char</span> map<span class=\"token punctuation\">[</span>MaxN<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>MaxN<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">int</span> visit<span class=\"token punctuation\">[</span>MaxN<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>MaxN<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">,</span> m<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">int</span> direction<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">people</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token comment\">/* data */</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">int</span> step<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token function\">people</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> _x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> _y<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> _step<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token function\">x</span><span class=\"token punctuation\">(</span>_x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>                                        <span class=\"token function\">y</span><span class=\"token punctuation\">(</span>_y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>                                        <span class=\"token function\">step</span><span class=\"token punctuation\">(</span>_step<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token function\">people</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token function\">x</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>               <span class=\"token function\">y</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>               <span class=\"token function\">step</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token comment\">//a 走过的路程，b 走过的路程，两人到达同一餐馆的最短距离</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> suma_step<span class=\"token punctuation\">,</span> sumb_step<span class=\"token punctuation\">,</span> ans<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>people a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token comment\">// 找出 a 到达各个餐馆的最短步数</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token comment\">/* 解释一下</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>这里由于习惯了 DFS 没有多想直接使用了 DFS</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>后来想到限制条件，故在 DFS 的基础上</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>我通过找出每条可达的路线，并记录相应步数</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>再找出抵达目的地的最小步数</pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>*/</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre></pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">findawayofa</span><span class=\"token punctuation\">(</span>people man<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> y<span class=\"token punctuation\">)</span><span class=\"token comment\">// 没有多想直接构建了两个函数</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>man<span class=\"token punctuation\">.</span>x <span class=\"token operator\">==</span> x <span class=\"token operator\">&amp;&amp;</span> man<span class=\"token punctuation\">.</span>y <span class=\"token operator\">==</span> y<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        suma_step<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>man<span class=\"token punctuation\">.</span>step<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>        <span class=\"token keyword\">int</span> curx <span class=\"token operator\">=</span> man<span class=\"token punctuation\">.</span>x <span class=\"token operator\">+</span> direction<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>        <span class=\"token keyword\">int</span> cury <span class=\"token operator\">=</span> man<span class=\"token punctuation\">.</span>y <span class=\"token operator\">+</span> direction<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>curx <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> cury <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> visit<span class=\"token punctuation\">[</span>curx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>cury<span class=\"token punctuation\">]</span> <span class=\"token operator\">||</span> curx <span class=\"token operator\">>=</span> m <span class=\"token operator\">||</span> cury <span class=\"token operator\">>=</span> n <span class=\"token operator\">||</span> map<span class=\"token punctuation\">[</span>curx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>cury<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token char\">'#'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>            <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>        visit<span class=\"token punctuation\">[</span>curx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>cury<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>        <span class=\"token comment\">// 下一节点</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>        people <span class=\"token function\">nman</span><span class=\"token punctuation\">(</span>curx<span class=\"token punctuation\">,</span> cury<span class=\"token punctuation\">,</span> man<span class=\"token punctuation\">.</span>step <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>        <span class=\"token function\">findawayofa</span><span class=\"token punctuation\">(</span>nman<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>        visit<span class=\"token punctuation\">[</span>curx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>cury<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">findawayofb</span><span class=\"token punctuation\">(</span>people man<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> y<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>man<span class=\"token punctuation\">.</span>x <span class=\"token operator\">==</span> x <span class=\"token operator\">&amp;&amp;</span> man<span class=\"token punctuation\">.</span>y <span class=\"token operator\">==</span> y<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>        sumb_step<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>man<span class=\"token punctuation\">.</span>step<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>        <span class=\"token keyword\">int</span> curx <span class=\"token operator\">=</span> man<span class=\"token punctuation\">.</span>x <span class=\"token operator\">+</span> direction<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>        <span class=\"token keyword\">int</span> cury <span class=\"token operator\">=</span> man<span class=\"token punctuation\">.</span>y <span class=\"token operator\">+</span> direction<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>curx <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> cury <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> visit<span class=\"token punctuation\">[</span>curx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>cury<span class=\"token punctuation\">]</span> <span class=\"token operator\">||</span> curx <span class=\"token operator\">>=</span> m <span class=\"token operator\">||</span> cury <span class=\"token operator\">>=</span> n <span class=\"token operator\">||</span> map<span class=\"token punctuation\">[</span>curx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>cury<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token char\">'#'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>            <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>        visit<span class=\"token punctuation\">[</span>curx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>cury<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>        people <span class=\"token function\">nman</span><span class=\"token punctuation\">(</span>curx<span class=\"token punctuation\">,</span> cury<span class=\"token punctuation\">,</span> man<span class=\"token punctuation\">.</span>step <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>        <span class=\"token function\">findawayofb</span><span class=\"token punctuation\">(</span>nman<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>        visit<span class=\"token punctuation\">[</span>curx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>cury<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre></pre></td></tr><tr><td data-num=\"78\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">destination</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>    <span class=\"token comment\">/* data */</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>    <span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>    <span class=\"token function\">destination</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> _x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> _y<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token function\">x</span><span class=\"token punctuation\">(</span>_x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>                                  <span class=\"token function\">y</span><span class=\"token punctuation\">(</span>_y<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>vector<span class=\"token operator\">&lt;</span>destination<span class=\"token operator\">></span> des<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre><span class=\"token comment\">// 考虑到每次可能有多条路径</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre><span class=\"token comment\">// 我将每地的最少步数，按照前一个是 A 的，后一个是 B 的，</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre><span class=\"token comment\">// 两两一组存入 ans</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">findmin</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span>s<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>    <span class=\"token keyword\">int</span> size <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>    <span class=\"token keyword\">int</span> temp <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">front</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> size<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>temp <span class=\"token operator\">></span> s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre>            temp <span class=\"token operator\">=</span> s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>    ans<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>temp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> size<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>        s<span class=\"token punctuation\">.</span><span class=\"token function\">pop_back</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre>    <span class=\"token comment\">// 两人初始位置</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre>    <span class=\"token keyword\">int</span> a_start_x<span class=\"token punctuation\">,</span> a_start_y<span class=\"token punctuation\">,</span> b_start_x<span class=\"token punctuation\">,</span> b_start_y<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>cin <span class=\"token operator\">>></span> n <span class=\"token operator\">>></span> m<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre>        <span class=\"token function\">memset</span><span class=\"token punctuation\">(</span>visit<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>visit<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"107\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"108\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre>            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> m<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"110\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"111\"></td><td><pre>                cin <span class=\"token operator\">>></span> map<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"112\"></td><td><pre>                <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>map<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"113\"></td><td><pre>                <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"114\"></td><td><pre>                <span class=\"token keyword\">case</span> <span class=\"token char\">'Y'</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"115\"></td><td><pre>                    a_start_x <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"116\"></td><td><pre>                    a_start_y <span class=\"token operator\">=</span> j<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"117\"></td><td><pre>                    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"118\"></td><td><pre></pre></td></tr><tr><td data-num=\"119\"></td><td><pre>                <span class=\"token keyword\">case</span> <span class=\"token char\">'M'</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"120\"></td><td><pre>                    b_start_x <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"121\"></td><td><pre>                    b_start_y <span class=\"token operator\">=</span> j<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"122\"></td><td><pre>                    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"123\"></td><td><pre>                <span class=\"token keyword\">case</span> <span class=\"token char\">'@'</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"124\"></td><td><pre>                        <span class=\"token comment\">// 记录餐馆位置</span></pre></td></tr><tr><td data-num=\"125\"></td><td><pre>                    destination <span class=\"token function\">d</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"126\"></td><td><pre>                    des<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"127\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"128\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"129\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"130\"></td><td><pre>        people <span class=\"token function\">a</span><span class=\"token punctuation\">(</span>a_start_x<span class=\"token punctuation\">,</span> a_start_y<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">b</span><span class=\"token punctuation\">(</span>b_start_x<span class=\"token punctuation\">,</span> b_start_y<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"131\"></td><td><pre>        <span class=\"token comment\">// 餐馆个数</span></pre></td></tr><tr><td data-num=\"132\"></td><td><pre>        <span class=\"token keyword\">int</span> des_size <span class=\"token operator\">=</span> des<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"133\"></td><td><pre>        <span class=\"token comment\">// 测试（可忽略 //cout&lt;&lt;des [0].x&lt;&lt;' '&lt;&lt;des [0].y&lt;&lt;endl;</span></pre></td></tr><tr><td data-num=\"134\"></td><td><pre></pre></td></tr><tr><td data-num=\"135\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> k <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> k <span class=\"token operator\">&lt;</span> des_size<span class=\"token punctuation\">;</span> k<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"136\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"137\"></td><td><pre>            <span class=\"token function\">findawayofa</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> des<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">,</span> des<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"138\"></td><td><pre>            <span class=\"token function\">findmin</span><span class=\"token punctuation\">(</span>suma_step<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"139\"></td><td><pre>            </pre></td></tr><tr><td data-num=\"140\"></td><td><pre>            <span class=\"token function\">findawayofb</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">,</span> des<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">,</span> des<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"141\"></td><td><pre>            <span class=\"token function\">findmin</span><span class=\"token punctuation\">(</span>sumb_step<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"142\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"143\"></td><td><pre></pre></td></tr><tr><td data-num=\"144\"></td><td><pre>        <span class=\"token keyword\">int</span> mi <span class=\"token operator\">=</span> ans<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> ans<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"145\"></td><td><pre>        <span class=\"token keyword\">int</span> size <span class=\"token operator\">=</span> ans<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"146\"></td><td><pre>\t\t<span class=\"token comment\">// 对 ans 中的数据两两一对处理</span></pre></td></tr><tr><td data-num=\"147\"></td><td><pre>        <span class=\"token comment\">// ans=[A,B,A,B,A,B,...]</span></pre></td></tr><tr><td data-num=\"148\"></td><td><pre>        <span class=\"token comment\">//       1   2   3 ... 第 i 组</span></pre></td></tr><tr><td data-num=\"149\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> size<span class=\"token punctuation\">;</span> j <span class=\"token operator\">+=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"150\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"151\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>mi <span class=\"token operator\">></span> ans<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> ans<span class=\"token punctuation\">[</span>j <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"152\"></td><td><pre>                mi <span class=\"token operator\">=</span> ans<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> ans<span class=\"token punctuation\">[</span>j <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"153\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"154\"></td><td><pre></pre></td></tr><tr><td data-num=\"155\"></td><td><pre>        <span class=\"token comment\">// for (int i = 0; i &lt; a_size; i++)</span></pre></td></tr><tr><td data-num=\"156\"></td><td><pre>        <span class=\"token comment\">// &#123;</span></pre></td></tr><tr><td data-num=\"157\"></td><td><pre>        <span class=\"token comment\">//     int total = suma_step[i] + sumb_step[i];</span></pre></td></tr><tr><td data-num=\"158\"></td><td><pre>        <span class=\"token comment\">//     if (total &lt; mi)</span></pre></td></tr><tr><td data-num=\"159\"></td><td><pre>        <span class=\"token comment\">//         mi = total;</span></pre></td></tr><tr><td data-num=\"160\"></td><td><pre>        <span class=\"token comment\">// &#125;</span></pre></td></tr><tr><td data-num=\"161\"></td><td><pre>        cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">11</span> <span class=\"token operator\">*</span> mi <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"162\"></td><td><pre>        <span class=\"token comment\">// while (a_size--)</span></pre></td></tr><tr><td data-num=\"163\"></td><td><pre>        <span class=\"token comment\">//     suma_step.pop_back();</span></pre></td></tr><tr><td data-num=\"164\"></td><td><pre>        <span class=\"token comment\">// while (b_size--)</span></pre></td></tr><tr><td data-num=\"165\"></td><td><pre>        <span class=\"token comment\">//     sumb_step.pop_back();</span></pre></td></tr><tr><td data-num=\"166\"></td><td><pre>        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>size<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"167\"></td><td><pre>            ans<span class=\"token punctuation\">.</span><span class=\"token function\">pop_back</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"168\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"169\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"结语\"><a class=\"anchor\" href=\"#结语\">#</a> 结语</h4>\n<p>由于最开始，在求两人到达 kfc 最短时间时，忽略了要到达同一餐馆，导致错误。</p>\n<p>出于懒惰，没有重新写过。期间，遇到如下问题：</p>\n<ol>\n<li>如何求得最短路径\n<ol>\n<li>人到餐馆有多条路径</li>\n<li>人与餐馆的相对位置非确定</li>\n</ol>\n</li>\n<li>如何求得两人到达同一餐馆的最短时间</li>\n</ol>\n<p><s>于是就出现了许多被注释删除的代码</s></p>\n<p>此外，这篇代码的局限性高，也没能模板化 -&gt; <s>可读性低</s></p>\n<p>后续继续努力吧✊。</p>\n<h4 id=\"参考资料\"><a class=\"anchor\" href=\"#参考资料\">#</a> 参考资料</h4>\n<blockquote>\n<p><span class=\"exturl\" data-url=\"aHR0cDovL3QuY3Nkbi5jbi9oMXFMYg==\">vector 二维数组</span></p>\n</blockquote>\n",
            "tags": [
                "Notes",
                "C++",
                "DFS"
            ]
        },
        {
            "id": "https://evefortosaber.github.io/2023/03/19/ComputerScience/ProgramDesignNotes/DFS/%E5%B0%8F%E6%9C%A8%E6%A3%8D%E7%BB%84%E6%AD%A3%E6%96%B9%E5%BD%A2/",
            "url": "https://evefortosaber.github.io/2023/03/19/ComputerScience/ProgramDesignNotes/DFS/%E5%B0%8F%E6%9C%A8%E6%A3%8D%E7%BB%84%E6%AD%A3%E6%96%B9%E5%BD%A2/",
            "title": "小木棍组正方形",
            "date_published": "2023-03-19T11:29:17.362Z",
            "content_html": "<h3 id=\"小木棍组正方形\"><a class=\"anchor\" href=\"#小木棍组正方形\">#</a> 小木棍组正方形：</h3>\n<h4 id=\"题目描述\"><a class=\"anchor\" href=\"#题目描述\">#</a> 题目描述</h4>\n<blockquote>\n<p>有 n 个木棒，需要用上所有木棒，围成一个正方形，如果可以围成正方形，则输出 &quot;yes&quot;, 否则输出 &quot;no&quot;。</p>\n<h4 id=\"输入\"><a class=\"anchor\" href=\"#输入\">#</a> 输入</h4>\n<p>第一行输入一个整数 T 表示样例个数。<br />\n对于每个样例，第一行输入一个整数 N 表示木棍的个数，第二行输入 N 个数字表示木棒的长度。</p>\n<h4 id=\"输出\"><a class=\"anchor\" href=\"#输出\">#</a> 输出</h4>\n<p>对于每个样例，如果可以则输出 &quot;yes&quot;, 否则输出 &quot;no&quot;。</p>\n<h4 id=\"样例输入-复制\"><a class=\"anchor\" href=\"#样例输入-复制\">#</a> 样例输入 复制</h4>\n<figure class=\"highlight plain\"><figcaption data-lang=\"plain\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>3 </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>4 </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>1 1 1 1 </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>5 </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>10 20 30 40 50 </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>8 </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>1 7 2 6 4 4 3 5</pre></td></tr></table></figure><h4 id=\"样例输出-复制\"><a class=\"anchor\" href=\"#样例输出-复制\">#</a> 样例输出 复制</h4>\n<figure class=\"highlight plain\"><figcaption data-lang=\"plain\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>yes</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>no</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>yes</pre></td></tr></table></figure><h4 id=\"提示\"><a class=\"anchor\" href=\"#提示\">#</a> 提示</h4>\n<p>N &lt;= 20</p>\n</blockquote>\n<h4 id=\"解题思路\"><a class=\"anchor\" href=\"#解题思路\">#</a> 解题思路：</h4>\n<p>使用 DFS 算法，并减去一些枝干</p>\n<h5 id=\"代码如下\"><a class=\"anchor\" href=\"#代码如下\">#</a> 代码如下</h5>\n<pre><code class=\"language-c++\">#include &lt;iostream&gt;\n#include &lt;algorithm&gt;\n\nusing namespace std;\nint sticks[38]&#123;0&#125;;//建立木棍数组\n\nint side, groupnum, n;\n// sum表示目前木棍长度和，num表示已凑出的边数，pos表示使用的木棍，flag表示是否已使用\nbool DFS(int sum, int number, int pos,int * flag)\n&#123;\n    //凑到3条边即可\n    if (number == 3)\n        return true;\n    // 从pos到n-1\n    for(int i=pos;i&lt;n;i++)\n    &#123;\n        // 如果大于边长舍去这种可能\n        if(sum+sticks[pos]&gt;side)&#123;\n            continue;\n        &#125;\n        // 如果被使用了，跳过\n        if(flag[i]==1)\n        &#123;\n            continue;\n        &#125;\n        // 恰好找到了\n        if(sum+sticks[i]==side)\n        &#123;\n            // 找到一条边，重头再找下一条边 sum，pos 归零，num+1，但flag不动用于记录是否被使用\n            //（如果木棍被用于组成上一条边此时其对应的flag应为1\n            if(DFS(0,number+1,0,flag)) return true;\n        &#125;\n        // 不足\n        else\n        &#123;\n            // 取出这一根木棍：sum=sum+sticks[i] （两个sum不等价）\n            if(DFS(sum+sticks[i],number,0,flag)) return true;\n        &#125;\n        // 回溯，（这种可能不行（此路不通（把用了的木棍归还（则flag归零\n        flag[i]=0;\n    &#125;\n    return false;\n&#125;\n\nint main()\n&#123;\n\n    cin &gt;&gt; groupnum;//输入测试案例数\n    while (groupnum--)\n    &#123;\n        int flag[38]&#123;0&#125;;// 用于标记是否使用过\n        cin &gt;&gt; n;// 木棍数量\n        int s = 0; // 木棍总长度\n        //获取木棍长度，及总长\n        for (int i = 0; i &lt; n; i++) \n        &#123;\n            cin &gt;&gt; sticks[i];\n            s += sticks[i];\n        &#125;\n        // 如果总长不能被4整除，舍去\n        if (s % 4 != 0)\n        &#123;\n            cout &lt;&lt; &quot;no&quot; &lt;&lt; endl;\n            continue;\n        &#125;\n        // 边长\n        side = s / 4;\n        // 排序，便于搜索\n        sort(sticks, sticks + n, greater&lt;int&gt;());\n        // 如果最长的大于边长舍去\n        if (sticks[0] &gt; side)\n        &#123;\n            cout &lt;&lt; &quot;no&quot; &lt;&lt; endl;\n            continue;\n        &#125;\n        //搜索\n        if (DFS(0, 0, 0,flag))\n            cout &lt;&lt; &quot;yes&quot; &lt;&lt; endl;\n        else \n            cout&lt;&lt;&quot;no&quot;&lt;&lt;endl;\n    &#125;\n</code></pre>\n<h4 id=\"结语\"><a class=\"anchor\" href=\"#结语\">#</a> 结语：</h4>\n<p>DFS 模板</p>\n<pre><code class=\"language-c++\">int check(参数)\n&#123;\n    if(满足条件)\n        return 1;\n    return 0;\n&#125;\n \nvoid dfs(int step)\n&#123;\n        判断边界\n        &#123;\n            相应操作\n        &#125;\n        尝试每一种可能\n        &#123;\n               满足check条件\n               标记\n               继续下一步dfs(step+1)\n               恢复初始状态（回溯的时候要用到）\n        &#125;\n&#125;   \n</code></pre>\n<h4 id=\"参考资料\"><a class=\"anchor\" href=\"#参考资料\">#</a> 参考资料</h4>\n<blockquote>\n<p><span class=\"exturl\" data-url=\"aHR0cDovL3QuY3Nkbi5jbi9FZjhNUQ==\">DFS 算法解释及例题</span></p>\n</blockquote>\n",
            "tags": [
                "Notes",
                "C++",
                "DFS"
            ]
        },
        {
            "id": "https://evefortosaber.github.io/2023/03/19/ComputerScience/ProgramDesignNotes/DFS/%E6%A3%8B%E7%9B%98%E9%97%AE%E9%A2%98/",
            "url": "https://evefortosaber.github.io/2023/03/19/ComputerScience/ProgramDesignNotes/DFS/%E6%A3%8B%E7%9B%98%E9%97%AE%E9%A2%98/",
            "title": "棋盘问题",
            "date_published": "2023-03-19T11:29:17.362Z",
            "content_html": "<p><img data-src=\"https://raw.githubusercontent.com/EveFortosaber/Open-pictures/main/picgo/%E5%87%89_001.jpg\" alt=\"凉_001\" /></p>\n<h4 id=\"问题描述\"><a class=\"anchor\" href=\"#问题描述\">#</a> 问题描述</h4>\n<blockquote>\n<p>在一个给定形状的棋盘（形状可能是不规则的）上面摆放棋子，棋子没有区别。要求摆放时任意的两个棋子不能放在棋盘中的同一行或者同一列，请编程求解对于给定形状和大小的棋盘，摆放 k 个棋子的所有可行的摆放方案 C。</p>\n</blockquote>\n<hr />\n<h5 id=\"输入\"><a class=\"anchor\" href=\"#输入\">#</a> 输入</h5>\n<blockquote>\n<p>输入含有多组测试数据。<br />\n每组数据的第一行是两个正整数 *，n k*，用一个空格隔开，表示了将在一个 n*n 的矩阵内描述棋盘，以及摆放棋子的数目。</p>\n<p>n &lt;= 8 , k &lt;= n</p>\n<p>当为 **-1 -1** 时表示输入结束。<br />\n随后的 n 行描述了棋盘的形状：每行有 n 个字符，其中  <code>#</code>  表示棋盘区域， <code>.</code>  表示空白区域（数据保证不出现多余的空白行或者空白列）。</p>\n</blockquote>\n<hr />\n<h5 id=\"输出\"><a class=\"anchor\" href=\"#输出\">#</a> 输出</h5>\n<blockquote>\n<p>对于每一组数据，给出一行输出，输出摆放的方案数目 C （<em>数据保证 C&lt;2^31</em>）。</p>\n</blockquote>\n<hr />\n<h5 id=\"样例输入\"><a class=\"anchor\" href=\"#样例输入\">#</a> 样例输入</h5>\n<figure class=\"highlight plain\"><figcaption data-lang=\"plain\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>2 1</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>#.</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>.#</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>4 4</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>...#</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>..#.</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>.#..</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>#...</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>-1 -1</pre></td></tr></table></figure><hr />\n<h5 id=\"样例输出\"><a class=\"anchor\" href=\"#样例输出\">#</a> 样例输出</h5>\n<figure class=\"highlight plain\"><figcaption data-lang=\"plain\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>2</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>1</pre></td></tr></table></figure><hr />\n<h4 id=\"解题思路\"><a class=\"anchor\" href=\"#解题思路\">#</a> 解题思路</h4>\n<p>通过 visit 记录行列被 ' 污染 ' 情况。对应的下标表示行列。</p>\n<p>通过 DFS 遍历所有可能</p>\n<p><strong>代码如下</strong>:</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string.h></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>using namespace std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">,</span> k<span class=\"token punctuation\">,</span> ans<span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">[</span><span class=\"token number\">64</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">;</span> <span class=\"token comment\">//n 方阵长度，k 棋子个数，ans is answer</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">int</span> visit<span class=\"token punctuation\">[</span><span class=\"token number\">8</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">8</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#123;</span><span class=\"token number\">0</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// shows which cloumn and row is not placeable</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">Node</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>flag<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">int</span> p <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// in fact, the param is redundant</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\">// 如果为 0 则空，1 则有棋盘’#‘</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>Node qiju<span class=\"token punctuation\">[</span><span class=\"token number\">100</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token comment\">// 进行遍历 // 考虑使用下标 从 1 开始</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> idx<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> num<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>num <span class=\"token operator\">==</span> k<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        ans<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// plan + 1</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> idx<span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> j<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// each qipan has possiblity</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>qiju<span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>flag <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>                <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>            <span class=\"token operator\">*</span>qiju<span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>flag <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> num <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token keyword\">char</span> ch<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>cin <span class=\"token operator\">>></span> n <span class=\"token operator\">>></span> k<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span> <span class=\"token operator\">&amp;&amp;</span> k <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        ans <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        <span class=\"token function\">memset</span><span class=\"token punctuation\">(</span>qiju<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>qiju<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        <span class=\"token function\">memset</span><span class=\"token punctuation\">(</span>visit<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>visit<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n <span class=\"token operator\">*</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>            cin <span class=\"token operator\">>></span> ch<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>            <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>ch<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>            <span class=\"token keyword\">case</span> <span class=\"token char\">'.'</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>            <span class=\"token keyword\">case</span> <span class=\"token char\">'#'</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>                qiju<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>p <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// when I have created array a, </span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>                    \t\t<span class=\"token comment\">//I can visit qiju by a, </span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>                    \t\t<span class=\"token comment\">//in this situation param p is redundant.</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>                qiju<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>flag <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>visit<span class=\"token punctuation\">[</span>i <span class=\"token operator\">/</span> n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i <span class=\"token operator\">%</span> n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// point to position</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>                a<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span>                            <span class=\"token comment\">// restore qipan position with arry a</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>                j<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>        <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>        cout <span class=\"token operator\">&lt;&lt;</span> ans <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"结语\"><a class=\"anchor\" href=\"#结语\">#</a> 结语</h4>\n<p>通过 visit 标记状态，通过 node 取地址，使每个棋盘的状态得以被标示，同时通过 node 数组，a 数组实现快速访问，规避无效数据。</p>\n<h4 id=\"参考资料\"><a class=\"anchor\" href=\"#参考资料\">#</a> 参考资料</h4>\n<blockquote>\n<p>DFS 深度优先搜索算法</p>\n</blockquote>\n",
            "tags": [
                "Notes",
                "C++",
                "DFS"
            ]
        },
        {
            "id": "https://evefortosaber.github.io/2023/03/19/ComputerScience/ProgramDesignNotes/DFS/%E8%BF%B7%E5%AE%AB%E9%97%AE%E9%A2%98/",
            "url": "https://evefortosaber.github.io/2023/03/19/ComputerScience/ProgramDesignNotes/DFS/%E8%BF%B7%E5%AE%AB%E9%97%AE%E9%A2%98/",
            "title": "迷宫问题",
            "date_published": "2023-03-18T16:00:00.000Z",
            "content_html": "<p><img data-src=\"https://raw.githubusercontent.com/EveFortosaber/Open-pictures/main/picgo/fox_001.jpg\" alt=\"fox_001\" /></p>\n<h4 id=\"问题描述\"><a class=\"anchor\" href=\"#问题描述\">#</a> 问题描述</h4>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 定义一个二维数组： </span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">int</span> maze<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><blockquote>\n<p>它表示一个迷宫，其中的 1 表示墙壁，0 表示可以走的路，只能横着走或竖着走，不能斜着走，要求编程序找出从左上角到右下角的最短路线。</p>\n</blockquote>\n<hr />\n<h5 id=\"输入\"><a class=\"anchor\" href=\"#输入\">#</a> 输入</h5>\n<blockquote>\n<p>一个 5 × 5 的二维数组，表示一个迷宫。数据保证有唯一解。</p>\n</blockquote>\n<hr />\n<h5 id=\"输出\"><a class=\"anchor\" href=\"#输出\">#</a> 输出</h5>\n<blockquote>\n<p>左上角到右下角的最短路径，格式如样例所示。</p>\n</blockquote>\n<hr />\n<h5 id=\"样例输入\"><a class=\"anchor\" href=\"#样例输入\">#</a> 样例输入</h5>\n<figure class=\"highlight plain\"><figcaption data-lang=\"plain\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>0 1 0 0 0</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>0 1 0 1 0</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>0 0 0 0 0</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>0 1 1 1 0</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>0 0 0 1 0</pre></td></tr></table></figure><hr />\n<h5 id=\"样例输出\"><a class=\"anchor\" href=\"#样例输出\">#</a> 样例输出</h5>\n<figure class=\"highlight plain\"><figcaption data-lang=\"plain\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>(0, 0)</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>(1, 0)</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>(2, 0)</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>(2, 1)</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>(2, 2)</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>(2, 3)</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>(2, 4)</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>(3, 4)</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>(4, 4)</pre></td></tr></table></figure><h4 id=\"解决思路\"><a class=\"anchor\" href=\"#解决思路\">#</a> 解决思路</h4>\n<p>这道题可以使用 BFS（广度优先搜索）来解决。</p>\n<p>BFS 算法：首先将起点加入队列，每次从队列中取出一个点来进行扩展，将扩展得到的所有点加入队列。重复上述过程，直到找到终点或队列为空为止。</p>\n<p>需要注意的是，在扩展时，如果某个点已经在之前被扩展过，那么就不需要再次处理它了，这样可以避免进入死循环。</p>\n<h5 id=\"代码如下\"><a class=\"anchor\" href=\"#代码如下\">#</a> 代码如下</h5>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stack></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string.h></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>using namespace std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">int</span> maze<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">int</span> visit<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">int</span> direction<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">Node</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\">/* data */</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">int</span> x <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> y <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token function\">Node</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> _x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> _y<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token function\">x</span><span class=\"token punctuation\">(</span>_x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>                           <span class=\"token function\">y</span><span class=\"token punctuation\">(</span>_y<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>stack<span class=\"token operator\">&lt;</span>Node<span class=\"token operator\">></span> s<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>bool <span class=\"token function\">findway</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token comment\">// 只要找一条路，不需要遍历所有可能</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    Node <span class=\"token function\">t</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    t <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">top</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">.</span>x <span class=\"token operator\">==</span> <span class=\"token number\">4</span> <span class=\"token operator\">&amp;&amp;</span> t<span class=\"token punctuation\">.</span>y <span class=\"token operator\">==</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token keyword\">return</span> true<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token comment\">// if (t.x &lt; 0 || t.y &lt; 0 || t.x > 4 || t.y > 4)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token comment\">// &#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token comment\">//     return false;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token comment\">// &#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token keyword\">int</span> cur_x <span class=\"token operator\">=</span> t<span class=\"token punctuation\">.</span>x <span class=\"token operator\">+</span> direction<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token keyword\">int</span> cur_y <span class=\"token operator\">=</span> t<span class=\"token punctuation\">.</span>y <span class=\"token operator\">+</span> direction<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cur_x <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> cur_y <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> cur_x <span class=\"token operator\">></span> <span class=\"token number\">4</span> <span class=\"token operator\">||</span> cur_y <span class=\"token operator\">></span> <span class=\"token number\">4</span> <span class=\"token operator\">||</span> visit<span class=\"token punctuation\">[</span>cur_x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>cur_y<span class=\"token punctuation\">]</span> <span class=\"token operator\">||</span> maze<span class=\"token punctuation\">[</span>cur_x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>cur_y<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>            <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token comment\">// ensure that next node must be on the road</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        <span class=\"token comment\">// visit, make tag</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        visit<span class=\"token punctuation\">[</span>cur_x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>cur_y<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 标记走过</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        Node <span class=\"token function\">newpos</span><span class=\"token punctuation\">(</span>cur_x<span class=\"token punctuation\">,</span> cur_y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        s<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>newpos<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 走过了，入栈</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">findway</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token comment\">// 继续搜索</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>            <span class=\"token keyword\">return</span> true<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        s<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 失败，退栈， 回溯</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        visit<span class=\"token punctuation\">[</span>cur_x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>cur_y<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    <span class=\"token keyword\">return</span> false<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre></pre></td></tr><tr><td data-num=\"49\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>            cin <span class=\"token operator\">>></span> maze<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>    Node <span class=\"token function\">startpos</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>    s<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>startpos<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">findway</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>        stack<span class=\"token operator\">&lt;</span>Node<span class=\"token operator\">></span> temp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>            temp<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">top</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>            s<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>temp<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>            cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token char\">'('</span> <span class=\"token operator\">&lt;&lt;</span> temp<span class=\"token punctuation\">.</span><span class=\"token function\">top</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>x <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\", \"</span> <span class=\"token operator\">&lt;&lt;</span> temp<span class=\"token punctuation\">.</span><span class=\"token function\">top</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>y <span class=\"token operator\">&lt;&lt;</span> <span class=\"token char\">')'</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>            temp<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"结语\"><a class=\"anchor\" href=\"#结语\">#</a> 结语：</h4>\n<p>迷宫问题很重要的就是路径，方向，路径使用栈，方向通过<em> 2X4</em> 的数组描述，关键在于，在平面上点的坐标可以用 *(x,y)* 描述，给它加上相应分量</p>\n<p><em><strong>( 1, 0 )</strong> ( <strong>( -1, 0 ), ( 0, 1 ), ( 0, -1 )</strong> )* 就实现了向</em> * 右 (左，上，下)** 移动。</p>\n<h4 id=\"参考资料\"><a class=\"anchor\" href=\"#参考资料\">#</a> 参考资料</h4>\n<blockquote>\n<p>DFS 搜索算法，</p>\n<p>结构体</p>\n</blockquote>\n",
            "tags": [
                "Notes",
                "C++",
                "DFS"
            ]
        }
    ]
}